/*!
  ReduxPersist.js v7.2.1
  https://github.com/ryanwillis/reduxjs-toolkit-persist#readme
  Released under the MIT License.
*/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ReduxPersist={})}(this,(function(e){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}const r="persist:",o="persist/FLUSH",n="persist/REHYDRATE",s="persist/PAUSE",i="persist/PERSIST",c="persist/PURGE",u="persist/REGISTER";function a(e,t,r,{debug:o}){const n=Object.assign({},r);if(e&&"object"==typeof e){Object.keys(e).forEach((s=>{"_persist"!==s&&(t[s]===r[s]?n[s]=e[s]:"production"!==process.env.NODE_ENV&&o&&console.log("reduxjs-toolkit-persist/stateReconciler: sub state for key `%s` modified, skipping.",s))}))}return"production"!==process.env.NODE_ENV&&o&&e&&"object"==typeof e&&console.log(`reduxjs-toolkit-persist/stateReconciler: rehydrated keys '${Object.keys(e).join(", ")}'`),n}function d(e){const t=e.blacklist||null,o=e.whitelist||null,n=e.transforms||[],s=e.throttle||0,i=`${void 0!==e.keyPrefix?e.keyPrefix:r}${e.key}`,c=e.storage;let u;u=!1===e.serialize?e=>e:"function"==typeof e.serialize?e.serialize:p;const a=e.writeFailHandler||null;let d={};const f={},l=[];let y=null,h=null;function g(){if(0===l.length)return y&&clearInterval(y),void(y=null);const e=l.shift();if(void 0===e)return;const t=n.reduce(((t,r)=>r.in(t,e,d)),d[e]);if(void 0!==t)try{f[e]=u(t)}catch(e){console.error("reduxjs-toolkit-persist/createPersistoid: error serializing state",e)}else delete f[e];0===l.length&&(Object.keys(f).forEach((e=>{void 0===d[e]&&delete f[e]})),h=c.setItem(i,u(f)).catch(b))}function E(e){return(!o||-1!==o.indexOf(e)||"_persist"===e)&&(!t||-1===t.indexOf(e))}function b(e){a&&a(e),e&&"production"!==process.env.NODE_ENV&&console.error("Error storing data",e)}return{update:e=>{Object.keys(e).forEach((t=>{E(t)&&d[t]!==e[t]&&-1===l.indexOf(t)&&l.push(t)})),Object.keys(d).forEach((t=>{void 0===e[t]&&E(t)&&-1===l.indexOf(t)&&void 0!==d[t]&&l.push(t)})),null===y&&(y=setInterval(g,s)),d=e},flush:()=>{for(;0!==l.length;)g();return h||Promise.resolve()}}}function p(e){return JSON.stringify(e)}function f(e){const t=e.transforms||[],o=`${void 0!==e.keyPrefix?e.keyPrefix:r}${e.key}`,n=e.storage,s=e.debug;let i;return i=!1===e.deserialize?e=>e:"function"==typeof e.deserialize?e.deserialize:l,n.getItem(o).then((e=>{if(e)try{const r={},o=i(e);return Object.keys(o).forEach((e=>{r[e]=t.reduceRight(((t,r)=>r.out(t,e,o)),i(o[e]))})),r}catch(t){throw"production"!==process.env.NODE_ENV&&s&&console.log(`reduxjs-toolkit-persist/getStoredState: Error restoring data ${e}`,t),t}}))}function l(e){return JSON.parse(e)}function y(e){const t=e.storage,o=`${void 0!==e.keyPrefix?e.keyPrefix:r}${e.key}`;return t.removeItem(o,h)}function h(e){e&&"production"!==process.env.NODE_ENV&&console.error("reduxjs-toolkit-persist/purgeStoredState: Error purging data stored state",e)}function g(e,t){if("production"!==process.env.NODE_ENV){if(!e)throw new Error("config is required for persistReducer");if(!e.key)throw new Error("key is required in persistor config");if(!e.storage)throw new Error("reduxjs-toolkit-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'reduxjs-toolkit-persist/lib/storage'`")}const r=void 0!==e.version?e.version:-1,u=void 0===e.stateReconciler?a:e.stateReconciler,p=e.getStoredState||f,l=void 0!==e.timeout?e.timeout:5e3;let h=null,g=!1,E=!0;const b=e=>(e._persist.rehydrated&&h&&!E&&h.update(e),e);return(a,f)=>{const v=a||{},{_persist:O}=v,m=function(e,t){var r={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(r[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(r[o[n]]=e[o[n]])}return r}(v,["_persist"]);if(f.type===i){let o=!1;const n=(t,r)=>{"production"!==process.env.NODE_ENV&&o&&console.error(`reduxjs-toolkit-persist: rehydrate for "${e.key}" called after timeout.`,t,r),o||(f.rehydrate(e.key,t,r),o=!0)};if(l&&setTimeout((()=>{!o&&n(void 0,new Error(`reduxjs-toolkit-persist: persist timed out for persist key "${e.key}"`))}),l),E=!1,h||(h=d(e)),O)return Object.assign(Object.assign({},t(m,f)),{_persist:O});if("function"!=typeof f.rehydrate||"function"!=typeof f.register)throw new Error("reduxjs-toolkit-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");return f.register(e.key),p(e).then((t=>{if(t){(e.migrate||((e,t)=>Promise.resolve(e)))(t,r).then((e=>{n(e)}),(e=>{"production"!==process.env.NODE_ENV&&e&&console.error("redux-toolkit-persist: migration error",e),n(void 0,e)}))}}),(e=>{n(void 0,e)})),Object.assign(Object.assign({},t(m,f)),{_persist:{version:r,rehydrated:!1}})}if(f.type===c)return g=!0,f.result(y(e)),Object.assign(Object.assign({},t(m,f)),{_persist:O});if(f.type===o)return f.result(h&&h.flush()),Object.assign(Object.assign({},t(m,f)),{_persist:O});if(f.type===s)E=!0;else if(f.type===n){if(g)return Object.assign(Object.assign({},m),{_persist:Object.assign(Object.assign({},O),{rehydrated:!0})});if(f.key===e.key){const r=t(m,f),o=f.payload,n=!1!==u&&void 0!==o?u(o,a,r,e):r,s=Object.assign(Object.assign({},n),{_persist:Object.assign(Object.assign({},O),{rehydrated:!0})});return b(s)}}if(!O)return t(a,f);const N=t(m,f);return N===m?a:b(Object.assign(Object.assign({},N),{_persist:O}))}}function E(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var b="function"==typeof Symbol&&Symbol.observable||"@@observable",v=function(){return Math.random().toString(36).substring(7).split("").join(".")},O={INIT:"@@redux/INIT"+v(),REPLACE:"@@redux/REPLACE"+v(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+v()}};function m(e){if("object"!==t(e)||null===e)return!1;for(var r=e;null!==Object.getPrototypeOf(r);)r=Object.getPrototypeOf(r);return Object.getPrototypeOf(e)===r}function N(e){if(void 0===e)return"undefined";if(null===e)return"null";var r=t(e);switch(r){case"boolean":case"string":case"number":case"symbol":case"function":return r}if(Array.isArray(e))return"array";if(function(e){return e instanceof Date||"function"==typeof e.toDateString&&"function"==typeof e.getDate&&"function"==typeof e.setDate}(e))return"date";if(function(e){return e instanceof Error||"string"==typeof e.message&&e.constructor&&"number"==typeof e.constructor.stackTraceLimit}(e))return"error";var o=function(e){return"function"==typeof e.constructor?e.constructor.name:null}(e);switch(o){case"Symbol":case"Promise":case"WeakMap":case"WeakSet":case"Map":case"Set":return o}return r.slice(8,-1).toLowerCase().replace(/\s/g,"")}function j(e){var r=t(e);return"production"!==process.env.NODE_ENV&&(r=N(e)),r}function k(e,r,o){var n;if("function"==typeof r&&"function"==typeof o||"function"==typeof o&&"function"==typeof arguments[3])throw new Error("production"===process.env.NODE_ENV?E(0):"It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");if("function"==typeof r&&void 0===o&&(o=r,r=void 0),void 0!==o){if("function"!=typeof o)throw new Error("production"===process.env.NODE_ENV?E(1):"Expected the enhancer to be a function. Instead, received: '"+j(o)+"'");return o(k)(e,r)}if("function"!=typeof e)throw new Error("production"===process.env.NODE_ENV?E(2):"Expected the root reducer to be a function. Instead, received: '"+j(e)+"'");var s=e,i=r,c=[],u=c,a=!1;function d(){u===c&&(u=c.slice())}function p(){if(a)throw new Error("production"===process.env.NODE_ENV?E(3):"You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("production"===process.env.NODE_ENV?E(4):"Expected the listener to be a function. Instead, received: '"+j(e)+"'");if(a)throw new Error("production"===process.env.NODE_ENV?E(5):"You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");var t=!0;return d(),u.push(e),function(){if(t){if(a)throw new Error("production"===process.env.NODE_ENV?E(6):"You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");t=!1,d();var r=u.indexOf(e);u.splice(r,1),c=null}}}function l(e){if(!m(e))throw new Error("production"===process.env.NODE_ENV?E(7):"Actions must be plain objects. Instead, the actual type was: '"+j(e)+"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");if(void 0===e.type)throw new Error("production"===process.env.NODE_ENV?E(8):'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');if(a)throw new Error("production"===process.env.NODE_ENV?E(9):"Reducers may not dispatch actions.");try{a=!0,i=s(i,e)}finally{a=!1}for(var t=c=u,r=0;r<t.length;r++){(0,t[r])()}return e}function y(e){if("function"!=typeof e)throw new Error("production"===process.env.NODE_ENV?E(10):"Expected the nextReducer to be a function. Instead, received: '"+j(e));s=e,l({type:O.REPLACE})}function h(){var e,r=f;return(e={subscribe:function(e){if("object"!==t(e)||null===e)throw new Error("production"===process.env.NODE_ENV?E(11):"Expected the observer to be an object. Instead, received: '"+j(e)+"'");function o(){e.next&&e.next(p())}return o(),{unsubscribe:r(o)}}})[b]=function(){return this},e}return l({type:O.INIT}),(n={dispatch:l,subscribe:f,getState:p,replaceReducer:y})[b]=h,n}function w(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e);try{throw new Error(e)}catch(e){}}function x(e){for(var t=Object.keys(e),r={},o=0;o<t.length;o++){var n=t[o];"production"!==process.env.NODE_ENV&&void 0===e[n]&&w('No reducer provided for key "'+n+'"'),"function"==typeof e[n]&&(r[n]=e[n])}var s,i,c=Object.keys(r);"production"!==process.env.NODE_ENV&&(s={});try{!function(e){Object.keys(e).forEach((function(t){var r=e[t];if(void 0===r(void 0,{type:O.INIT}))throw new Error("production"===process.env.NODE_ENV?E(12):'The slice reducer for key "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:O.PROBE_UNKNOWN_ACTION()}))throw new Error("production"===process.env.NODE_ENV?E(13):'The slice reducer for key "'+t+"\" returned undefined when probed with a random type. Don't try to handle '"+O.INIT+'\' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;if("production"!==process.env.NODE_ENV){var o=function(e,t,r,o){var n=Object.keys(t),s=r&&r.type===O.INIT?"preloadedState argument passed to createStore":"previous state received by the reducer";if(0===n.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";if(!m(e))return"The "+s+' has unexpected type of "'+j(e)+'". Expected argument to be an object with the following keys: "'+n.join('", "')+'"';var i=Object.keys(e).filter((function(e){return!t.hasOwnProperty(e)&&!o[e]}));return i.forEach((function(e){o[e]=!0})),r&&r.type===O.REPLACE?void 0:i.length>0?"Unexpected "+(i.length>1?"keys":"key")+' "'+i.join('", "')+'" found in '+s+'. Expected to find one of the known reducer keys instead: "'+n.join('", "')+'". Unexpected keys will be ignored.':void 0}(e,r,t,s);o&&w(o)}for(var n=!1,u={},a=0;a<c.length;a++){var d=c[a],p=r[d],f=e[d],l=p(f,t);if(void 0===l){var y=t&&t.type;throw new Error("production"===process.env.NODE_ENV?E(14):"When called with an action of type "+(y?'"'+String(y)+'"':"(unknown type)")+', the slice reducer for key "'+d+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.')}u[d]=l,n=n||l!==f}return(n=n||c.length!==Object.keys(e).length)?u:e}}function _(){}function S(e,t,r,{debug:o}){const n=Object.assign({},r);if(e&&"object"==typeof e){Object.keys(e).forEach((s=>{var i;"_persist"!==s&&(t[s]===r[s]?null===(i=r[s])||Array.isArray(i)||"object"!=typeof i?n[s]=e[s]:n[s]=Object.assign(Object.assign({},n[s]),e[s]):"production"!==process.env.NODE_ENV&&o&&console.log("reduxjs-toolkit-persist/stateReconciler: sub state for key `%s` modified, skipping.",s))}))}return"production"!==process.env.NODE_ENV&&o&&e&&"object"==typeof e&&console.log(`reduxjs-toolkit-persist/stateReconciler: rehydrated keys '${Object.keys(e).join(", ")}'`),n}"production"!==process.env.NODE_ENV&&"string"==typeof _.name&&"isCrushed"!==_.name&&w('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');const D={registry:[],bootstrapped:!1},P=(e=D,t)=>{const r=e.registry.indexOf(t.key),o=[...e.registry];switch(t.type){case u:return Object.assign(Object.assign({},e),{registry:[...e.registry,t.key]});case n:return o.splice(r,1),Object.assign(Object.assign({},e),{registry:o,bootstrapped:0===o.length});default:return e}};e.DEFAULT_VERSION=-1,e.FLUSH=o,e.KEY_PREFIX=r,e.PAUSE=s,e.PERSIST=i,e.PURGE=c,e.REGISTER=u,e.REHYDRATE=n,e.createMigrate=function(e,t){const{debug:r}=t||{};return function(t,o){if(!t)return"production"!==process.env.NODE_ENV&&r&&console.log("reduxjs-toolkit-persist: no inbound state, skipping migration"),Promise.resolve(void 0);const n=t._persist&&void 0!==t._persist.version?t._persist.version:-1;if(n===o)return"production"!==process.env.NODE_ENV&&r&&console.log("reduxjs-toolkit-persist: versions match, noop migration"),Promise.resolve(t);if(n>o)return"production"!==process.env.NODE_ENV&&console.error("reduxjs-toolkit-persist: downgrading version is not supported"),Promise.resolve(t);const s=Object.keys(e).map((e=>parseInt(e))).filter((e=>o>=e&&e>n)).sort(((e,t)=>e-t));"production"!==process.env.NODE_ENV&&r&&console.log("reduxjs-toolkit-persist: migrationKeys",s);try{const o=s.reduce(((t,o)=>("production"!==process.env.NODE_ENV&&r&&console.log("reduxjs-toolkit-persist: running migration for versionKey",o),e[o](t))),t);return Promise.resolve(o)}catch(e){return Promise.reject(e)}}},e.createPersistoid=d,e.createTransform=function(e,t,r={}){const o=r.whitelist||null,n=r.blacklist||null;function s(e){return!(!o||-1!==o.indexOf(e))||!(!n||-1===n.indexOf(e))}return{in:(t,r,o)=>!s(r)&&e?e(t,r,o):t,out:(e,r,o)=>!s(r)&&t?t(e,r,o):e}},e.getStoredState=f,e.persistCombineReducers=function(e,t){return e.stateReconciler=void 0===e.stateReconciler?S:e.stateReconciler,g(e,x(t))},e.persistReducer=g,e.persistStore=function(e,t,r){if("production"!==process.env.NODE_ENV){const e=t||{};["blacklist","whitelist","transforms","storage","keyPrefix","migrate"].forEach((t=>{e[t]&&console.error(`reduxjs-toolkit-persist: invalid option passed to persistStore: "${t}". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer.`)}))}let a=r||!1;const d=k(P,D,t&&t.enhancer?t.enhancer:void 0),p=e=>{d.dispatch({type:u,key:e})},f=(t,r,o)=>{const s={type:n,payload:r,err:o,key:t};e.dispatch(s),d.dispatch(s),"function"==typeof a&&l.getState().bootstrapped&&(a(),a=!1)},l=Object.assign(Object.assign({},d),{purge:()=>{const t=[];return e.dispatch({type:c,result:e=>{t.push(e)}}),Promise.all(t)},flush:()=>{const t=[];return e.dispatch({type:o,result:e=>{t.push(e)}}),Promise.all(t)},pause:()=>{e.dispatch({type:s})},persist:()=>{e.dispatch({type:i,register:p,rehydrate:f})}});return t&&t.manualPersist||l.persist(),l},e.purgeStoredState=y,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=redux-persist.min.js.map
