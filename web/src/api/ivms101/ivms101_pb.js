// source: ivms101/ivms101.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ivms101_enum_pb = require('../ivms101/enum_pb.js');
goog.object.extend(proto, ivms101_enum_pb);
goog.exportSymbol('proto.ivms101.Address', null, global);
goog.exportSymbol('proto.ivms101.DateAndPlaceOfBirth', null, global);
goog.exportSymbol('proto.ivms101.LegalPerson', null, global);
goog.exportSymbol('proto.ivms101.LegalPersonName', null, global);
goog.exportSymbol('proto.ivms101.LegalPersonNameId', null, global);
goog.exportSymbol('proto.ivms101.LocalLegalPersonNameId', null, global);
goog.exportSymbol('proto.ivms101.LocalNaturalPersonNameId', null, global);
goog.exportSymbol('proto.ivms101.NationalIdentification', null, global);
goog.exportSymbol('proto.ivms101.NaturalPerson', null, global);
goog.exportSymbol('proto.ivms101.NaturalPersonName', null, global);
goog.exportSymbol('proto.ivms101.NaturalPersonNameId', null, global);
goog.exportSymbol('proto.ivms101.Person', null, global);
goog.exportSymbol('proto.ivms101.Person.PersonCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.Person = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ivms101.Person.oneofGroups_);
};
goog.inherits(proto.ivms101.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.Person.displayName = 'proto.ivms101.Person';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.NaturalPerson = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ivms101.NaturalPerson.repeatedFields_, null);
};
goog.inherits(proto.ivms101.NaturalPerson, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.NaturalPerson.displayName = 'proto.ivms101.NaturalPerson';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.NaturalPersonName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ivms101.NaturalPersonName.repeatedFields_, null);
};
goog.inherits(proto.ivms101.NaturalPersonName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.NaturalPersonName.displayName = 'proto.ivms101.NaturalPersonName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.NaturalPersonNameId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ivms101.NaturalPersonNameId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.NaturalPersonNameId.displayName = 'proto.ivms101.NaturalPersonNameId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.LocalNaturalPersonNameId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ivms101.LocalNaturalPersonNameId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.LocalNaturalPersonNameId.displayName = 'proto.ivms101.LocalNaturalPersonNameId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ivms101.Address.repeatedFields_, null);
};
goog.inherits(proto.ivms101.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.Address.displayName = 'proto.ivms101.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.DateAndPlaceOfBirth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ivms101.DateAndPlaceOfBirth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.DateAndPlaceOfBirth.displayName = 'proto.ivms101.DateAndPlaceOfBirth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.NationalIdentification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ivms101.NationalIdentification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.NationalIdentification.displayName = 'proto.ivms101.NationalIdentification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.LegalPerson = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ivms101.LegalPerson.repeatedFields_, null);
};
goog.inherits(proto.ivms101.LegalPerson, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.LegalPerson.displayName = 'proto.ivms101.LegalPerson';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.LegalPersonName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ivms101.LegalPersonName.repeatedFields_, null);
};
goog.inherits(proto.ivms101.LegalPersonName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.LegalPersonName.displayName = 'proto.ivms101.LegalPersonName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.LegalPersonNameId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ivms101.LegalPersonNameId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.LegalPersonNameId.displayName = 'proto.ivms101.LegalPersonNameId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ivms101.LocalLegalPersonNameId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ivms101.LocalLegalPersonNameId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ivms101.LocalLegalPersonNameId.displayName = 'proto.ivms101.LocalLegalPersonNameId';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ivms101.Person.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ivms101.Person.PersonCase = {
  PERSON_NOT_SET: 0,
  NATURAL_PERSON: 1,
  LEGAL_PERSON: 2
};

/**
 * @return {proto.ivms101.Person.PersonCase}
 */
proto.ivms101.Person.prototype.getPersonCase = function() {
  return /** @type {proto.ivms101.Person.PersonCase} */(jspb.Message.computeOneofCase(this, proto.ivms101.Person.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.Person.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.Person.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.Person} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.Person.toObject = function(includeInstance, msg) {
  var f, obj = {
    naturalPerson: (f = msg.getNaturalPerson()) && proto.ivms101.NaturalPerson.toObject(includeInstance, f),
    legalPerson: (f = msg.getLegalPerson()) && proto.ivms101.LegalPerson.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.Person}
 */
proto.ivms101.Person.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.Person;
  return proto.ivms101.Person.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.Person}
 */
proto.ivms101.Person.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ivms101.NaturalPerson;
      reader.readMessage(value,proto.ivms101.NaturalPerson.deserializeBinaryFromReader);
      msg.setNaturalPerson(value);
      break;
    case 2:
      var value = new proto.ivms101.LegalPerson;
      reader.readMessage(value,proto.ivms101.LegalPerson.deserializeBinaryFromReader);
      msg.setLegalPerson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.Person.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.Person.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.Person} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.Person.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNaturalPerson();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ivms101.NaturalPerson.serializeBinaryToWriter
    );
  }
  f = message.getLegalPerson();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ivms101.LegalPerson.serializeBinaryToWriter
    );
  }
};


/**
 * optional NaturalPerson natural_person = 1;
 * @return {?proto.ivms101.NaturalPerson}
 */
proto.ivms101.Person.prototype.getNaturalPerson = function() {
  return /** @type{?proto.ivms101.NaturalPerson} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.NaturalPerson, 1));
};


/**
 * @param {?proto.ivms101.NaturalPerson|undefined} value
 * @return {!proto.ivms101.Person} returns this
*/
proto.ivms101.Person.prototype.setNaturalPerson = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ivms101.Person.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.Person} returns this
 */
proto.ivms101.Person.prototype.clearNaturalPerson = function() {
  return this.setNaturalPerson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.Person.prototype.hasNaturalPerson = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LegalPerson legal_person = 2;
 * @return {?proto.ivms101.LegalPerson}
 */
proto.ivms101.Person.prototype.getLegalPerson = function() {
  return /** @type{?proto.ivms101.LegalPerson} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.LegalPerson, 2));
};


/**
 * @param {?proto.ivms101.LegalPerson|undefined} value
 * @return {!proto.ivms101.Person} returns this
*/
proto.ivms101.Person.prototype.setLegalPerson = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ivms101.Person.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.Person} returns this
 */
proto.ivms101.Person.prototype.clearLegalPerson = function() {
  return this.setLegalPerson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.Person.prototype.hasLegalPerson = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ivms101.NaturalPerson.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.NaturalPerson.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.NaturalPerson.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.NaturalPerson} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NaturalPerson.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.ivms101.NaturalPersonName.toObject(includeInstance, f),
    geographicAddressesList: jspb.Message.toObjectList(msg.getGeographicAddressesList(),
    proto.ivms101.Address.toObject, includeInstance),
    nationalIdentification: (f = msg.getNationalIdentification()) && proto.ivms101.NationalIdentification.toObject(includeInstance, f),
    customerIdentification: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dateAndPlaceOfBirth: (f = msg.getDateAndPlaceOfBirth()) && proto.ivms101.DateAndPlaceOfBirth.toObject(includeInstance, f),
    countryOfResidence: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.NaturalPerson}
 */
proto.ivms101.NaturalPerson.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.NaturalPerson;
  return proto.ivms101.NaturalPerson.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.NaturalPerson} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.NaturalPerson}
 */
proto.ivms101.NaturalPerson.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ivms101.NaturalPersonName;
      reader.readMessage(value,proto.ivms101.NaturalPersonName.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.ivms101.Address;
      reader.readMessage(value,proto.ivms101.Address.deserializeBinaryFromReader);
      msg.addGeographicAddresses(value);
      break;
    case 3:
      var value = new proto.ivms101.NationalIdentification;
      reader.readMessage(value,proto.ivms101.NationalIdentification.deserializeBinaryFromReader);
      msg.setNationalIdentification(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerIdentification(value);
      break;
    case 5:
      var value = new proto.ivms101.DateAndPlaceOfBirth;
      reader.readMessage(value,proto.ivms101.DateAndPlaceOfBirth.deserializeBinaryFromReader);
      msg.setDateAndPlaceOfBirth(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryOfResidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.NaturalPerson.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.NaturalPerson.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.NaturalPerson} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NaturalPerson.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ivms101.NaturalPersonName.serializeBinaryToWriter
    );
  }
  f = message.getGeographicAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ivms101.Address.serializeBinaryToWriter
    );
  }
  f = message.getNationalIdentification();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ivms101.NationalIdentification.serializeBinaryToWriter
    );
  }
  f = message.getCustomerIdentification();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDateAndPlaceOfBirth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ivms101.DateAndPlaceOfBirth.serializeBinaryToWriter
    );
  }
  f = message.getCountryOfResidence();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional NaturalPersonName name = 1;
 * @return {?proto.ivms101.NaturalPersonName}
 */
proto.ivms101.NaturalPerson.prototype.getName = function() {
  return /** @type{?proto.ivms101.NaturalPersonName} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.NaturalPersonName, 1));
};


/**
 * @param {?proto.ivms101.NaturalPersonName|undefined} value
 * @return {!proto.ivms101.NaturalPerson} returns this
*/
proto.ivms101.NaturalPerson.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.NaturalPerson} returns this
 */
proto.ivms101.NaturalPerson.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.NaturalPerson.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Address geographic_addresses = 2;
 * @return {!Array<!proto.ivms101.Address>}
 */
proto.ivms101.NaturalPerson.prototype.getGeographicAddressesList = function() {
  return /** @type{!Array<!proto.ivms101.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.Address, 2));
};


/**
 * @param {!Array<!proto.ivms101.Address>} value
 * @return {!proto.ivms101.NaturalPerson} returns this
*/
proto.ivms101.NaturalPerson.prototype.setGeographicAddressesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ivms101.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.Address}
 */
proto.ivms101.NaturalPerson.prototype.addGeographicAddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ivms101.Address, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.NaturalPerson} returns this
 */
proto.ivms101.NaturalPerson.prototype.clearGeographicAddressesList = function() {
  return this.setGeographicAddressesList([]);
};


/**
 * optional NationalIdentification national_identification = 3;
 * @return {?proto.ivms101.NationalIdentification}
 */
proto.ivms101.NaturalPerson.prototype.getNationalIdentification = function() {
  return /** @type{?proto.ivms101.NationalIdentification} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.NationalIdentification, 3));
};


/**
 * @param {?proto.ivms101.NationalIdentification|undefined} value
 * @return {!proto.ivms101.NaturalPerson} returns this
*/
proto.ivms101.NaturalPerson.prototype.setNationalIdentification = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.NaturalPerson} returns this
 */
proto.ivms101.NaturalPerson.prototype.clearNationalIdentification = function() {
  return this.setNationalIdentification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.NaturalPerson.prototype.hasNationalIdentification = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string customer_identification = 4;
 * @return {string}
 */
proto.ivms101.NaturalPerson.prototype.getCustomerIdentification = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NaturalPerson} returns this
 */
proto.ivms101.NaturalPerson.prototype.setCustomerIdentification = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional DateAndPlaceOfBirth date_and_place_of_birth = 5;
 * @return {?proto.ivms101.DateAndPlaceOfBirth}
 */
proto.ivms101.NaturalPerson.prototype.getDateAndPlaceOfBirth = function() {
  return /** @type{?proto.ivms101.DateAndPlaceOfBirth} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.DateAndPlaceOfBirth, 5));
};


/**
 * @param {?proto.ivms101.DateAndPlaceOfBirth|undefined} value
 * @return {!proto.ivms101.NaturalPerson} returns this
*/
proto.ivms101.NaturalPerson.prototype.setDateAndPlaceOfBirth = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.NaturalPerson} returns this
 */
proto.ivms101.NaturalPerson.prototype.clearDateAndPlaceOfBirth = function() {
  return this.setDateAndPlaceOfBirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.NaturalPerson.prototype.hasDateAndPlaceOfBirth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string country_of_residence = 6;
 * @return {string}
 */
proto.ivms101.NaturalPerson.prototype.getCountryOfResidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NaturalPerson} returns this
 */
proto.ivms101.NaturalPerson.prototype.setCountryOfResidence = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ivms101.NaturalPersonName.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.NaturalPersonName.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.NaturalPersonName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.NaturalPersonName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NaturalPersonName.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameIdentifiersList: jspb.Message.toObjectList(msg.getNameIdentifiersList(),
    proto.ivms101.NaturalPersonNameId.toObject, includeInstance),
    localNameIdentifiersList: jspb.Message.toObjectList(msg.getLocalNameIdentifiersList(),
    proto.ivms101.LocalNaturalPersonNameId.toObject, includeInstance),
    phoneticNameIdentifiersList: jspb.Message.toObjectList(msg.getPhoneticNameIdentifiersList(),
    proto.ivms101.LocalNaturalPersonNameId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.NaturalPersonName}
 */
proto.ivms101.NaturalPersonName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.NaturalPersonName;
  return proto.ivms101.NaturalPersonName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.NaturalPersonName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.NaturalPersonName}
 */
proto.ivms101.NaturalPersonName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ivms101.NaturalPersonNameId;
      reader.readMessage(value,proto.ivms101.NaturalPersonNameId.deserializeBinaryFromReader);
      msg.addNameIdentifiers(value);
      break;
    case 2:
      var value = new proto.ivms101.LocalNaturalPersonNameId;
      reader.readMessage(value,proto.ivms101.LocalNaturalPersonNameId.deserializeBinaryFromReader);
      msg.addLocalNameIdentifiers(value);
      break;
    case 3:
      var value = new proto.ivms101.LocalNaturalPersonNameId;
      reader.readMessage(value,proto.ivms101.LocalNaturalPersonNameId.deserializeBinaryFromReader);
      msg.addPhoneticNameIdentifiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.NaturalPersonName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.NaturalPersonName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.NaturalPersonName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NaturalPersonName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ivms101.NaturalPersonNameId.serializeBinaryToWriter
    );
  }
  f = message.getLocalNameIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ivms101.LocalNaturalPersonNameId.serializeBinaryToWriter
    );
  }
  f = message.getPhoneticNameIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ivms101.LocalNaturalPersonNameId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NaturalPersonNameId name_identifiers = 1;
 * @return {!Array<!proto.ivms101.NaturalPersonNameId>}
 */
proto.ivms101.NaturalPersonName.prototype.getNameIdentifiersList = function() {
  return /** @type{!Array<!proto.ivms101.NaturalPersonNameId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.NaturalPersonNameId, 1));
};


/**
 * @param {!Array<!proto.ivms101.NaturalPersonNameId>} value
 * @return {!proto.ivms101.NaturalPersonName} returns this
*/
proto.ivms101.NaturalPersonName.prototype.setNameIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ivms101.NaturalPersonNameId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.NaturalPersonNameId}
 */
proto.ivms101.NaturalPersonName.prototype.addNameIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ivms101.NaturalPersonNameId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.NaturalPersonName} returns this
 */
proto.ivms101.NaturalPersonName.prototype.clearNameIdentifiersList = function() {
  return this.setNameIdentifiersList([]);
};


/**
 * repeated LocalNaturalPersonNameId local_name_identifiers = 2;
 * @return {!Array<!proto.ivms101.LocalNaturalPersonNameId>}
 */
proto.ivms101.NaturalPersonName.prototype.getLocalNameIdentifiersList = function() {
  return /** @type{!Array<!proto.ivms101.LocalNaturalPersonNameId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.LocalNaturalPersonNameId, 2));
};


/**
 * @param {!Array<!proto.ivms101.LocalNaturalPersonNameId>} value
 * @return {!proto.ivms101.NaturalPersonName} returns this
*/
proto.ivms101.NaturalPersonName.prototype.setLocalNameIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ivms101.LocalNaturalPersonNameId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.LocalNaturalPersonNameId}
 */
proto.ivms101.NaturalPersonName.prototype.addLocalNameIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ivms101.LocalNaturalPersonNameId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.NaturalPersonName} returns this
 */
proto.ivms101.NaturalPersonName.prototype.clearLocalNameIdentifiersList = function() {
  return this.setLocalNameIdentifiersList([]);
};


/**
 * repeated LocalNaturalPersonNameId phonetic_name_identifiers = 3;
 * @return {!Array<!proto.ivms101.LocalNaturalPersonNameId>}
 */
proto.ivms101.NaturalPersonName.prototype.getPhoneticNameIdentifiersList = function() {
  return /** @type{!Array<!proto.ivms101.LocalNaturalPersonNameId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.LocalNaturalPersonNameId, 3));
};


/**
 * @param {!Array<!proto.ivms101.LocalNaturalPersonNameId>} value
 * @return {!proto.ivms101.NaturalPersonName} returns this
*/
proto.ivms101.NaturalPersonName.prototype.setPhoneticNameIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ivms101.LocalNaturalPersonNameId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.LocalNaturalPersonNameId}
 */
proto.ivms101.NaturalPersonName.prototype.addPhoneticNameIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ivms101.LocalNaturalPersonNameId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.NaturalPersonName} returns this
 */
proto.ivms101.NaturalPersonName.prototype.clearPhoneticNameIdentifiersList = function() {
  return this.setPhoneticNameIdentifiersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.NaturalPersonNameId.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.NaturalPersonNameId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.NaturalPersonNameId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NaturalPersonNameId.toObject = function(includeInstance, msg) {
  var f, obj = {
    primaryIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondaryIdentifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nameIdentifierType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.NaturalPersonNameId}
 */
proto.ivms101.NaturalPersonNameId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.NaturalPersonNameId;
  return proto.ivms101.NaturalPersonNameId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.NaturalPersonNameId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.NaturalPersonNameId}
 */
proto.ivms101.NaturalPersonNameId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimaryIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondaryIdentifier(value);
      break;
    case 3:
      var value = /** @type {!proto.ivms101.NaturalPersonNameTypeCode} */ (reader.readEnum());
      msg.setNameIdentifierType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.NaturalPersonNameId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.NaturalPersonNameId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.NaturalPersonNameId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NaturalPersonNameId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimaryIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondaryIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNameIdentifierType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string primary_identifier = 1;
 * @return {string}
 */
proto.ivms101.NaturalPersonNameId.prototype.getPrimaryIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NaturalPersonNameId} returns this
 */
proto.ivms101.NaturalPersonNameId.prototype.setPrimaryIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secondary_identifier = 2;
 * @return {string}
 */
proto.ivms101.NaturalPersonNameId.prototype.getSecondaryIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NaturalPersonNameId} returns this
 */
proto.ivms101.NaturalPersonNameId.prototype.setSecondaryIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NaturalPersonNameTypeCode name_identifier_type = 3;
 * @return {!proto.ivms101.NaturalPersonNameTypeCode}
 */
proto.ivms101.NaturalPersonNameId.prototype.getNameIdentifierType = function() {
  return /** @type {!proto.ivms101.NaturalPersonNameTypeCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ivms101.NaturalPersonNameTypeCode} value
 * @return {!proto.ivms101.NaturalPersonNameId} returns this
 */
proto.ivms101.NaturalPersonNameId.prototype.setNameIdentifierType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.LocalNaturalPersonNameId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.LocalNaturalPersonNameId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LocalNaturalPersonNameId.toObject = function(includeInstance, msg) {
  var f, obj = {
    primaryIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondaryIdentifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nameIdentifierType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.LocalNaturalPersonNameId}
 */
proto.ivms101.LocalNaturalPersonNameId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.LocalNaturalPersonNameId;
  return proto.ivms101.LocalNaturalPersonNameId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.LocalNaturalPersonNameId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.LocalNaturalPersonNameId}
 */
proto.ivms101.LocalNaturalPersonNameId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimaryIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondaryIdentifier(value);
      break;
    case 3:
      var value = /** @type {!proto.ivms101.NaturalPersonNameTypeCode} */ (reader.readEnum());
      msg.setNameIdentifierType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.LocalNaturalPersonNameId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.LocalNaturalPersonNameId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LocalNaturalPersonNameId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimaryIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondaryIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNameIdentifierType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string primary_identifier = 1;
 * @return {string}
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.getPrimaryIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.LocalNaturalPersonNameId} returns this
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.setPrimaryIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secondary_identifier = 2;
 * @return {string}
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.getSecondaryIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.LocalNaturalPersonNameId} returns this
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.setSecondaryIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NaturalPersonNameTypeCode name_identifier_type = 3;
 * @return {!proto.ivms101.NaturalPersonNameTypeCode}
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.getNameIdentifierType = function() {
  return /** @type {!proto.ivms101.NaturalPersonNameTypeCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ivms101.NaturalPersonNameTypeCode} value
 * @return {!proto.ivms101.LocalNaturalPersonNameId} returns this
 */
proto.ivms101.LocalNaturalPersonNameId.prototype.setNameIdentifierType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ivms101.Address.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    department: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subDepartment: jspb.Message.getFieldWithDefault(msg, 3, ""),
    streetName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    buildingNumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    buildingName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    floor: jspb.Message.getFieldWithDefault(msg, 7, ""),
    postBox: jspb.Message.getFieldWithDefault(msg, 8, ""),
    room: jspb.Message.getFieldWithDefault(msg, 9, ""),
    postCode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    townName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    townLocationName: jspb.Message.getFieldWithDefault(msg, 12, ""),
    districtName: jspb.Message.getFieldWithDefault(msg, 13, ""),
    countrySubDivision: jspb.Message.getFieldWithDefault(msg, 14, ""),
    addressLineList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    country: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.Address}
 */
proto.ivms101.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.Address;
  return proto.ivms101.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.Address}
 */
proto.ivms101.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ivms101.AddressTypeCode} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartment(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubDepartment(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildingNumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildingName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFloor(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostBox(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoom(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostCode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTownName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTownLocationName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrictName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrySubDivision(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddressLine(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDepartment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubDepartment();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStreetName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBuildingNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBuildingName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFloor();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPostBox();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRoom();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPostCode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTownName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTownLocationName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDistrictName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCountrySubDivision();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getAddressLineList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional AddressTypeCode address_type = 1;
 * @return {!proto.ivms101.AddressTypeCode}
 */
proto.ivms101.Address.prototype.getAddressType = function() {
  return /** @type {!proto.ivms101.AddressTypeCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ivms101.AddressTypeCode} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setAddressType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string department = 2;
 * @return {string}
 */
proto.ivms101.Address.prototype.getDepartment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setDepartment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sub_department = 3;
 * @return {string}
 */
proto.ivms101.Address.prototype.getSubDepartment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setSubDepartment = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string street_name = 4;
 * @return {string}
 */
proto.ivms101.Address.prototype.getStreetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setStreetName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string building_number = 5;
 * @return {string}
 */
proto.ivms101.Address.prototype.getBuildingNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setBuildingNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string building_name = 6;
 * @return {string}
 */
proto.ivms101.Address.prototype.getBuildingName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setBuildingName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string floor = 7;
 * @return {string}
 */
proto.ivms101.Address.prototype.getFloor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setFloor = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string post_box = 8;
 * @return {string}
 */
proto.ivms101.Address.prototype.getPostBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setPostBox = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string room = 9;
 * @return {string}
 */
proto.ivms101.Address.prototype.getRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setRoom = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string post_code = 10;
 * @return {string}
 */
proto.ivms101.Address.prototype.getPostCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setPostCode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string town_name = 11;
 * @return {string}
 */
proto.ivms101.Address.prototype.getTownName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setTownName = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string town_location_name = 12;
 * @return {string}
 */
proto.ivms101.Address.prototype.getTownLocationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setTownLocationName = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string district_name = 13;
 * @return {string}
 */
proto.ivms101.Address.prototype.getDistrictName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setDistrictName = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string country_sub_division = 14;
 * @return {string}
 */
proto.ivms101.Address.prototype.getCountrySubDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setCountrySubDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * repeated string address_line = 15;
 * @return {!Array<string>}
 */
proto.ivms101.Address.prototype.getAddressLineList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setAddressLineList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.addAddressLine = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.clearAddressLineList = function() {
  return this.setAddressLineList([]);
};


/**
 * optional string country = 16;
 * @return {string}
 */
proto.ivms101.Address.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.Address} returns this
 */
proto.ivms101.Address.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.DateAndPlaceOfBirth.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.DateAndPlaceOfBirth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.DateAndPlaceOfBirth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.DateAndPlaceOfBirth.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateOfBirth: jspb.Message.getFieldWithDefault(msg, 1, ""),
    placeOfBirth: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.DateAndPlaceOfBirth}
 */
proto.ivms101.DateAndPlaceOfBirth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.DateAndPlaceOfBirth;
  return proto.ivms101.DateAndPlaceOfBirth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.DateAndPlaceOfBirth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.DateAndPlaceOfBirth}
 */
proto.ivms101.DateAndPlaceOfBirth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateOfBirth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceOfBirth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.DateAndPlaceOfBirth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.DateAndPlaceOfBirth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.DateAndPlaceOfBirth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.DateAndPlaceOfBirth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateOfBirth();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaceOfBirth();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string date_of_birth = 1;
 * @return {string}
 */
proto.ivms101.DateAndPlaceOfBirth.prototype.getDateOfBirth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.DateAndPlaceOfBirth} returns this
 */
proto.ivms101.DateAndPlaceOfBirth.prototype.setDateOfBirth = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string place_of_birth = 2;
 * @return {string}
 */
proto.ivms101.DateAndPlaceOfBirth.prototype.getPlaceOfBirth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.DateAndPlaceOfBirth} returns this
 */
proto.ivms101.DateAndPlaceOfBirth.prototype.setPlaceOfBirth = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.NationalIdentification.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.NationalIdentification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.NationalIdentification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NationalIdentification.toObject = function(includeInstance, msg) {
  var f, obj = {
    nationalIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nationalIdentifierType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    countryOfIssue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationAuthority: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.NationalIdentification}
 */
proto.ivms101.NationalIdentification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.NationalIdentification;
  return proto.ivms101.NationalIdentification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.NationalIdentification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.NationalIdentification}
 */
proto.ivms101.NationalIdentification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNationalIdentifier(value);
      break;
    case 2:
      var value = /** @type {!proto.ivms101.NationalIdentifierTypeCode} */ (reader.readEnum());
      msg.setNationalIdentifierType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryOfIssue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistrationAuthority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.NationalIdentification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.NationalIdentification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.NationalIdentification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.NationalIdentification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNationalIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNationalIdentifierType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCountryOfIssue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationAuthority();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string national_identifier = 1;
 * @return {string}
 */
proto.ivms101.NationalIdentification.prototype.getNationalIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NationalIdentification} returns this
 */
proto.ivms101.NationalIdentification.prototype.setNationalIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NationalIdentifierTypeCode national_identifier_type = 2;
 * @return {!proto.ivms101.NationalIdentifierTypeCode}
 */
proto.ivms101.NationalIdentification.prototype.getNationalIdentifierType = function() {
  return /** @type {!proto.ivms101.NationalIdentifierTypeCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ivms101.NationalIdentifierTypeCode} value
 * @return {!proto.ivms101.NationalIdentification} returns this
 */
proto.ivms101.NationalIdentification.prototype.setNationalIdentifierType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string country_of_issue = 3;
 * @return {string}
 */
proto.ivms101.NationalIdentification.prototype.getCountryOfIssue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NationalIdentification} returns this
 */
proto.ivms101.NationalIdentification.prototype.setCountryOfIssue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string registration_authority = 4;
 * @return {string}
 */
proto.ivms101.NationalIdentification.prototype.getRegistrationAuthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.NationalIdentification} returns this
 */
proto.ivms101.NationalIdentification.prototype.setRegistrationAuthority = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ivms101.LegalPerson.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.LegalPerson.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.LegalPerson.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.LegalPerson} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LegalPerson.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.ivms101.LegalPersonName.toObject(includeInstance, f),
    geographicAddressesList: jspb.Message.toObjectList(msg.getGeographicAddressesList(),
    proto.ivms101.Address.toObject, includeInstance),
    customerNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nationalIdentification: (f = msg.getNationalIdentification()) && proto.ivms101.NationalIdentification.toObject(includeInstance, f),
    countryOfRegistration: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.LegalPerson}
 */
proto.ivms101.LegalPerson.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.LegalPerson;
  return proto.ivms101.LegalPerson.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.LegalPerson} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.LegalPerson}
 */
proto.ivms101.LegalPerson.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ivms101.LegalPersonName;
      reader.readMessage(value,proto.ivms101.LegalPersonName.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.ivms101.Address;
      reader.readMessage(value,proto.ivms101.Address.deserializeBinaryFromReader);
      msg.addGeographicAddresses(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerNumber(value);
      break;
    case 4:
      var value = new proto.ivms101.NationalIdentification;
      reader.readMessage(value,proto.ivms101.NationalIdentification.deserializeBinaryFromReader);
      msg.setNationalIdentification(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryOfRegistration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.LegalPerson.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.LegalPerson.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.LegalPerson} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LegalPerson.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ivms101.LegalPersonName.serializeBinaryToWriter
    );
  }
  f = message.getGeographicAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ivms101.Address.serializeBinaryToWriter
    );
  }
  f = message.getCustomerNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNationalIdentification();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ivms101.NationalIdentification.serializeBinaryToWriter
    );
  }
  f = message.getCountryOfRegistration();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional LegalPersonName name = 1;
 * @return {?proto.ivms101.LegalPersonName}
 */
proto.ivms101.LegalPerson.prototype.getName = function() {
  return /** @type{?proto.ivms101.LegalPersonName} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.LegalPersonName, 1));
};


/**
 * @param {?proto.ivms101.LegalPersonName|undefined} value
 * @return {!proto.ivms101.LegalPerson} returns this
*/
proto.ivms101.LegalPerson.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.LegalPerson} returns this
 */
proto.ivms101.LegalPerson.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.LegalPerson.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Address geographic_addresses = 2;
 * @return {!Array<!proto.ivms101.Address>}
 */
proto.ivms101.LegalPerson.prototype.getGeographicAddressesList = function() {
  return /** @type{!Array<!proto.ivms101.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.Address, 2));
};


/**
 * @param {!Array<!proto.ivms101.Address>} value
 * @return {!proto.ivms101.LegalPerson} returns this
*/
proto.ivms101.LegalPerson.prototype.setGeographicAddressesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ivms101.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.Address}
 */
proto.ivms101.LegalPerson.prototype.addGeographicAddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ivms101.Address, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.LegalPerson} returns this
 */
proto.ivms101.LegalPerson.prototype.clearGeographicAddressesList = function() {
  return this.setGeographicAddressesList([]);
};


/**
 * optional string customer_number = 3;
 * @return {string}
 */
proto.ivms101.LegalPerson.prototype.getCustomerNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.LegalPerson} returns this
 */
proto.ivms101.LegalPerson.prototype.setCustomerNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional NationalIdentification national_identification = 4;
 * @return {?proto.ivms101.NationalIdentification}
 */
proto.ivms101.LegalPerson.prototype.getNationalIdentification = function() {
  return /** @type{?proto.ivms101.NationalIdentification} */ (
    jspb.Message.getWrapperField(this, proto.ivms101.NationalIdentification, 4));
};


/**
 * @param {?proto.ivms101.NationalIdentification|undefined} value
 * @return {!proto.ivms101.LegalPerson} returns this
*/
proto.ivms101.LegalPerson.prototype.setNationalIdentification = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ivms101.LegalPerson} returns this
 */
proto.ivms101.LegalPerson.prototype.clearNationalIdentification = function() {
  return this.setNationalIdentification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ivms101.LegalPerson.prototype.hasNationalIdentification = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string country_of_registration = 5;
 * @return {string}
 */
proto.ivms101.LegalPerson.prototype.getCountryOfRegistration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.LegalPerson} returns this
 */
proto.ivms101.LegalPerson.prototype.setCountryOfRegistration = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ivms101.LegalPersonName.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.LegalPersonName.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.LegalPersonName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.LegalPersonName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LegalPersonName.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameIdentifiersList: jspb.Message.toObjectList(msg.getNameIdentifiersList(),
    proto.ivms101.LegalPersonNameId.toObject, includeInstance),
    localNameIdentifiersList: jspb.Message.toObjectList(msg.getLocalNameIdentifiersList(),
    proto.ivms101.LocalLegalPersonNameId.toObject, includeInstance),
    phoneticNameIdentifiersList: jspb.Message.toObjectList(msg.getPhoneticNameIdentifiersList(),
    proto.ivms101.LocalLegalPersonNameId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.LegalPersonName}
 */
proto.ivms101.LegalPersonName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.LegalPersonName;
  return proto.ivms101.LegalPersonName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.LegalPersonName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.LegalPersonName}
 */
proto.ivms101.LegalPersonName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ivms101.LegalPersonNameId;
      reader.readMessage(value,proto.ivms101.LegalPersonNameId.deserializeBinaryFromReader);
      msg.addNameIdentifiers(value);
      break;
    case 2:
      var value = new proto.ivms101.LocalLegalPersonNameId;
      reader.readMessage(value,proto.ivms101.LocalLegalPersonNameId.deserializeBinaryFromReader);
      msg.addLocalNameIdentifiers(value);
      break;
    case 3:
      var value = new proto.ivms101.LocalLegalPersonNameId;
      reader.readMessage(value,proto.ivms101.LocalLegalPersonNameId.deserializeBinaryFromReader);
      msg.addPhoneticNameIdentifiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.LegalPersonName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.LegalPersonName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.LegalPersonName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LegalPersonName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ivms101.LegalPersonNameId.serializeBinaryToWriter
    );
  }
  f = message.getLocalNameIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ivms101.LocalLegalPersonNameId.serializeBinaryToWriter
    );
  }
  f = message.getPhoneticNameIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ivms101.LocalLegalPersonNameId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LegalPersonNameId name_identifiers = 1;
 * @return {!Array<!proto.ivms101.LegalPersonNameId>}
 */
proto.ivms101.LegalPersonName.prototype.getNameIdentifiersList = function() {
  return /** @type{!Array<!proto.ivms101.LegalPersonNameId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.LegalPersonNameId, 1));
};


/**
 * @param {!Array<!proto.ivms101.LegalPersonNameId>} value
 * @return {!proto.ivms101.LegalPersonName} returns this
*/
proto.ivms101.LegalPersonName.prototype.setNameIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ivms101.LegalPersonNameId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.LegalPersonNameId}
 */
proto.ivms101.LegalPersonName.prototype.addNameIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ivms101.LegalPersonNameId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.LegalPersonName} returns this
 */
proto.ivms101.LegalPersonName.prototype.clearNameIdentifiersList = function() {
  return this.setNameIdentifiersList([]);
};


/**
 * repeated LocalLegalPersonNameId local_name_identifiers = 2;
 * @return {!Array<!proto.ivms101.LocalLegalPersonNameId>}
 */
proto.ivms101.LegalPersonName.prototype.getLocalNameIdentifiersList = function() {
  return /** @type{!Array<!proto.ivms101.LocalLegalPersonNameId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.LocalLegalPersonNameId, 2));
};


/**
 * @param {!Array<!proto.ivms101.LocalLegalPersonNameId>} value
 * @return {!proto.ivms101.LegalPersonName} returns this
*/
proto.ivms101.LegalPersonName.prototype.setLocalNameIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ivms101.LocalLegalPersonNameId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.LocalLegalPersonNameId}
 */
proto.ivms101.LegalPersonName.prototype.addLocalNameIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ivms101.LocalLegalPersonNameId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.LegalPersonName} returns this
 */
proto.ivms101.LegalPersonName.prototype.clearLocalNameIdentifiersList = function() {
  return this.setLocalNameIdentifiersList([]);
};


/**
 * repeated LocalLegalPersonNameId phonetic_name_identifiers = 3;
 * @return {!Array<!proto.ivms101.LocalLegalPersonNameId>}
 */
proto.ivms101.LegalPersonName.prototype.getPhoneticNameIdentifiersList = function() {
  return /** @type{!Array<!proto.ivms101.LocalLegalPersonNameId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ivms101.LocalLegalPersonNameId, 3));
};


/**
 * @param {!Array<!proto.ivms101.LocalLegalPersonNameId>} value
 * @return {!proto.ivms101.LegalPersonName} returns this
*/
proto.ivms101.LegalPersonName.prototype.setPhoneticNameIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ivms101.LocalLegalPersonNameId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ivms101.LocalLegalPersonNameId}
 */
proto.ivms101.LegalPersonName.prototype.addPhoneticNameIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ivms101.LocalLegalPersonNameId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ivms101.LegalPersonName} returns this
 */
proto.ivms101.LegalPersonName.prototype.clearPhoneticNameIdentifiersList = function() {
  return this.setPhoneticNameIdentifiersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.LegalPersonNameId.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.LegalPersonNameId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.LegalPersonNameId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LegalPersonNameId.toObject = function(includeInstance, msg) {
  var f, obj = {
    legalPersonName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    legalPersonNameIdentifierType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.LegalPersonNameId}
 */
proto.ivms101.LegalPersonNameId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.LegalPersonNameId;
  return proto.ivms101.LegalPersonNameId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.LegalPersonNameId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.LegalPersonNameId}
 */
proto.ivms101.LegalPersonNameId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegalPersonName(value);
      break;
    case 2:
      var value = /** @type {!proto.ivms101.LegalPersonNameTypeCode} */ (reader.readEnum());
      msg.setLegalPersonNameIdentifierType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.LegalPersonNameId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.LegalPersonNameId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.LegalPersonNameId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LegalPersonNameId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLegalPersonName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLegalPersonNameIdentifierType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string legal_person_name = 1;
 * @return {string}
 */
proto.ivms101.LegalPersonNameId.prototype.getLegalPersonName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.LegalPersonNameId} returns this
 */
proto.ivms101.LegalPersonNameId.prototype.setLegalPersonName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LegalPersonNameTypeCode legal_person_name_identifier_type = 2;
 * @return {!proto.ivms101.LegalPersonNameTypeCode}
 */
proto.ivms101.LegalPersonNameId.prototype.getLegalPersonNameIdentifierType = function() {
  return /** @type {!proto.ivms101.LegalPersonNameTypeCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ivms101.LegalPersonNameTypeCode} value
 * @return {!proto.ivms101.LegalPersonNameId} returns this
 */
proto.ivms101.LegalPersonNameId.prototype.setLegalPersonNameIdentifierType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ivms101.LocalLegalPersonNameId.prototype.toObject = function(opt_includeInstance) {
  return proto.ivms101.LocalLegalPersonNameId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ivms101.LocalLegalPersonNameId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LocalLegalPersonNameId.toObject = function(includeInstance, msg) {
  var f, obj = {
    legalPersonName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    legalPersonNameIdentifierType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ivms101.LocalLegalPersonNameId}
 */
proto.ivms101.LocalLegalPersonNameId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ivms101.LocalLegalPersonNameId;
  return proto.ivms101.LocalLegalPersonNameId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ivms101.LocalLegalPersonNameId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ivms101.LocalLegalPersonNameId}
 */
proto.ivms101.LocalLegalPersonNameId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegalPersonName(value);
      break;
    case 2:
      var value = /** @type {!proto.ivms101.LegalPersonNameTypeCode} */ (reader.readEnum());
      msg.setLegalPersonNameIdentifierType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ivms101.LocalLegalPersonNameId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ivms101.LocalLegalPersonNameId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ivms101.LocalLegalPersonNameId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ivms101.LocalLegalPersonNameId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLegalPersonName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLegalPersonNameIdentifierType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string legal_person_name = 1;
 * @return {string}
 */
proto.ivms101.LocalLegalPersonNameId.prototype.getLegalPersonName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ivms101.LocalLegalPersonNameId} returns this
 */
proto.ivms101.LocalLegalPersonNameId.prototype.setLegalPersonName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LegalPersonNameTypeCode legal_person_name_identifier_type = 2;
 * @return {!proto.ivms101.LegalPersonNameTypeCode}
 */
proto.ivms101.LocalLegalPersonNameId.prototype.getLegalPersonNameIdentifierType = function() {
  return /** @type {!proto.ivms101.LegalPersonNameTypeCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ivms101.LegalPersonNameTypeCode} value
 * @return {!proto.ivms101.LocalLegalPersonNameId} returns this
 */
proto.ivms101.LocalLegalPersonNameId.prototype.setLegalPersonNameIdentifierType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto.ivms101);
