// Code generated by go-bindata. DO NOT EDIT.
// sources:
// invite_user.html (872B)
// invite_user.txt (726B)

package emails

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _invite_userHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x6b\xdc\x40\x0c\xc5\xef\xf9\x14\x8f\x5c\xda\x42\xf0\x1e\x0b\xc1\x35\x6d\x09\x84\x40\x69\x4b\xfe\x1c\x7a\x94\xc7\xda\xb5\x9a\x89\x64\x66\xe4\x5d\xdc\x65\xbf\x7b\xf1\x78\xbb\x5b\x42\xa1\x47\xcb\x92\xde\xd3\xfb\x4d\x3d\x34\xb7\x89\xd9\x45\x37\x19\xfb\x3d\xaa\xa7\xcc\x09\x87\xc3\x55\xbd\x1a\x9a\x8b\x8b\x7a\x68\x7e\xd8\x88\x9e\xb6\x8c\x96\x59\x21\xba\x15\xe7\x0e\xed\x54\xba\xef\xca\xe7\x3c\x00\x37\xfc\x34\x51\x78\xcf\x78\xbc\xbf\x7b\xf8\x84\xdb\x68\x2d\x45\xdc\x48\xe2\xe0\x96\x26\x3c\x70\xda\x4a\x60\xbc\xbd\xbd\x79\x78\x37\x0f\x04\x8b\x91\x5a\x4b\xe4\x0c\x53\xec\xf7\x17\x00\x50\x7d\x4b\x1b\x52\xf9\x45\x2e\xa6\x38\x1c\xaa\x93\x97\x47\x03\x85\xc0\x83\x17\x95\xe2\xa5\x34\x5d\x61\x88\x4c\x99\x51\x13\xfa\xc4\xeb\x0f\x97\x67\x73\x4f\xf7\x5f\x70\x38\x5c\x36\x21\x4a\x78\x86\xf7\x92\x11\x45\x9f\xab\x7a\x45\x0d\xee\xd6\x98\x6c\x44\x67\xfa\xc6\x41\x31\x31\x75\xd3\x72\x2d\xe9\x2c\x65\xa3\x7a\xf1\x34\x77\xed\x24\x46\xb4\x0c\xca\xcf\xdc\x15\xfb\x89\x17\xe7\x5c\xe1\xab\x39\xc3\x7b\xf2\x45\xe2\xec\x0d\x92\xb1\xa5\x28\x1d\xd6\x96\xf0\x1e\x81\x22\x6b\x47\x09\x1d\x4d\xf9\x7c\xda\xd1\x49\x20\x55\x73\x2c\x66\x6d\x49\x73\xb6\x7b\xba\x30\xd8\x30\x81\xb4\xc3\x40\xb9\x28\x2e\xff\xd1\x72\xb4\x1d\x44\xdd\xe6\x3d\x09\x6d\xb2\xdd\x8c\x92\xba\x2e\x71\xce\x68\x29\x5d\x9f\xc4\xea\x60\x1d\x37\xaf\x33\xaa\x57\xa5\x7c\xea\xfa\xfe\x47\x51\x9d\x82\xff\x05\x96\xba\x17\xd1\x0c\xf2\x73\xde\x2f\x24\xd1\xed\x3a\x8f\xc3\x60\xc9\x3f\x26\x5b\x8e\xa7\x58\x89\x5d\x36\xff\x2c\x17\x00\xb2\x9c\xcd\x5a\xa2\xe6\x54\xc2\x76\x0e\xbd\x4a\xa0\x08\xc9\x79\xe4\x8c\x5d\x2f\x91\x8f\xe8\x45\x37\xaf\xe8\x57\xb8\x31\xcc\xa9\x25\x1e\xe2\x34\x83\x29\x08\x78\xf6\x84\x2c\x1a\x78\x29\x1c\x79\xce\x40\xc6\xcc\x0b\x0f\x1b\x7d\x63\xa2\x9b\xa2\xab\xe6\xb2\x96\x50\x96\x66\x98\xc6\xe9\xcc\xe7\x33\x67\xc7\x3d\x6f\x28\x75\xf9\xaa\x6e\x13\x56\x4d\x99\xf9\xcf\x53\x7f\x64\x7a\x99\x77\xfc\x0e\x00\x00\xff\xff\x34\xbe\x93\x9b\x68\x03\x00\x00")

func invite_userHtmlBytes() ([]byte, error) {
	return bindataRead(
		_invite_userHtml,
		"invite_user.html",
	)
}

func invite_userHtml() (*asset, error) {
	bytes, err := invite_userHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invite_user.html", size: 872, mode: os.FileMode(0644), modTime: time.Unix(1669674063, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x52, 0x4c, 0x18, 0xa, 0xcb, 0x3c, 0x9d, 0xf5, 0x77, 0xb6, 0xcd, 0x35, 0x2d, 0x63, 0x92, 0x7d, 0x43, 0x10, 0x8c, 0x96, 0xd5, 0xf, 0xe, 0xd6, 0x32, 0x8b, 0x91, 0x57, 0xcb, 0xba, 0xa1}}
	return a, nil
}

var _invite_userTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6b\xdb\x4c\x10\x86\xef\xfb\x2b\xde\xdb\xf7\x15\x82\xae\x85\x9e\xda\x12\x08\x81\xd2\x16\xdb\x39\xf4\x38\xda\x1d\x5b\x53\xaf\x67\xc4\xee\xc8\x46\x0d\xfe\xef\x45\x2b\xa7\x0d\xb9\xf4\x28\xed\xe8\xd9\x67\xde\x57\x0f\x85\xd9\x45\x0f\x15\xcf\xcf\xe8\x9e\x2a\x17\x5c\xaf\x21\xfc\xb0\x09\x03\x9d\x19\x3d\xb3\x42\xf4\x2c\xce\x09\xfd\xdc\xa6\x1e\xdb\xe3\x32\x08\x37\xfc\x34\x51\xf8\xc0\xd8\x6d\x1e\xb7\x9f\xf0\x90\xad\xa7\x8c\x7b\x29\x1c\xdd\xca\x8c\x2d\x97\xb3\x44\xc6\xff\x0f\xf7\xdb\x77\xcb\x07\xd1\x72\xa6\xde\x0a\x39\xc3\xb4\x11\xbf\x95\x03\xa9\xfc\x22\x17\x53\x5c\xaf\x5d\x08\x3b\x03\xc5\xc8\xa3\x37\x74\x13\x68\xa7\x77\x18\x33\x53\xe5\x57\x22\x4f\x9b\x2f\x8b\x4a\xcc\x12\x8f\xf0\x41\x2a\xb2\xe8\xb1\xc3\xe3\x1e\xb3\x4d\x48\xa6\xff\x39\x28\x17\xa6\x34\xaf\x4b\x91\x2e\x70\x9b\xd4\xdb\xc4\x45\x72\x46\xcf\xa0\x7a\xe4\xd4\x0c\x0b\xaf\x72\xdc\xe1\xab\x39\xc3\x07\xf2\x15\xfd\xd7\x04\x52\x71\xa6\x2c\x09\x7b\x2b\x78\x8f\x48\x99\x35\x51\x41\xa2\xb9\x76\x21\xdc\xae\x8f\xa4\x6a\x7e\xb3\xb3\x35\xa9\xc5\xef\xcf\x22\xd1\xc6\x19\xa4\x09\x23\xd5\x76\xd5\x7a\x8e\x9e\xb3\x5d\x20\xea\xb6\x70\x0a\xfa\x62\x97\xa5\x1e\x4a\xa9\x70\xad\xe8\xa9\x7c\x08\xe1\x6d\x0c\x21\x7c\x7f\xc1\xaa\x53\xf4\x57\xcd\x50\x3a\x89\x56\x90\xa3\x4e\xe3\x68\xc5\x3f\x16\x5b\x57\xa1\xdc\x89\x41\x56\x61\xd6\x96\x0c\x17\x38\xc7\x41\x25\x52\x86\xd4\x3a\x71\xc5\x65\x90\xcc\xb7\x5e\x44\x0f\x6f\xaa\xe9\x70\x6f\x58\x76\x2d\x3c\xe6\x79\xc9\xb1\x25\xc6\x27\x92\x8c\x2a\x1a\x79\x7d\xf1\x12\xbd\x54\x4c\x95\xd7\xf8\x6c\xf2\x83\x2d\x48\x35\x97\xbd\xc4\x06\xac\x30\xcd\x73\x17\xc2\x67\xae\x8e\x0d\x1f\xa8\xa4\x7a\x17\xfe\xf1\x9f\xed\x98\x4e\xbf\x03\x00\x00\xff\xff\x90\xa7\xd2\xd5\xd6\x02\x00\x00")

func invite_userTxtBytes() ([]byte, error) {
	return bindataRead(
		_invite_userTxt,
		"invite_user.txt",
	)
}

func invite_userTxt() (*asset, error) {
	bytes, err := invite_userTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invite_user.txt", size: 726, mode: os.FileMode(0644), modTime: time.Unix(1669674063, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x6a, 0x32, 0x2e, 0x1d, 0xaa, 0xe0, 0x54, 0xfe, 0xfa, 0x5d, 0xaa, 0xce, 0x19, 0xed, 0xa2, 0xc, 0xc5, 0xb5, 0xc1, 0xcb, 0xdf, 0x5b, 0x18, 0x1d, 0xc3, 0xf4, 0x1b, 0x1a, 0xec, 0xa, 0x45}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"invite_user.html": invite_userHtml,
	"invite_user.txt":  invite_userTxt,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"invite_user.html": {invite_userHtml, map[string]*bintree{}},
	"invite_user.txt": {invite_userTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
