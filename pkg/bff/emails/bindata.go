// Code generated by go-bindata. DO NOT EDIT.
// sources:
// invite_user.html (1.077kB)
// invite_user.txt (928B)

package emails

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _invite_userHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x6a\x1b\x31\x10\xbe\xe7\x29\x3e\x7c\x69\x0b\xc1\x3e\x16\xc2\x76\x69\x4a\x4a\x08\x94\xb4\xe4\xe7\xd0\xe3\xac\x34\xf6\x4e\x23\x6b\x16\x49\x6b\xb3\x5d\xf6\xdd\x8b\xb4\x8e\xed\x86\x42\xaf\xa3\x99\xf9\xfe\x46\x55\x57\xdf\x06\xe6\x24\x7e\x13\xc7\x51\xd6\xf0\x8c\xe5\x73\xe4\x70\x4f\x5b\xc6\x62\x31\x4d\x18\xc7\xb3\xca\x34\x8d\x23\x7b\x3b\x4d\x97\xd5\xaa\xab\x2f\x2e\xaa\xae\x3e\x8e\xdd\xf9\x9d\xa4\xb3\xc9\x9f\xda\xa3\xa5\x1d\xa3\x61\xf6\x90\xf2\x6a\xd1\x0c\x65\xe3\x79\x73\x59\xea\x22\x4f\xd3\x35\xfa\xc8\x01\xfb\x56\x23\x83\xb7\x24\x0e\x64\x6d\xe0\x18\x21\x11\xe3\x78\x01\xe0\x38\xfb\xb5\xbc\x4f\x13\x5a\x8a\xc7\xf5\x83\xf6\x07\x86\x48\x8a\x5f\x2a\x1e\xa9\x65\x3c\x3d\xdc\x3d\x5e\xe3\xd6\x69\x43\x0e\x37\x12\xd8\x24\x0d\x03\x1e\x39\xec\xc4\x30\xde\xdf\xde\x3c\x7e\xc8\x03\x46\x9d\xa3\x46\x03\x25\x86\x7a\x1c\xb4\xcd\xb0\xdf\xc3\x86\xbc\xfc\xa6\x24\xea\x8b\xc0\xac\xe3\xaf\xe2\x49\x48\x6a\x59\x02\xf4\xec\xf1\xc0\x6a\x79\xf4\xed\x49\x41\xc6\x70\x97\x0a\xc1\xc2\xbf\x34\x5e\xa2\x73\x4c\x91\x51\x11\xda\xc0\xeb\x4f\x8b\x93\x5f\xcf\x0f\xdf\x30\x4d\x8b\xda\x38\x31\x2f\x48\xad\x44\x38\xf1\x2f\xcb\x6a\x45\x35\xee\xd6\x59\x3d\xac\xfa\x77\x09\xe4\x02\x93\x1d\xe6\x00\xc8\x67\x28\xed\x7d\x2a\x4a\x72\xd7\x5e\x9c\x43\xc3\xa0\xf8\xc2\xb6\x28\x0f\x3c\x8b\xe6\x25\xee\x35\x31\x52\x4b\x69\x86\x38\x71\xcb\x29\xec\xc8\x89\xc5\x5a\x03\x3e\xc2\x90\x63\x6f\x29\xc0\xd2\x10\x4f\xd2\x0e\x4c\x0c\x79\xaf\x09\x33\x59\x9d\x83\xc8\x74\x8f\x0a\x8d\x76\x03\xc8\x5b\x74\x14\x0b\xe2\xfc\x8e\x86\x9d\xee\x21\x3e\x69\xde\x13\xd0\x04\xdd\xe7\xbb\x78\xbd\x85\x86\xc2\xd5\x11\xac\x32\x6a\xb9\x7e\xeb\x51\xb5\x2a\xe5\x63\xd7\x8f\x57\x44\x9f\xc8\xa4\xb3\x9b\x20\xbb\x15\x1f\x41\xe9\xe4\x77\xbe\xab\xa4\x57\xb1\xef\x3a\x0d\xe9\x73\xd0\x59\x3c\xb9\xa5\xe8\xa2\xfe\x67\xb9\x04\x20\xb3\x6c\xf6\xc5\x6a\x0e\xc5\xec\xc4\xa6\xf5\x62\xc8\x41\x62\xec\x39\x62\xdf\x8a\xe3\x43\xf4\xe2\x37\x6f\xd2\x5f\xe2\x46\x91\x5d\x0b\xdc\xb9\x21\x07\x53\x22\x98\xff\x42\x14\x6f\x78\x2e\x1c\xf2\xcc\x81\xf4\x91\xe7\x3c\xb4\x4f\x1b\x15\xbf\x29\xb8\x5e\x93\xac\xc5\x94\xa5\x11\xea\xdd\x70\xca\xe7\x0b\xc7\x84\x07\xde\x50\xb0\xf1\xb2\x6a\x02\x56\x75\x99\xf9\xcf\x2f\x79\x62\xda\xe6\x1d\x7f\x02\x00\x00\xff\xff\x18\x74\x9f\x19\x35\x04\x00\x00")

func invite_userHtmlBytes() ([]byte, error) {
	return bindataRead(
		_invite_userHtml,
		"invite_user.html",
	)
}

func invite_userHtml() (*asset, error) {
	bytes, err := invite_userHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invite_user.html", size: 1077, mode: os.FileMode(0644), modTime: time.Unix(1692712983, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0xea, 0x35, 0x80, 0xf3, 0xc9, 0xa2, 0x6, 0xa3, 0x95, 0x1b, 0x53, 0xc6, 0xb4, 0xfb, 0x6e, 0xfb, 0xd4, 0x49, 0x0, 0xe4, 0x4b, 0xe6, 0x1d, 0x53, 0x10, 0x5a, 0x86, 0x67, 0xda, 0x29, 0xe7}}
	return a, nil
}

var _invite_userTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x6e\xdc\x3c\x0c\xc4\xef\x7e\x8a\x41\x2e\xdf\x57\x20\xf0\xb5\x40\x4f\x4d\x91\x22\x08\x50\xa4\x45\xfe\x1c\x7a\xa4\x25\xee\x9a\x8d\x96\x34\x24\x79\x17\xee\xc2\xef\x5e\x48\xde\xdd\x38\xbd\xf4\x2a\x92\xa3\xf9\x0d\x79\x17\x99\xb3\xe8\x36\x1d\x8f\xb2\x81\x32\xda\x97\xc4\xf1\x81\x76\x8c\xab\xab\x79\xc6\xf1\xb8\x7a\x99\xe7\xe3\x91\xd5\xcf\xf3\x75\xd3\x5c\xfa\xef\x75\x2f\x79\x35\xf2\xd3\x46\xf4\xb4\x67\x74\xcc\x0a\xa9\x55\x8f\x6e\xaa\x52\xeb\xe6\xaa\x16\x12\xcf\xf3\x0d\xc6\xc4\x11\x87\xde\x12\x83\x77\x24\x01\xe4\x7d\xe4\x94\x20\x69\x3d\xf7\xb5\xd6\xe6\x19\x3d\xa5\x8b\xf4\x64\xe3\xc9\x16\xb2\xe1\x97\x89\x22\xf7\x8c\xe7\xc7\xfb\xa7\x1b\xdc\x05\xeb\x28\xe0\x56\x22\xbb\x6c\x71\xc2\x13\xc7\xbd\x38\xc6\xff\x77\xb7\x4f\x1f\xca\x80\xb3\x10\xa8\xb3\x48\x99\x61\x8a\x0b\xd7\xf7\xb8\x25\x95\xdf\x94\xc5\xb4\x82\x15\x1f\xef\x1e\xdf\x00\x72\xcf\x12\x61\xab\xe2\xc9\x51\xdb\x34\xcf\x06\x72\x8e\x87\x5c\x5d\x55\xd3\xb5\xe3\x1a\x43\x60\x4a\xbc\xe2\x7b\x79\xfc\x56\xe0\x5c\x10\xf7\x8a\xdc\x4b\x42\x10\x7d\x6d\x71\xbf\x29\x90\xf0\xa6\xff\x65\x50\x88\x4c\x7e\x5a\x32\x26\x2d\xe2\x36\x6a\xae\x1d\x07\x09\x01\x1d\x83\xd2\x2b\xfb\x0a\x17\x79\xe1\xe2\x16\x0f\x96\x19\xb9\xa7\xbc\x48\xbf\x39\x29\x21\xef\x29\x88\xc7\xc6\x22\x3e\xc2\x51\x60\xf5\x14\xe1\x69\x4a\x6d\xd3\x9c\xbe\x77\xa4\x6a\xf9\xe4\xce\x96\x90\x8b\xbf\x0b\x88\xb3\x61\x02\xa9\xc7\x40\xa9\x7e\xb5\xd4\xd1\x71\xb0\x03\x44\xb3\x15\x9d\x88\x2e\xda\xa1\xec\xfb\xbc\xe3\x8e\xe2\xa7\x72\x50\xef\x63\x68\x9a\x1f\x67\x59\xcd\xe4\xf2\x6a\xa9\xe4\x77\xa2\x09\x94\x91\xc6\x61\xb0\x98\x3f\x47\x5b\x50\x28\xb4\x62\x90\xc5\x30\x6b\x4d\x86\x23\x32\xbb\x5e\xc5\x51\x80\xa4\x34\x72\xc2\xa1\x97\xc0\xa7\xbd\x88\x6e\xff\x5a\x4d\x8b\x5b\x43\x61\x8d\x3c\x84\xa9\xe4\x58\x13\x5b\x2e\x33\x89\x3a\x5e\x1e\xce\xd1\x4b\x2a\x07\xbc\xc4\x67\x63\xde\x5a\x91\x54\xcb\xb2\x11\x57\x05\x13\x4c\xc3\xd4\x36\xcd\x17\x4e\x19\x8f\xbc\xa5\xe8\xd3\x75\xf3\x8f\x13\x7d\x66\xda\xfd\x09\x00\x00\xff\xff\xca\xef\x0e\xe1\xa0\x03\x00\x00")

func invite_userTxtBytes() ([]byte, error) {
	return bindataRead(
		_invite_userTxt,
		"invite_user.txt",
	)
}

func invite_userTxt() (*asset, error) {
	bytes, err := invite_userTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invite_user.txt", size: 928, mode: os.FileMode(0644), modTime: time.Unix(1692712849, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x87, 0xe5, 0x14, 0x3e, 0xe9, 0x6d, 0x9c, 0x9f, 0x6c, 0x6e, 0xe9, 0x3c, 0x96, 0x8e, 0xfc, 0x4e, 0x44, 0x96, 0x53, 0x17, 0x2b, 0xe9, 0x24, 0x3e, 0xfa, 0xca, 0x65, 0xbc, 0x20, 0x0, 0xd5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"invite_user.html": invite_userHtml,
	"invite_user.txt":  invite_userTxt,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"invite_user.html": {invite_userHtml, map[string]*bintree{}},
	"invite_user.txt": {invite_userTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
