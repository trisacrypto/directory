// Code generated by go-bindata. DO NOT EDIT.
// sources:
// invite_user.html (781B)
// invite_user.txt (639B)

package emails

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _invite_userHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6b\xdb\x40\x10\x85\xef\xf9\x15\x8f\x5c\xda\x42\x90\x8f\x85\xa0\x8a\xb6\x04\x42\xa0\xb4\xc5\x76\x0e\x3d\x8e\x76\xc7\xd6\xd4\xeb\x1d\xb1\x3b\xb6\x51\x8d\xfe\x7b\xd1\x2a\xb5\x4b\x28\xf4\xa8\xd5\xec\xbc\xef\xbd\xb7\x75\xdf\x3c\x26\x66\x93\xb8\xcd\x38\x9f\x51\x3d\x67\x4e\x18\xc7\xbb\x7a\xd1\x37\x37\x37\x75\xdf\xfc\xd0\x03\x3a\x3a\x32\x5a\xe6\x08\x89\x47\x31\xf6\x68\x87\x32\xfd\x54\x3e\xa7\x0b\x30\xc5\x4f\x95\x08\xeb\x18\xeb\xe5\xd3\xea\x13\x1e\x83\xb6\x14\xf0\x20\x89\x9d\x69\x1a\xb0\xe2\x74\x14\xc7\x78\xfb\xf8\xb0\x7a\x37\x5d\x70\x1a\x02\xb5\x9a\xc8\x18\x1a\x71\x3e\xdf\x00\x40\xf5\x2d\x6d\x29\xca\x2f\x32\xd1\x88\x71\xac\x2e\x2c\x6b\x05\x39\xc7\xbd\x15\x95\xc2\x52\x86\xee\xd0\x07\xa6\xcc\xa8\x09\x5d\xe2\xcd\x87\xdb\x2b\xdc\xf3\xf2\x0b\xc6\xf1\xb6\x71\x41\xdc\x0e\xd6\x49\x46\x90\xb8\xab\xea\x05\x35\x78\xda\x60\xd0\x03\xbc\xc6\x37\x06\x0a\x89\xc9\x0f\xb3\x5b\x8a\x93\x94\x1e\xa2\x15\xa6\x69\xea\x24\x21\xa0\x65\x50\xde\xb1\x2f\xf8\x89\x67\x72\xae\xf0\x55\x8d\x61\x1d\xd9\x2c\x71\x65\x83\x64\x1c\x29\x88\xc7\x46\x13\xde\xc3\x51\xe0\xe8\x29\xc1\xd3\x90\xaf\xd6\x5e\x48\x1c\xc5\xa8\x86\x19\x56\xe7\x34\x27\xdc\x8b\x43\xa7\xfd\x00\x8a\x1e\x3d\xe5\xa2\x38\xff\x47\xcb\x41\x4f\x90\x68\x3a\xed\x49\x68\x93\x9e\xa6\x2a\xc9\xfb\xc4\x39\xa3\xa5\x74\x7f\x11\xab\x9d\x7a\x6e\x5e\x67\x54\x2f\xca\xf1\x65\xea\xfb\x1f\xc5\x68\xe4\xec\xaf\x62\xc9\xef\x25\x66\x90\x5d\xf3\xde\x93\x04\xd3\xfb\x7c\xe8\x7b\x4d\xf6\x31\xe9\x6c\x9e\x42\x25\x7a\xdb\xfc\xf3\xb8\x14\x20\xb3\x6d\x8e\x25\x6a\x4e\x25\x6c\x63\xd7\x45\x71\x14\x20\x39\x1f\x38\xe3\xd4\x49\xe0\x97\xea\x25\x6e\x5f\xb5\x7f\x0d\xf1\x33\x67\xc3\x92\xb7\x94\x7c\xbe\xab\xdb\x84\x45\x53\x16\xfe\xe7\x3d\xae\x99\xf6\xd3\x8e\xdf\x01\x00\x00\xff\xff\xd1\x8a\xdb\x0d\x0d\x03\x00\x00")

func invite_userHtmlBytes() ([]byte, error) {
	return bindataRead(
		_invite_userHtml,
		"invite_user.html",
	)
}

func invite_userHtml() (*asset, error) {
	bytes, err := invite_userHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invite_user.html", size: 781, mode: os.FileMode(0644), modTime: time.Unix(1668010740, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x62, 0x83, 0x21, 0x3d, 0x1f, 0x2a, 0xf5, 0x99, 0x19, 0x7, 0x3f, 0xcf, 0xbd, 0x16, 0x9e, 0xa5, 0x42, 0x66, 0xf2, 0x0, 0x7f, 0xa2, 0x2e, 0xf1, 0x76, 0x23, 0x23, 0x38, 0xef, 0x27, 0x34}}
	return a, nil
}

var _invite_userTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x8e\xd3\x40\x0c\x86\xef\xf3\x14\xff\x0d\x90\x56\xb9\x22\x71\x02\xb4\x52\x55\x09\x01\x6a\xbb\x07\x8e\xce\x8c\xb7\x31\x9d\xb5\xa3\x19\xa7\x55\x58\xf5\xdd\x51\x26\x05\x56\x7b\xe1\x18\xd9\xf9\xfc\xd9\xff\x6c\x0a\xb3\x8b\x1e\x2b\x9e\x9f\xd1\x3d\x54\x2e\xb8\x5e\x43\xf8\x61\x13\x06\x3a\x33\x7a\x66\x85\xe8\x59\x9c\x13\xfa\xb9\x75\x6d\xdb\xe7\xd2\x08\x37\xfc\x34\x51\xf8\xc0\x38\xec\xb6\xfb\x4f\xd8\x64\xeb\x29\xe3\x5e\x0a\x47\xb7\x32\x63\xcf\xe5\x2c\x91\xf1\x76\x73\xbf\x7f\xb7\xfc\x10\x2d\x67\xea\xad\x90\x33\x4c\x1b\xf1\x5b\x39\x92\xca\x2f\x72\x31\xc5\xf5\xda\x85\x70\x30\x50\x8c\x3c\x7a\x43\x37\x81\x56\xbd\xc3\x98\x99\x2a\xbf\x10\x79\xd8\x7d\x59\x54\x62\x96\x78\x82\x0f\x52\x91\x45\x4f\x1d\xb6\x8f\x98\x6d\x42\x32\x7d\xe3\xa0\x5c\x98\xd2\xbc\x2e\x45\xba\xc0\x6d\x52\x6f\x1d\x17\xc9\x19\x3d\x83\xea\x89\x53\x33\x2c\xbc\xca\x71\x87\xaf\xe6\x0c\x1f\xc8\x57\xf4\x3f\x13\x48\xc5\x99\xb2\x24\x3c\x5a\xc1\x7b\x44\xca\xac\x89\x0a\x12\xcd\xb5\x0b\xe1\x36\x3e\x92\xaa\xf9\xcd\xce\xd6\x4b\x2d\x7e\x7f\x17\x89\x36\xce\x20\x4d\x18\xa9\xb6\x51\x6b\x1d\x3d\x67\xbb\x40\xd4\x6d\xe1\x14\xf4\xc5\x2e\x4b\x3c\x94\x52\xe1\x5a\xd1\x53\xf9\x10\xc2\xeb\x33\x84\xf0\xfd\x0f\x56\x9d\xa2\xbf\x48\x86\xd2\x93\x68\x05\x39\xea\x34\x8e\x56\xfc\x63\xb1\x75\x15\xca\x9d\x18\x64\x15\x66\x6d\x97\xe1\x02\xe7\x38\xa8\x44\xca\x90\x5a\x27\xae\xb8\x0c\x92\xf9\x96\x8b\xe8\xf1\x55\x34\x5d\x08\x9f\xb9\x3a\x76\x7c\xa4\x92\xea\x5d\xf8\xcf\x83\x38\x30\x3d\xfd\x0e\x00\x00\xff\xff\x3b\xf5\x62\x61\x7f\x02\x00\x00")

func invite_userTxtBytes() ([]byte, error) {
	return bindataRead(
		_invite_userTxt,
		"invite_user.txt",
	)
}

func invite_userTxt() (*asset, error) {
	bytes, err := invite_userTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invite_user.txt", size: 639, mode: os.FileMode(0644), modTime: time.Unix(1668002636, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xfc, 0x86, 0x4e, 0xc4, 0xa, 0xd4, 0xc6, 0xae, 0x15, 0xa7, 0x3a, 0x6, 0xba, 0xd2, 0x31, 0x66, 0x44, 0x20, 0xf8, 0x9a, 0xc5, 0x88, 0x76, 0x26, 0xac, 0x65, 0x41, 0x3, 0x61, 0x9f, 0x6e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"invite_user.html": invite_userHtml,
	"invite_user.txt":  invite_userTxt,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"invite_user.html": {invite_userHtml, map[string]*bintree{}},
	"invite_user.txt": {invite_userTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
