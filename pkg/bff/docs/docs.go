// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/announcements": {
            "get": {
                "description": "Get the most recent network announcements",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Get announcements [read:announcements]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.AnnouncementsReply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "post": {
                "description": "Post a new announcement to the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Post an announcement [create:announcements]",
                "parameters": [
                    {
                        "description": "Announcement to post",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Announcement"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Post date and author are required",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/attention": {
            "get": {
                "description": "Get attention alerts for the user regarding their organization's VASP registration status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Get attention alerts for the user [read:vasp]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.AttentionReply"
                        }
                    },
                    "204": {
                        "description": "No attention messages"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/certificates": {
            "get": {
                "description": "Returns the certificates associated with the user's organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "certificates"
                ],
                "summary": "List certificates for the user [read:vasp]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.CertificatesReply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/collaborators": {
            "get": {
                "description": "Returns all collaborators on the user's organization sorted by email address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collaborators"
                ],
                "summary": "List collaborators [read:collaborators]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ListCollaboratorsReply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "post": {
                "description": "Invite a new collaborator to the user's organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collaborators"
                ],
                "summary": "Add collaborator [update:collaborators]",
                "parameters": [
                    {
                        "description": "Collaborator to add",
                        "name": "collaborator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Collaborator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Collaborator"
                        }
                    },
                    "400": {
                        "description": "Invalid collaborator, email address is required",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "403": {
                        "description": "Maximum number of collaborators reached",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "409": {
                        "description": "Collaborator already exists",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/collaborators/{id}": {
            "post": {
                "description": "Replace the roles of the collaborator with the given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collaborators"
                ],
                "summary": "Update collaborator roles [update:collaborators]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collaborator ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New roles for the collaborator",
                        "name": "roles",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateRolesParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UpdateRolesParams"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the collaborator with the given ID from the organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collaborators"
                ],
                "summary": "Delete collaborator [update:collaborators]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collaborator ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/details": {
            "get": {
                "description": "Returns details for a VASP by ID and directory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Get details for a VASP [read:vasp]",
                "parameters": [
                    {
                        "description": "VASP ID and directory",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MemberDetailsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VASP details",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "VASP ID and directory are required",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/lookup": {
            "get": {
                "description": "Lookup a VASP record in both TestNet and MainNet, returning either or both results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GDS"
                ],
                "summary": "Lookup a VASP record by name or ID",
                "parameters": [
                    {
                        "description": "Lookup parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LookupParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LookupReply"
                        }
                    },
                    "400": {
                        "description": "Either ID or CommonName must be provided",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "No results returned for query",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Return the list of organizations that the user is assigned to.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "List organizations [read:organizations]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization name filter",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 8,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ListOrganizationsReply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organization with the specified name and domain for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new organization [create:organizations]",
                "parameters": [
                    {
                        "description": "Name and domain",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.OrganizationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OrganizationReply"
                        }
                    },
                    "400": {
                        "description": "Must provide name and domain",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "409": {
                        "description": "Domain already exists",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "delete": {
                "description": "Permanently delete an organization, including the registration and collaborators. This action is irreversible so the frontend should obtain confirmation from the user before calling this endpoint.",
                "tags": [
                    "organizations"
                ],
                "summary": "Delete an organization [delete:organizations]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "403": {
                        "description": "User is not a collaborator in the organization",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "patch": {
                "description": "Patch an organization with the provided fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Patch organization [update:organizations]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.OrganizationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OrganizationReply"
                        }
                    },
                    "400": {
                        "description": "Invalid organization domain",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "403": {
                        "description": "User is not authorized to access this organization",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "409": {
                        "description": "Organization with domain already exists",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/overview": {
            "get": {
                "description": "Returns a high level summary representing the state of each directory service and VASP registrations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "overview"
                ],
                "summary": "Get summary information for the overview dashboard [read:vasp]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OverviewReply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/register": {
            "get": {
                "description": "Get the registration form associated with the user's organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Get the user's current registration form [read:vasp]",
                "parameters": [
                    {
                        "description": "Load registration form parameters",
                        "name": "params",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.RegistrationFormParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration form",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "put": {
                "description": "Save a registration form to the user's organization in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Save a registration form to the database [update:vasp]",
                "parameters": [
                    {
                        "description": "Registration form",
                        "name": "form",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration form",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "Empty form was provided"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            },
            "delete": {
                "description": "Reset the registration form associated with the user's organization for the requested step.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Reset the user's current registration form [update:vasp]",
                "parameters": [
                    {
                        "description": "Reset registration form parameters",
                        "name": "params",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.RegistrationFormParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration form",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/register/{directory}": {
            "post": {
                "description": "Submit a registration form to the TestNet or MainNet directory service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Submit a registration form to a directory service [update:vasp]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Directory service to submit the registration form to (testnet or mainnet)",
                        "name": "directory",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RegisterReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Returns the status of the BFF server, including the status of the directory services.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Get the status of the BFF server",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If true, do not check the status of the directory services.",
                        "name": "nogds",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StatusReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/users": {
            "patch": {
                "description": "Update the user's profile information in Auth0.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update the user's profile",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Completes the user login process by assigning the user to an organization and verifying that the user has the proper roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login a user to the BFF",
                "parameters": [
                    {
                        "description": "Login parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful, token refresh required",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "204": {
                        "description": "Login successful"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "403": {
                        "description": "User invitation has expired",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/users/organization": {
            "get": {
                "description": "Get high level info about the user's current organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the user's current organization [read:organizations]",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.OrganizationReply"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        },
        "/users/roles": {
            "get": {
                "description": "Get the list of assignable user roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the list of assignable user roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "list"
                        }
                    }
                }
            }
        },
        "/verify": {
            "get": {
                "description": "Verify a VASP contact using a TestNet or MainNet GDS.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GDS"
                ],
                "summary": "Verify a VASP contact",
                "parameters": [
                    {
                        "description": "Verify contact parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyContactParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.VerifyContactReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Reply"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AnnouncementsReply": {
            "type": "object",
            "properties": {
                "announcements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Announcement"
                    }
                },
                "last_updated": {
                    "type": "string"
                }
            }
        },
        "api.AttentionMessage": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "api.AttentionReply": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.AttentionMessage"
                    }
                }
            }
        },
        "api.Certificate": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "expires_at": {
                    "type": "string"
                },
                "issued_at": {
                    "type": "string"
                },
                "revoked": {
                    "type": "boolean"
                },
                "serial_number": {
                    "type": "string"
                }
            }
        },
        "api.CertificatesReply": {
            "type": "object",
            "properties": {
                "mainnet": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Certificate"
                    }
                },
                "network_error": {
                    "$ref": "#/definitions/api.NetworkError"
                },
                "testnet": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Certificate"
                    }
                }
            }
        },
        "api.ListCollaboratorsReply": {
            "type": "object",
            "properties": {
                "collaborators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Collaborator"
                    }
                }
            }
        },
        "api.ListOrganizationsReply": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.OrganizationReply"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                }
            }
        },
        "api.LoginParams": {
            "type": "object",
            "properties": {
                "orgid": {
                    "type": "string"
                }
            }
        },
        "api.LookupParams": {
            "type": "object",
            "properties": {
                "commonName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "api.LookupReply": {
            "type": "object",
            "properties": {
                "mainnet": {
                    "type": "object",
                    "additionalProperties": true
                },
                "testnet": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "api.MemberDetails": {
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "object",
                    "additionalProperties": true
                },
                "country_code": {
                    "type": "string"
                },
                "first_listed": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_updated": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "verified_on": {
                    "type": "string"
                }
            }
        },
        "api.MemberDetailsParams": {
            "type": "object",
            "properties": {
                "directory": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "api.NetworkError": {
            "type": "object",
            "properties": {
                "mainnet": {
                    "type": "string"
                },
                "testnet": {
                    "type": "string"
                }
            }
        },
        "api.NetworkOverview": {
            "type": "object",
            "properties": {
                "certificates_issued": {
                    "type": "integer"
                },
                "member_details": {
                    "$ref": "#/definitions/api.MemberDetails"
                },
                "new_members": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "vasps": {
                    "type": "integer"
                }
            }
        },
        "api.OrganizationParams": {
            "type": "object",
            "properties": {
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.OrganizationReply": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_login": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "boolean"
                }
            }
        },
        "api.OverviewReply": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/api.NetworkError"
                },
                "mainnet": {
                    "$ref": "#/definitions/api.NetworkOverview"
                },
                "org_id": {
                    "type": "string"
                },
                "testnet": {
                    "$ref": "#/definitions/api.NetworkOverview"
                }
            }
        },
        "api.RegisterReply": {
            "type": "object",
            "properties": {
                "common_name": {
                    "type": "string"
                },
                "error": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "pkcs12password": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "boolean"
                },
                "registered_directory": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "api.RegistrationFormParams": {
            "type": "object",
            "properties": {
                "step": {
                    "type": "string"
                }
            }
        },
        "api.RegistrationStatus": {
            "type": "object",
            "properties": {
                "mainnet_submitted": {
                    "type": "string"
                },
                "testnet_submitted": {
                    "type": "string"
                }
            }
        },
        "api.Reply": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "boolean"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "api.StatusReply": {
            "type": "object",
            "properties": {
                "mainnet": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "testnet": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "api.UpdateRolesParams": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.VerifyContactParams": {
            "type": "object",
            "properties": {
                "directory": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "api.VerifyContactReply": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Announcement": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "created": {
                    "description": "Metadata as RFC3339Nano Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "modified": {
                    "type": "string"
                },
                "post_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Collaborator": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Metadata as RFC3339Nano Timestamps",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Identifiers used by the BFF",
                    "type": "string"
                },
                "joined_at": {
                    "type": "string"
                },
                "last_login": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "description": "User data cached from the authentication service",
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "BFF API",
	Description:      "BFF server which supports the GDS user frontend",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
