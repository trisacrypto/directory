// Code generated by go-bindata. DO NOT EDIT.
// sources:
// favicon.png (1.693kB)
// index.html (6.796kB)

package clive

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x9d\x06\x62\xf9\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x30\x00\x00\x00\x30\x08\x06\x00\x00\x00\x57\x02\xf9\x87\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x06\x57\x49\x44\x41\x54\x68\x43\xd5\x5a\x4b\x6e\xdb\x48\x10\x7d\xc5\x66\xb6\x63\xcf\x09\xa2\x39\x81\x6d\xc0\x32\x30\xab\x38\x27\x88\x02\xcc\xde\xf2\x05\x26\xd2\x5e\x8a\xe9\x48\x7b\xcb\x27\x88\xb3\x1f\x60\x92\x13\xc4\x59\x19\xb0\x0c\xc8\x39\x41\xec\x13\x44\xc2\x2c\x2d\x76\x0d\xaa\xc9\xe6\x4f\xa4\x48\xea\x63\xcc\xf4\x26\x81\x4d\x36\xeb\x55\xd5\xeb\xaa\x7a\x6d\xc2\x16\x97\xea\xdf\xb6\x89\xe9\x61\x3e\x6c\x5e\x6f\xeb\x33\xb4\xad\x8d\xe1\xdd\xee\x3b\x3e\x7d\x95\xfd\xb5\x72\x7f\x83\x77\x30\xdd\xc6\xb7\xb6\x03\xc0\x9b\xec\x3a\xbe\x3f\x01\xb8\x21\x46\x33\xf0\x99\x07\xcd\xb7\xff\x0b\x00\x4e\xef\xf6\x1d\x88\x3c\x80\x1e\x41\xfc\xd9\x18\xcd\x68\x03\xc4\x0e\xf3\xe9\xa6\xd3\x69\x63\x11\x70\x7b\xe3\x63\x4d\xf4\x11\x60\x22\xa6\x8e\x3f\x3c\x0c\x8c\x0f\x97\xd3\x1f\x77\x00\x78\x0c\x4c\x58\xcd\x4f\xe1\xfd\xfe\xb0\x89\x88\xac\x0f\xc0\xbb\x69\x90\xef\x7e\x24\xe0\x00\x84\x91\xfe\xd0\xf4\x0a\x0d\x93\xd4\x9a\x3f\x8d\x40\x74\x02\x60\xa4\x95\x7b\xbe\x2e\x37\x56\x07\x60\x8c\x99\xbf\x03\xc1\x03\xf3\x27\xed\xbe\xe8\x44\xc6\x78\xb7\xfb\xe4\xd3\x99\xe4\x7d\xe0\x79\xda\xd3\x4a\x75\x93\xbf\x57\x3e\x8d\x18\xd8\x23\xa2\x8e\xff\xe1\xf0\xd3\xaa\xd1\x58\x09\x80\x7a\x7f\x77\xc2\xcc\x23\x02\xbe\xfb\x8a\x3b\xf0\x8e\xee\x8d\x01\x01\x79\x2f\x00\x6e\x03\x98\xe9\x41\x73\x37\x4c\x9d\x0b\x00\x53\x30\x46\x7a\xd8\x3c\xb7\xc6\xaa\xde\x5d\x8b\x89\x47\x60\xfc\x74\x80\xee\x2a\xfc\xa8\x05\xc0\xe4\x39\x70\x01\xc2\xaf\x04\xf6\xfc\xc1\xd1\x55\x26\xc7\xcf\x00\xec\x1a\xe3\x15\x1f\x5b\x60\xce\xfb\xbb\x11\x98\xdf\x05\xcf\xd2\x43\x96\xcc\xce\xfb\xb1\x07\x46\x87\x81\xaf\xac\xe6\xdd\x3a\xfc\xa8\x06\xc0\xbb\x69\x38\xfe\x8b\x33\x80\xdf\x9a\x3c\x77\xdc\x91\x4d\x87\x04\x79\xcd\x91\x99\x35\x3e\xf2\x76\xff\xb6\xcd\x10\x92\x07\x8b\x81\xeb\x14\x99\xe5\x1b\x73\xe5\x19\x7e\x30\x3c\xed\xba\x97\x55\xf8\xb1\x1c\x40\x9c\xe7\x1d\x30\x7f\xd1\xae\xef\x45\xde\x89\xc9\x7b\x9c\xc8\xdf\x94\xe7\xb3\x79\x2d\x95\x39\x09\x22\xfc\x7d\x8a\xcc\xe2\x10\x26\x39\xad\xe8\x25\x11\xbc\x32\x7e\x14\x02\x08\xf2\x13\x92\xbb\x33\x87\xb9\x13\xe5\x67\x92\xbc\x69\x0b\x97\x1a\x5f\x14\x89\xf0\xe7\x53\x30\x7b\x7a\x78\x74\x99\x79\x4e\x88\x3e\x61\xc5\xdd\x88\x67\x19\xaf\xe4\x02\x08\x3d\x35\x12\x5a\xea\x41\x53\xfe\x35\x2b\xfc\xb9\x80\x92\x3c\x4f\x2f\xc6\x3d\x1c\xfa\xa6\x3f\x1c\xca\x79\x0f\xf4\xc7\x07\xd1\x03\x83\xe6\xc4\xfc\x3f\x38\x9d\x2e\x08\xd8\x2f\xda\x23\x45\x66\x71\x96\xf6\xe5\x94\x3b\xd1\x8a\x5f\xe7\x81\x58\x04\x60\x4e\x92\xf9\x0f\x87\xf1\xd6\x7a\x3d\x41\x5e\xf9\x70\xe1\x22\xe0\x9b\x3f\x68\x9a\x94\x72\xfa\x77\x97\x00\xff\x09\xe0\x1f\x3d\x68\xfe\x22\x3f\x0b\xf8\x02\xd3\x1f\x2d\x5b\xa6\xf5\x48\x90\xd9\x90\x5c\xe3\x8d\x1e\x36\x63\xa7\x84\x1b\x2c\x00\x08\xbc\xec\x74\xf4\xe0\xd0\x18\x5b\x90\xb7\xb9\xdf\xdf\x14\x00\x9b\x56\x91\xd7\x03\xa7\xfe\xd4\x8a\x0f\xb2\x51\x58\x00\x20\x68\x89\x71\x1c\x7b\x72\x2c\x5d\xe4\x4e\x89\xd3\xa6\xd9\x10\xab\xde\xf8\x0f\xfb\x8e\x3f\x6c\xfe\x95\x7c\xdf\xe9\xdd\x5e\x85\xd5\xb8\x2c\x12\x5f\x78\xd0\x6c\x85\x11\xbd\x4f\x71\xb1\x28\x02\x29\x00\x41\x4b\x1c\xe4\x6f\xf9\x9a\x12\xb8\x9b\xac\x0d\x79\xaf\x54\x35\xde\xbe\xab\x07\x4d\xe3\x64\xd5\x1f\x5f\x13\xc3\xcb\x16\xbb\xa5\x11\xa8\x9a\xb3\xf6\x63\xc9\x14\xca\x33\x3e\xac\xbc\x7f\x97\xfb\x22\x7e\xe2\x59\x01\x98\x9e\x68\x78\x24\x6d\x44\xee\xaa\xeb\x10\xd9\xe4\x79\x01\x00\xdd\xe4\xb1\xbb\x80\x22\x24\xe3\x7f\x36\x02\x0e\xe3\x75\x59\x43\xe6\xf4\xc7\x32\x07\xbc\xac\x0a\xe2\x59\x23\x60\x3f\xb6\xcc\x38\xea\x8f\x3f\x13\xf0\x66\x3b\x00\xe4\xd4\x99\xd3\x47\x22\xcc\xe4\x18\xad\x97\xb3\xf4\xdd\xd6\x8e\x65\xc6\x85\x9d\xa7\x74\xad\x95\x56\x32\x02\xcc\xd8\xd1\x2e\x9f\x26\x6b\x41\x74\x0a\x85\xb3\xac\x69\x1b\xec\x69\x52\x0b\x40\x09\x81\xad\xb5\xb5\xf6\xcc\x90\x98\x81\x57\x66\x1f\xe6\x8e\xed\x9b\x22\x00\xe1\xc6\x32\xc7\xee\xac\x02\x80\xc0\xa7\x65\x35\xc0\x7c\xbc\x26\x91\x53\x11\x08\x00\xcc\x1c\x46\xcb\x72\x2d\x5d\x07\x4c\xe1\x72\xae\x08\x3c\xad\x9b\x42\x79\x65\xbe\x28\x47\xea\x10\x39\x0d\x80\x76\xb5\x7a\x6a\x25\x07\x9e\x8d\x15\xb2\x2a\x04\x8e\x0a\x5e\x0d\x22\x3f\xcb\x29\x54\x56\x81\xb3\x91\x48\x10\xf9\x91\x80\x07\x26\xc4\xd2\xa3\xe6\x06\xc8\xd9\x07\x78\x6f\xed\x42\x16\xe6\x6b\x1b\xcc\xfb\x20\x92\xa6\x2a\xbf\xa9\x23\xba\x8c\xe6\x80\x2a\x67\x8b\x77\xd3\x00\xd4\x6e\x2c\x06\xdc\x34\xe0\xab\xa0\x36\xa8\x17\xdf\xcd\x28\xe9\x4d\x76\x95\xff\xd4\xb2\xbc\x5a\xa9\x17\x82\x7c\x48\x36\x1e\x1c\x7d\x33\x7b\x87\xad\xb6\xf5\x4e\x94\x12\x55\x09\x6c\x5f\x08\x8e\x6b\xa9\x05\x2d\x90\x19\x6e\x32\x8b\xa4\xd8\x5d\x6b\xa5\x2f\x2d\xc8\x95\x00\xa4\x8f\x3c\xba\x72\x98\x3f\x09\xfb\xc3\x41\x7e\x14\x85\x39\xa7\x4f\xcf\x0b\x84\xbc\xe7\x13\xce\x08\x48\xce\xd1\x4b\x63\xb6\x16\x07\x42\x85\x39\xd5\x4e\x8b\x9a\xa0\x18\xe7\x02\x44\x22\xa2\x41\x2d\xdb\xb3\x17\x5a\x12\xab\x1a\x85\x8d\x5e\xd1\xbb\xeb\x01\x30\xa3\x61\xfe\x40\xb3\x20\x8b\x64\x2c\x08\xc6\x50\xde\x63\xa2\x56\x1d\x8f\x27\xb7\x61\x20\x1e\x68\x7a\xe3\x49\x9e\xf8\xb5\x78\x8c\x8a\x14\xc8\x38\xb1\xf3\x67\xc9\x48\x19\xab\x09\x61\x0d\xc9\xf2\xa3\x0a\xa7\x0b\x9e\x89\x55\x8e\x3a\x23\xa5\xad\x94\xc9\xce\x32\xe4\x82\xa8\x70\xb9\x5d\x64\x30\x84\xbb\xa7\x6a\xee\x1f\x33\xb1\x3c\x57\x36\x82\x2e\xc5\x65\x8e\x65\x35\x6f\xdb\x82\x15\x1c\xbb\xd4\xca\xeb\xb5\x96\xc9\x2a\x17\x59\xe1\xd5\x4a\xe4\xb9\x06\x32\xee\xb5\x3b\x37\x97\x18\xca\x77\xaf\xa2\xbe\xa5\x5e\x08\x1e\x1d\x46\x3b\x47\x83\xea\x26\xa5\xca\xe4\x96\x25\xc2\x16\x8b\x21\x13\x4b\xda\xa8\x97\x09\xb4\x9a\x50\xeb\x4c\x59\x98\x4e\x29\xed\x48\x0d\x91\xfa\x51\xd6\xff\xcf\x16\x34\x28\x23\x20\x43\xa4\xfa\x99\x56\xba\x5d\x4b\xd8\x8a\x4c\x32\xc2\xd2\x5c\x38\x71\x06\xd0\x95\x56\x4f\xe7\x49\x69\xb1\xd8\xd3\xf4\x00\xd6\x23\xed\xfa\x5f\xcc\xf3\xde\x4d\xc3\x9d\xbb\x0d\x2d\x67\x3e\x2d\x8a\x62\x49\xad\x35\x21\x7e\x1d\x10\xb8\x53\xd6\x20\x56\x16\x77\xc9\x77\x45\x4e\x7f\x55\x28\x91\x17\x79\x59\x14\x3b\x69\x15\x18\x53\x4d\x1c\xb7\x0c\xb6\xe2\x46\xc5\x2d\x21\xcd\x13\xce\x53\xa0\x96\xa4\x61\x35\x00\xe1\x06\x71\x01\xc3\x0e\x31\xba\xc9\x6b\x24\x2b\x91\x57\x20\xf0\x63\xf6\x0a\xca\xe9\x8d\xcf\x40\xe8\x04\xf7\x0d\x31\x79\xab\xd0\xa7\x16\x00\xbb\x61\xfa\xbe\x2b\x21\xbc\xa6\xaf\x90\xb2\xdf\x9f\x65\xaf\xa0\x62\x01\x99\x29\x45\xde\x2a\x96\x87\xcf\xac\x04\x20\x87\xcc\x0b\x12\xb9\x1f\x78\x34\x98\x7d\xcd\x15\x54\xae\x34\x2f\x5a\x67\x4a\x40\xae\x61\xbb\x79\x74\x75\x00\x51\xee\xde\x34\x42\x32\xef\x65\x25\xf2\x05\x63\x82\x82\x24\xf3\x70\x07\xd2\xc1\x3a\xca\xab\x72\x89\xb1\x0c\xd4\xfa\x00\x52\xfc\xc0\x55\xd1\x7d\xb0\xbd\x3f\x5e\xb8\x57\xab\xeb\xf2\xcc\xf3\x1b\x03\x10\xf1\x23\xbe\xef\x9a\x10\x87\x83\x0a\x51\xbb\xe8\xfe\x78\x4d\xfb\x37\x90\x42\x79\x16\x04\xa9\x22\x37\x97\xa6\x80\x25\x9b\xb2\x75\x0d\xce\xbe\xbf\xf1\x08\xc4\x45\xd0\x28\xdb\xe6\xdc\xd7\xca\x6d\xac\x9b\xeb\x45\xc0\xb7\x07\x20\x9c\xe0\xb6\xfd\xe7\x36\xff\x02\x41\xa8\x8e\x6d\xdd\x91\x3a\xa5\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xaa\x6f\xa0\xf0\x9d\x06\x00\x00")

func faviconPngBytes() ([]byte, error) {
	return bindataRead(
		_faviconPng,
		"favicon.png",
	)
}

func faviconPng() (*asset, error) {
	bytes, err := faviconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.png", size: 1693, mode: os.FileMode(0644), modTime: time.Unix(1658286297, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x4a, 0x3c, 0xe2, 0x15, 0xfa, 0xea, 0x42, 0x57, 0xdc, 0xbf, 0xf6, 0x1a, 0x1f, 0x6c, 0x67, 0xef, 0xf9, 0x35, 0xb9, 0xfc, 0x1b, 0xaf, 0xe6, 0x30, 0xc, 0x86, 0x72, 0x45, 0xf2, 0x6c, 0x4e}}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x79\x6b\x93\xdb\xc6\xb1\xf6\x77\xfd\x8a\x0e\x52\xf5\x56\x52\x01\x06\xd3\x73\x9f\x35\xb9\xf5\x46\x17\x3b\x3a\xd6\x89\xed\x48\x8e\x22\x7f\x03\x81\x21\x09\x09\x17\x1a\x00\xb9\xbb\xfa\xf5\xa7\x7a\xc0\x9b\xb4\x3a\x2e\xd5\xa9\xd2\x7e\x58\xa2\xe7\xd2\xd3\xd3\xfd\xf4\xd3\x83\xc1\xe2\x4f\xcf\x7f\x7a\xf6\xe6\xdd\xcf\x2f\x60\x3b\xb5\xcd\xed\x93\xc5\xe9\x27\x14\xd5\xed\x13\x80\x45\x1b\xa6\x02\xca\x6d\x31\x8c\x61\x5a\x26\xbf\xbe\xf9\x3e\x73\x09\xe4\xb1\x6b\xaa\xa7\x26\xdc\x3e\x7b\xf5\xf2\x10\x6e\xe0\xef\xfb\x69\xcb\xe1\x55\xbf\xa9\x3b\x58\xf7\x03\x3c\x7b\xf5\x12\x7e\x1e\xfa\x76\x37\x8d\x8b\x7c\x1e\x49\x73\x9a\xba\xfb\x00\x43\x68\x96\xc9\x38\x3d\x34\x61\xdc\x86\x30\x25\xb0\x1d\xc2\x7a\x99\x6c\xa7\x69\x37\xde\xe4\x79\x59\x75\xec\xfd\x58\x85\xa6\x3e\x0c\xac\x0b\x53\xde\xed\xda\x7c\xd5\xf7\xd3\x38\x0d\xc5\xee\xff\x6b\x86\x4c\xe6\x55\x3d\x4e\x79\x39\x8e\x97\x0e\xd6\xd6\x1d\x2b\xc7\x31\x81\xba\x9b\xc2\x66\xa8\xa7\x87\x65\x32\x6e\x0b\xe9\x54\x86\x4f\xdb\x17\xea\xc3\xdb\xa7\xbf\x5b\x57\xbf\xdb\x7e\xdf\x54\x87\x1f\xf7\xdb\xf5\x9b\xbf\xff\x6a\x8a\xfd\xaf\x6e\x7a\xe3\xd5\xdb\xe1\x1f\xeb\xe9\xfd\xf3\xd5\xf0\xec\xc5\x7f\x5e\xff\x8a\xfd\xd3\xfe\xf7\x87\x46\xfc\x72\xf8\xcd\xbc\x7f\xf9\x56\x26\x50\x0e\xfd\x38\xf6\x43\xbd\xa9\xbb\x65\x52\x74\x7d\xf7\xd0\xf6\xfb\x31\xf9\x6c\x53\x75\xd9\x77\x09\x4c\x0f\xbb\xb0\x4c\xea\xb6\xd8\x84\x7c\xd7\x6d\x4e\xfb\xcb\xd7\xc5\x81\x06\x30\x6a\xbb\x7d\xb2\xc8\x67\x27\x2f\x56\x7d\xf5\x10\xf5\x54\xf5\x01\xca\xa6\x18\xc7\x65\x52\xf6\xdd\x54\xd4\x5d\x18\x60\xf7\x90\xa9\xb8\x0c\x40\x8c\x4a\x18\x4e\x63\x76\xab\x4c\x42\xbb\xca\x14\xac\xfa\xa1\x0a\x43\xb6\xea\xa7\xa9\x6f\x8f\x83\x01\x16\xc5\x67\x8e\x1d\xfa\xa9\x98\xea\xbe\x2b\x1a\x56\xf7\xc9\x49\x4d\x95\xad\x9b\x70\x0f\x45\x53\x6f\xba\xac\x9e\x42\x3b\x66\x65\xe8\xa6\x30\xc0\x14\xee\xa7\xac\x2a\x86\x0f\xc7\xa7\x50\xf6\x43\x54\x90\x75\x7d\x17\xce\xeb\x00\x2c\xc6\xc3\x06\xee\xdb\xa6\x1b\xe7\xc5\x6e\xf2\xfc\xee\xee\x8e\xdd\x49\xd6\x0f\x9b\x5c\x70\xce\xf3\xf1\xb0\x39\xaf\xd8\x86\x4c\x24\x30\xf4\x4d\xf4\xd2\x26\x81\x43\x18\xc6\xba\xef\x96\x09\x32\x4c\x66\x45\x37\xf7\xe4\xd5\x2f\xa9\x43\xef\x7d\x1e\x7b\x4f\x43\xc7\xc3\xe6\xfd\x65\xe5\x28\xb1\xb2\x6f\xe7\xa7\x04\xee\xea\x6a\xda\x2e\x13\x29\x12\xd8\x86\x7a\xb3\x9d\xe2\xf3\x6d\x34\xfa\xcb\x7d\x70\xa8\xc3\xdd\xd3\xfe\x7e\x99\x70\xe0\x80\x52\x33\x65\x8c\x31\xe7\x27\xfb\xb9\xc9\x75\xb5\x4c\x5e\xd3\x6a\xaf\x0f\x1b\xe4\xc8\x09\x83\x1f\xc6\xb2\xd8\x85\x9b\x70\xbf\xeb\x87\x29\x5b\xd7\x4d\xe8\x8a\x36\x2c\x93\xfc\xdf\x7d\xb3\x6f\xc3\x98\xff\xd0\xf7\x9b\x26\x3c\x1f\xea\x43\xc8\x5f\x6f\x8b\x21\x54\x50\x91\x30\xe6\xcf\xfa\xb6\xdd\x77\x75\x19\x9d\x3d\xe6\x4f\x87\xa2\xab\xea\x6e\x93\x7b\xff\x3c\x8c\xf5\xa6\x1b\x29\xd1\x7a\x78\xd6\x77\x53\x18\xa7\xfc\x15\x19\xbe\xed\xf7\x63\x98\xdb\x33\x78\x5b\x77\x5d\xdd\x6d\x60\x1e\x9e\xff\xeb\x1c\x78\x78\xfd\xfb\xbe\x18\x42\x84\xe0\x23\x1b\xef\xab\x5d\xbd\x4c\xbc\x79\xdc\xf3\xf0\xb8\xe7\xda\x01\xf0\x97\x52\x05\xb7\xf6\x21\x05\xc1\x05\x66\x5c\x67\x42\xfd\x35\x81\xb1\xaf\xea\x5d\x5f\xd5\x37\x55\x5f\xce\x9b\x7f\x64\x09\x5c\x8c\x67\x11\x23\x73\x48\x4f\xcb\x7c\x02\x80\x53\x63\x84\x01\xe9\x1b\x77\x45\x19\xc6\xfc\xd4\x7e\xc6\xc3\x71\xd9\x0b\x24\x8e\x0d\x6c\xec\xf7\x43\x19\xd6\xfd\xb0\x09\x91\x59\x9e\xbf\x79\x7e\xee\xcc\x38\xab\xa6\x2a\xf9\x1a\x1c\x9f\x61\xf7\x87\xc3\x2e\xf9\x41\x19\x72\x72\x05\xd9\x5d\x11\xbe\xae\x40\xf3\xa8\x0f\x39\xf7\x09\xec\x8a\x4d\x28\xfb\xa6\x1f\x96\xc9\x9f\xd7\xf1\x2f\x39\xa6\xfa\xa9\xd5\xc4\xbf\x53\x6b\xbf\x2b\xca\xc8\x7a\xc8\xae\x11\x48\x6a\xc6\x6d\x51\xf5\x77\xcb\x44\x7c\xd6\x7e\x9e\xc2\x1f\x4d\x29\xb7\xa1\xfc\x10\x86\x55\x5f\x0c\xd5\x32\xb9\xee\xad\xfa\x72\xdf\x86\x6e\xca\xf6\x5d\x3d\x51\x3e\xb7\x09\x8c\xdb\xfe\x6e\x33\xd0\x96\xd6\x45\x33\x86\x04\x8e\x7d\xbb\xfb\xab\x89\x1f\xfb\xbe\xa5\xa5\xac\x56\x5a\x0b\x65\xaf\xba\xca\xfb\x65\x22\xbd\x66\xda\x3b\x2b\xaf\xdb\x1f\x96\x89\x40\xc3\x8c\x53\x9f\xb4\xdf\xd5\x5d\xd5\xdf\x65\xc7\xfc\x45\x89\xe2\x71\xe7\x29\xa3\x91\x0b\xfb\xb8\xf7\x7e\x99\x28\xc9\x1f\xb7\xd3\x82\xfa\x71\x73\x5b\xdc\xd7\x6d\xfd\x31\x7c\xe6\x8b\x72\x3f\x0c\xe4\x8a\xa6\x78\x08\xc3\x32\x89\x3f\x98\xdc\x2e\xf2\xc7\x01\xff\x04\x0f\x55\x58\x8f\x17\x04\x3c\x0f\xeb\x11\x39\x77\x34\x91\x7a\x3e\x19\x3a\x57\xcf\xab\xcc\x79\x55\xac\xae\x8b\xea\x79\xe0\xe6\x62\x56\x53\xac\xa8\x1e\xbd\x22\x73\x00\xaf\xec\xdd\x0c\xfd\x7e\xd7\xf6\x55\x38\xda\x7a\xc5\x5d\x3f\x20\xe7\xf6\x13\xd4\xce\x3a\xaf\xfb\x4d\x02\xb1\x70\x2f\x93\xaa\x1e\x77\x4d\xf1\x70\x53\x77\x4d\xdd\x85\x04\xa6\xa1\xe8\xc6\x75\x3f\xb4\xcb\xa4\x2d\xa6\xa1\xbe\xff\x0b\x32\xe7\x1d\xf7\x0e\x53\x9e\xf2\x34\xbb\x88\x19\x2a\x64\x4e\x4a\x2e\x52\x2d\x24\x13\xd6\x58\xf7\xd7\xcf\x16\x06\x58\xec\x8a\x69\x0b\xd5\x32\x69\xc1\x7b\xe6\xa4\x73\xa9\x10\x8e\x29\x6d\x15\x70\xc6\x85\xf2\x69\xc6\x19\xe7\x12\x38\x33\x5c\xbb\x54\x32\x2e\x1c\x48\x66\x25\xea\x14\x2d\xf3\x46\x23\x6c\x81\x06\x09\xae\xe0\x00\x9c\x79\xc5\x1d\x34\x90\x49\xc6\xad\x36\xa9\x60\x9e\x1b\x1a\x33\xcb\x70\x00\xc5\x04\x0a\x49\xb3\x04\x13\x8e\x0b\x68\xc0\x32\xae\x14\xa6\x86\x39\xe7\x04\x1c\x40\x30\x21\x8c\x84\x92\x14\x2b\x29\x91\xac\x40\xd4\x48\xb2\xd3\xc2\x92\x2c\x9c\x92\x90\x21\x13\xca\x45\x59\xa3\xd2\xf0\x0a\x9c\x63\xce\x29\x9f\x0a\xad\x99\x50\x12\x49\x09\x32\x6d\xa5\xa4\x41\x9e\x1b\x47\xeb\x6a\xa5\x54\x4a\xbf\x4e\xf9\x8b\xac\x98\xe2\xe8\xe1\x00\x19\x5a\x86\xce\x58\x28\x41\x90\x5b\x68\xaa\xf2\x12\x0c\x53\x5a\x59\xf2\xb3\x71\xda\x01\x72\x66\x8d\x71\x34\x51\x48\x25\x80\x33\x27\xbd\x99\x07\x1b\x40\x66\x8d\x54\x24\x39\x85\x0e\xc4\xec\x34\x32\xc2\x08\x7f\x8e\xf1\xba\x6e\x9a\x9b\x3f\x73\x61\xab\x72\xf5\x1d\x09\xd9\x91\x2f\x6e\x70\x16\x87\x7d\x13\x6e\xba\xbe\xfb\x18\x86\xfe\xbb\x71\x1a\xfa\x0f\x51\x0c\x57\xa8\xfa\xb9\x98\xb6\xc8\xb9\x26\x68\x53\x44\xff\x20\xcc\x28\x91\x69\xaf\xe5\xd1\x3f\xc2\x41\x86\x8e\x39\x54\x36\x45\xce\x9c\x51\x38\x7b\x5d\x4b\x6b\x53\xce\x24\xb7\x86\xfc\x87\x68\xd2\xe8\x62\x41\x92\xe5\x04\x38\x66\xb8\x8b\xce\x12\x0c\x15\xfa\x18\x46\x21\x8c\x49\x33\xcb\xb8\xb1\x66\x8e\xb0\xf4\x5a\xd3\xa0\x18\xf5\x08\x03\x14\xc2\xcf\x00\xa1\xa7\x34\x93\x4c\x78\xf4\xb4\x28\x1a\x1d\xbd\xa7\xb5\xa6\x71\x48\x81\x46\x4d\x20\x33\x31\x12\xca\xa7\x9c\x39\xe7\x1d\x28\xe6\xad\xf7\x29\x32\xa9\xc0\x32\x25\x84\x99\x9f\x49\xa7\xb7\x29\x07\xcd\xac\x9d\x95\x59\xc9\x1d\x58\xe6\x8c\x8c\x71\x53\x8a\x60\x8a\x96\x19\x23\x1d\x94\xc0\x53\x64\x0e\x2d\xc4\xb8\x58\x42\xb8\xf2\x04\x34\xc2\x04\xa6\x11\x11\xe6\x5b\x04\x4b\x7d\x4d\xb0\xd0\x33\x81\xda\xa5\x22\x46\x4d\x9d\x12\xc2\x44\x18\xa1\xf6\x73\x42\x38\x11\xd3\x54\x4a\x17\xa3\x23\xa5\x88\x80\xd5\x52\x59\x92\xb9\x9b\x65\x65\xa5\x8c\xc1\xc2\xc8\x0f\x8c\x2b\xe7\xe6\x28\x98\x28\x1b\xa3\x74\x0c\x3d\xe7\x71\xbc\xe4\x4a\xc5\x04\x73\x5e\x44\x47\x2a\x1e\x73\x45\x2a\xe5\x68\x3c\x7a\xee\x8e\xb9\xcf\x29\x53\xa8\x2b\x66\x07\x67\xde\x3b\x84\xcc\x30\x2e\x45\x4c\x33\xae\xa4\x86\x8c\xd2\xc5\xe9\x38\xd7\x71\xa3\x29\x5d\x4c\x0c\x91\xd1\x46\x53\xba\x58\x4a\x1e\x64\x8a\x2b\x49\xe9\xe2\x49\x19\x71\x84\x95\x80\x4c\x79\x11\xcd\x14\xde\x23\x68\xe6\x9d\x8a\x89\x27\xd1\x78\x40\xcd\x94\xc5\x2b\x99\x71\xef\x75\xca\x89\x48\xa4\x11\x29\x67\x5c\x71\x03\x92\x29\x2e\x49\x42\xa1\x2c\x34\xc0\x99\xe5\x56\xa6\x9c\x29\xee\x2d\xc4\x7d\xa4\x33\xdd\x11\x91\xa2\x4c\x49\x8f\xb0\xa0\x98\xb4\x4a\xa5\x82\x69\xa1\x60\x1b\x07\x2a\x68\x00\x99\x24\xe0\x11\x09\x28\x0d\x25\x10\xcd\x08\x95\x12\xcb\x78\x84\x19\x40\x44\x31\x56\xc0\x05\x4d\x92\x28\x10\x99\x9f\xd1\x47\xe0\x77\x22\x45\x66\x84\x82\xcc\x31\x25\x54\xa4\x4c\xf4\x14\x3a\xc5\xbc\xe0\x7a\x4e\x3c\xf9\x2d\x40\x28\xbf\x0a\x84\x94\x20\xa9\x40\xc7\xac\x98\xe9\x41\x51\xc6\x58\xf2\x8e\x25\x08\x5a\xa6\x9c\x25\xf7\x78\x2d\xe3\x2e\x8c\x52\x3a\x95\xcc\x6b\x35\xa7\xb5\xd7\x94\xb8\x68\x85\x24\x51\x7a\x4f\xec\x21\x8f\x68\xf3\xce\x9e\xa9\x25\x3a\xff\x18\x82\xc7\x82\xfd\x2a\x01\xa3\xc7\x08\x92\x84\x71\xa2\x5c\x4a\x91\x23\xf4\x39\x57\x29\x32\x2b\xc9\x12\xc9\x04\x4a\x4f\x11\x42\xae\x66\x53\x74\x04\x03\x7a\x1d\x39\xcf\x5a\xc2\x8a\xe3\x2e\xaa\xb2\x4a\x13\xc9\xa0\x55\x08\xfc\x13\x1b\xd5\xff\x26\x39\x1f\x25\x6d\x71\xd6\xa0\x23\x4d\x71\x27\x74\xe4\x17\x47\x35\x94\x69\x69\x90\x8c\x51\x54\x01\x91\x79\x8e\x82\x52\x47\x6a\x4e\xe8\x71\x5a\xcb\xe8\x52\xa3\x4c\x4a\x4c\xa9\xc5\x4c\xb9\x86\xeb\xc8\x5e\x94\x4c\x68\x08\xbd\xde\x22\x12\x9b\x2a\xaf\x1c\x5c\x97\x34\x2d\x09\xac\xc4\xf2\xdc\xa7\x59\xa4\x79\x8e\x47\xbc\x1e\xcb\x22\x72\x01\x92\x69\x44\x7f\x16\x35\xe3\x4e\x63\xca\xa1\xa1\x1a\xe8\x85\x23\x94\x5a\x94\x31\xa7\x34\x71\x2f\x11\x03\x65\x8a\x75\xf3\xae\xe4\x0c\x68\x94\x46\x9e\x22\xa0\x99\x35\x8e\x22\x20\x89\x00\xe8\xbc\xc0\x1d\xf9\x54\x68\x75\x8e\xdc\x31\x6a\x31\x4b\xe7\x40\x70\x34\x6e\x96\xbe\x05\xe8\xc5\xd7\x80\x9e\x3b\xc6\x2d\xaa\x54\x68\xda\x3c\xea\x58\xb9\xac\x8a\x05\x2f\x3e\x44\xea\x3b\x36\x7d\xfc\x16\x66\xe2\x57\x55\x73\xcb\xa4\x93\x36\x15\xc2\x32\xa1\xad\xb8\x40\xc2\xc7\xec\xf2\xd6\x39\xc2\x84\x46\x13\x13\x40\x6b\xa9\x23\x28\x84\x25\x06\xcb\x84\x60\x5c\x5a\x95\x66\x28\x98\x15\x11\x52\xf1\xb4\xa4\xdd\x8c\x03\x21\x68\x93\x5a\xce\xe7\x18\x8f\x68\x28\xa6\xc8\xbd\x4a\x65\xc8\x2e\x2a\x84\x4c\x67\x0d\xe2\xa4\xc1\x52\xd4\x3d\x8a\xf9\xb8\x45\x35\x8c\x19\xee\xe5\x49\x3a\x9a\x70\x00\xa1\x99\x52\x5a\x9c\x2b\xb1\x97\x11\xca\xde\xa6\x64\xb5\xf4\x84\x64\x6d\x55\x9c\x20\x0c\x81\x31\xae\x37\x2f\x17\x69\x97\xaa\x8a\x8b\x89\xab\x95\x02\x02\xa9\xa0\xb5\x8d\xc3\x48\xc2\xda\x9c\x84\x99\x07\x52\x1e\x4f\x66\x26\x22\x5d\x08\x63\xe3\x20\x1d\x4b\x9c\x71\xf1\xec\xfa\xa9\x57\x4e\xd4\xae\xcc\x7c\x82\xb4\xb3\x5a\x61\xd2\x98\x86\x68\xcf\x62\xb4\x51\xc1\x47\x68\xc9\x0c\x8f\x36\x45\xcd\xac\x43\xa2\x7c\x4f\x07\x0e\x13\xb7\x29\x98\x12\x32\x1e\xab\x24\x17\xe4\x0a\x13\xeb\xb0\xf4\x5e\xa6\x9a\x39\x67\xfd\x75\x68\xce\x36\x10\x93\xf2\xe8\x56\x6e\xd0\x91\x28\xd0\x12\xbf\x20\xba\x18\x6c\x29\xe2\x99\x0d\xad\x92\x51\x01\xf3\x64\x95\x62\x5c\xeb\xb8\x80\xf0\x56\x90\x91\x48\x61\x8c\xfa\xf8\x71\x53\x5c\xfa\xc8\xbe\xf3\xf9\x94\x5b\x63\xa2\x7a\x21\xed\x7c\xf2\xf6\x48\x27\x6b\xc5\x1c\xd7\x22\x15\xda\x31\xed\xb9\x99\x4b\x3e\xf7\x73\xd1\x16\xdc\xfb\x48\x63\x5c\x46\xc4\x29\x63\xe4\x45\xd6\xa7\x93\x7d\xe6\x09\x45\xf3\xf1\xcf\x28\x8c\xa7\x03\xa3\x51\xc2\x45\xf4\x82\xbb\xe3\x48\x23\x70\x46\xb4\x20\x56\xa6\xba\x2e\xb9\x8c\x8e\x36\xd6\xda\xb9\x9e\xcb\xa8\xdd\x0b\xbc\x60\x23\xbb\x60\x91\x53\x05\x8f\xe0\xe5\x5a\xd2\x09\x1d\x9d\x89\xd8\x46\xe2\x59\x7a\x8b\xc0\x18\x79\x54\x9e\xbc\x2e\x99\x50\x3c\x66\x08\x57\x5c\x03\xbd\xbc\x28\xa4\x52\xe6\x5c\x8c\x1d\xa3\x33\x29\x05\x40\x78\x9a\xac\x8f\xa7\x09\xef\x80\xb3\xf9\xc4\x2c\x38\x9a\x2b\x08\xcd\x96\xcc\x2f\x12\xdc\x1b\x2a\xf5\x02\x05\x99\x2e\xbd\xa3\x22\xa9\x2c\xd7\x27\x89\xf6\x81\x6e\x06\x8b\xf3\x36\xda\xe3\x1d\xd2\xa1\x14\xbd\x14\xdf\x86\x67\xf8\x97\x79\x66\x91\x6f\x3e\x79\xf1\xbd\x16\x17\xf9\x78\xd8\xdc\xce\xff\xaf\x2e\x28\x77\x45\x77\xba\x7e\x5c\x8f\x99\x4a\xe6\x7b\xeb\x78\x6d\x1d\xba\xe9\x78\xd5\xb6\xc8\x69\xdc\xf9\xfe\x34\x2f\x8e\xf7\xae\xf9\x7c\xf1\x7a\xfb\x64\x16\xdb\xa2\x3e\x2b\xdb\x65\xfa\x78\x07\xbb\xc9\x9a\x7a\xb3\x9d\x60\xe8\xf7\x5d\x15\xaa\x4c\x5e\x2e\x62\xbf\x74\xb1\x9b\xad\x9b\x7d\x5d\xc1\xee\x21\xd3\xd7\x37\xa9\x5b\x3c\xdf\xcb\xce\x2f\xd8\x99\x86\xf5\x5d\xb6\xea\x9b\x2a\xb9\x9d\x2f\xd9\x3f\xb5\x19\x9e\xf5\xed\xae\x09\x53\x58\xe4\x5b\xbc\x52\xb4\xbb\xac\xd8\x64\x6d\x95\x39\x98\xf7\xfd\xae\xdf\xc3\xb6\x38\x04\x18\xf7\x65\x19\xc6\x71\xbd\x6f\x9a\x07\x68\xfa\xcd\x26\x54\x50\x77\x70\x57\x4f\xdb\xf9\x36\xff\x4f\xf0\xae\xdf\x0f\x50\xc4\x61\x30\xf5\x1f\x42\x07\xdb\x62\x84\x55\x08\x1d\x8c\x53\x3f\x84\x2a\x5e\xf5\xef\xc7\x40\x13\xc7\xfd\x6a\x0c\xbf\xef\x43\x37\xc5\xcb\xff\xb2\x68\x9a\x11\x8a\xae\x82\xbb\xba\x69\x60\x15\xa0\x38\x14\x75\x53\xac\x9a\x10\x67\x4d\xdb\x00\x5d\xb8\x9f\x80\x8e\xad\xfd\x7e\x18\x19\x2d\x07\x6d\xf1\x00\x5d\x7f\x07\x65\xd3\x8f\x01\xa6\x6d\x3d\xc2\x7c\x01\x13\x55\x0d\x61\xda\x0f\x1d\x4c\x7d\x9c\x3e\x85\xa1\xad\xbb\xa2\x61\x8b\x7c\x77\xb5\xf3\xd5\x7e\x9a\xfa\x73\x80\x56\x53\x07\xab\xa9\xcb\x76\x43\xdd\x16\xc3\x43\x7c\x6e\x36\xa7\x4b\xfa\x79\x6c\x72\xfb\x2c\x2e\xf7\x36\xae\xb4\xc8\xe7\xd6\x0b\x0e\xaa\xfa\x70\x42\x02\xc5\xfe\x84\x83\x75\xdf\x4f\x57\xd7\xf1\x53\x26\xa1\x9d\x32\x35\xdf\x96\xb7\xfb\x29\x54\xa7\x9b\xf9\xa9\xdf\x9d\x83\xfc\xdf\x45\x15\x66\x2f\xff\xbf\x71\x57\x54\x61\xfc\x0e\x56\x0f\xf0\xd9\xf5\xce\x71\xb5\x79\x85\xf8\x71\x60\x36\x82\x9e\xc6\x72\xa8\x77\x13\x8c\x43\xf9\x7f\xf9\x66\xf2\xfe\xf3\x4f\x26\xef\xbf\xf8\xc5\xe4\x97\xff\xfa\xc7\x74\xf8\x61\xdb\x0e\xfe\x3f\x3f\xbd\xdc\xbd\x34\xef\xfe\xbd\x9f\x7e\xf8\x9b\xf8\xe5\xa7\x1f\xfd\x9b\xbf\xfd\xd6\xfd\x53\x7d\xf8\xf8\xfd\x3f\xf1\x5f\xd3\x8f\xf2\xe3\x8b\xef\x5f\xbc\x1c\xef\xb7\x4d\xfb\xb6\xd1\xf9\xbb\x17\xaf\x0f\xbb\xdf\xf0\x0f\xbe\x98\x2c\xf2\x79\x03\xb7\x4f\x16\xf9\xfc\xe9\x63\x91\xc7\xaf\x4e\xff\x13\x00\x00\xff\xff\x44\x8c\xf4\x2e\x8c\x1a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6796, mode: os.FileMode(0644), modTime: time.Unix(1658332488, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x62, 0xa7, 0x89, 0xb9, 0x89, 0xa7, 0xaa, 0x2, 0x47, 0x8b, 0x1f, 0xe8, 0x45, 0xca, 0x66, 0xec, 0x52, 0x9, 0x3a, 0xdb, 0xef, 0xe, 0x38, 0x32, 0x67, 0xf3, 0xd2, 0x81, 0x7c, 0x19, 0x4d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.png": faviconPng,
	"index.html":  indexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.png": {faviconPng, map[string]*bintree{}},
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
