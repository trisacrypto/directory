// Code generated by go-bindata. DO NOT EDIT.
// sources:
// favicon.png (1.693kB)
// index.html (962B)

package clive

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x9d\x06\x62\xf9\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x30\x00\x00\x00\x30\x08\x06\x00\x00\x00\x57\x02\xf9\x87\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x06\x57\x49\x44\x41\x54\x68\x43\xd5\x5a\x4b\x6e\xdb\x48\x10\x7d\xc5\x66\xb6\x63\xcf\x09\xa2\x39\x81\x6d\xc0\x32\x30\xab\x38\x27\x88\x02\xcc\xde\xf2\x05\x26\xd2\x5e\x8a\xe9\x48\x7b\xcb\x27\x88\xb3\x1f\x60\x92\x13\xc4\x59\x19\xb0\x0c\xc8\x39\x41\xec\x13\x44\xc2\x2c\x2d\x76\x0d\xaa\xc9\xe6\x4f\xa4\x48\xea\x63\xcc\xf4\x26\x81\x4d\x36\xeb\x55\xd5\xeb\xaa\x7a\x6d\xc2\x16\x97\xea\xdf\xb6\x89\xe9\x61\x3e\x6c\x5e\x6f\xeb\x33\xb4\xad\x8d\xe1\xdd\xee\x3b\x3e\x7d\x95\xfd\xb5\x72\x7f\x83\x77\x30\xdd\xc6\xb7\xb6\x03\xc0\x9b\xec\x3a\xbe\x3f\x01\xb8\x21\x46\x33\xf0\x99\x07\xcd\xb7\xff\x0b\x00\x4e\xef\xf6\x1d\x88\x3c\x80\x1e\x41\xfc\xd9\x18\xcd\x68\x03\xc4\x0e\xf3\xe9\xa6\xd3\x69\x63\x11\x70\x7b\xe3\x63\x4d\xf4\x11\x60\x22\xa6\x8e\x3f\x3c\x0c\x8c\x0f\x97\xd3\x1f\x77\x00\x78\x0c\x4c\x58\xcd\x4f\xe1\xfd\xfe\xb0\x89\x88\xac\x0f\xc0\xbb\x69\x90\xef\x7e\x24\xe0\x00\x84\x91\xfe\xd0\xf4\x0a\x0d\x93\xd4\x9a\x3f\x8d\x40\x74\x02\x60\xa4\x95\x7b\xbe\x2e\x37\x56\x07\x60\x8c\x99\xbf\x03\xc1\x03\xf3\x27\xed\xbe\xe8\x44\xc6\x78\xb7\xfb\xe4\xd3\x99\xe4\x7d\xe0\x79\xda\xd3\x4a\x75\x93\xbf\x57\x3e\x8d\x18\xd8\x23\xa2\x8e\xff\xe1\xf0\xd3\xaa\xd1\x58\x09\x80\x7a\x7f\x77\xc2\xcc\x23\x02\xbe\xfb\x8a\x3b\xf0\x8e\xee\x8d\x01\x01\x79\x2f\x00\x6e\x03\x98\xe9\x41\x73\x37\x4c\x9d\x0b\x00\x53\x30\x46\x7a\xd8\x3c\xb7\xc6\xaa\xde\x5d\x8b\x89\x47\x60\xfc\x74\x80\xee\x2a\xfc\xa8\x05\xc0\xe4\x39\x70\x01\xc2\xaf\x04\xf6\xfc\xc1\xd1\x55\x26\xc7\xcf\x00\xec\x1a\xe3\x15\x1f\x5b\x60\xce\xfb\xbb\x11\x98\xdf\x05\xcf\xd2\x43\x96\xcc\xce\xfb\xb1\x07\x46\x87\x81\xaf\xac\xe6\xdd\x3a\xfc\xa8\x06\xc0\xbb\x69\x38\xfe\x8b\x33\x80\xdf\x9a\x3c\x77\xdc\x91\x4d\x87\x04\x79\xcd\x91\x99\x35\x3e\xf2\x76\xff\xb6\xcd\x10\x92\x07\x8b\x81\xeb\x14\x99\xe5\x1b\x73\xe5\x19\x7e\x30\x3c\xed\xba\x97\x55\xf8\xb1\x1c\x40\x9c\xe7\x1d\x30\x7f\xd1\xae\xef\x45\xde\x89\xc9\x7b\x9c\xc8\xdf\x94\xe7\xb3\x79\x2d\x95\x39\x09\x22\xfc\x7d\x8a\xcc\xe2\x10\x26\x39\xad\xe8\x25\x11\xbc\x32\x7e\x14\x02\x08\xf2\x13\x92\xbb\x33\x87\xb9\x13\xe5\x67\x92\xbc\x69\x0b\x97\x1a\x5f\x14\x89\xf0\xe7\x53\x30\x7b\x7a\x78\x74\x99\x79\x4e\x88\x3e\x61\xc5\xdd\x88\x67\x19\xaf\xe4\x02\x08\x3d\x35\x12\x5a\xea\x41\x53\xfe\x35\x2b\xfc\xb9\x80\x92\x3c\x4f\x2f\xc6\x3d\x1c\xfa\xa6\x3f\x1c\xca\x79\x0f\xf4\xc7\x07\xd1\x03\x83\xe6\xc4\xfc\x3f\x38\x9d\x2e\x08\xd8\x2f\xda\x23\x45\x66\x71\x96\xf6\xe5\x94\x3b\xd1\x8a\x5f\xe7\x81\x58\x04\x60\x4e\x92\xf9\x0f\x87\xf1\xd6\x7a\x3d\x41\x5e\xf9\x70\xe1\x22\xe0\x9b\x3f\x68\x9a\x94\x72\xfa\x77\x97\x00\xff\x09\xe0\x1f\x3d\x68\xfe\x22\x3f\x0b\xf8\x02\xd3\x1f\x2d\x5b\xa6\xf5\x48\x90\xd9\x90\x5c\xe3\x8d\x1e\x36\x63\xa7\x84\x1b\x2c\x00\x08\xbc\xec\x74\xf4\xe0\xd0\x18\x5b\x90\xb7\xb9\xdf\xdf\x14\x00\x9b\x56\x91\xd7\x03\xa7\xfe\xd4\x8a\x0f\xb2\x51\x58\x00\x20\x68\x89\x71\x1c\x7b\x72\x2c\x5d\xe4\x4e\x89\xd3\xa6\xd9\x10\xab\xde\xf8\x0f\xfb\x8e\x3f\x6c\xfe\x95\x7c\xdf\xe9\xdd\x5e\x85\xd5\xb8\x2c\x12\x5f\x78\xd0\x6c\x85\x11\xbd\x4f\x71\xb1\x28\x02\x29\x00\x41\x4b\x1c\xe4\x6f\xf9\x9a\x12\xb8\x9b\xac\x0d\x79\xaf\x54\x35\xde\xbe\xab\x07\x4d\xe3\x64\xd5\x1f\x5f\x13\xc3\xcb\x16\xbb\xa5\x11\xa8\x9a\xb3\xf6\x63\xc9\x14\xca\x33\x3e\xac\xbc\x7f\x97\xfb\x22\x7e\xe2\x59\x01\x98\x9e\x68\x78\x24\x6d\x44\xee\xaa\xeb\x10\xd9\xe4\x79\x01\x00\xdd\xe4\xb1\xbb\x80\x22\x24\xe3\x7f\x36\x02\x0e\xe3\x75\x59\x43\xe6\xf4\xc7\x32\x07\xbc\xac\x0a\xe2\x59\x23\x60\x3f\xb6\xcc\x38\xea\x8f\x3f\x13\xf0\x66\x3b\x00\xe4\xd4\x99\xd3\x47\x22\xcc\xe4\x18\xad\x97\xb3\xf4\xdd\xd6\x8e\x65\xc6\x85\x9d\xa7\x74\xad\x95\x56\x32\x02\xcc\xd8\xd1\x2e\x9f\x26\x6b\x41\x74\x0a\x85\xb3\xac\x69\x1b\xec\x69\x52\x0b\x40\x09\x81\xad\xb5\xb5\xf6\xcc\x90\x98\x81\x57\x66\x1f\xe6\x8e\xed\x9b\x22\x00\xe1\xc6\x32\xc7\xee\xac\x02\x80\xc0\xa7\x65\x35\xc0\x7c\xbc\x26\x91\x53\x11\x08\x00\xcc\x1c\x46\xcb\x72\x2d\x5d\x07\x4c\xe1\x72\xae\x08\x3c\xad\x9b\x42\x79\x65\xbe\x28\x47\xea\x10\x39\x0d\x80\x76\xb5\x7a\x6a\x25\x07\x9e\x8d\x15\xb2\x2a\x04\x8e\x0a\x5e\x0d\x22\x3f\xcb\x29\x54\x56\x81\xb3\x91\x48\x10\xf9\x91\x80\x07\x26\xc4\xd2\xa3\xe6\x06\xc8\xd9\x07\x78\x6f\xed\x42\x16\xe6\x6b\x1b\xcc\xfb\x20\x92\xa6\x2a\xbf\xa9\x23\xba\x8c\xe6\x80\x2a\x67\x8b\x77\xd3\x00\xd4\x6e\x2c\x06\xdc\x34\xe0\xab\xa0\x36\xa8\x17\xdf\xcd\x28\xe9\x4d\x76\x95\xff\xd4\xb2\xbc\x5a\xa9\x17\x82\x7c\x48\x36\x1e\x1c\x7d\x33\x7b\x87\xad\xb6\xf5\x4e\x94\x12\x55\x09\x6c\x5f\x08\x8e\x6b\xa9\x05\x2d\x90\x19\x6e\x32\x8b\xa4\xd8\x5d\x6b\xa5\x2f\x2d\xc8\x95\x00\xa4\x8f\x3c\xba\x72\x98\x3f\x09\xfb\xc3\x41\x7e\x14\x85\x39\xa7\x4f\xcf\x0b\x84\xbc\xe7\x13\xce\x08\x48\xce\xd1\x4b\x63\xb6\x16\x07\x42\x85\x39\xd5\x4e\x8b\x9a\xa0\x18\xe7\x02\x44\x22\xa2\x41\x2d\xdb\xb3\x17\x5a\x12\xab\x1a\x85\x8d\x5e\xd1\xbb\xeb\x01\x30\xa3\x61\xfe\x40\xb3\x20\x8b\x64\x2c\x08\xc6\x50\xde\x63\xa2\x56\x1d\x8f\x27\xb7\x61\x20\x1e\x68\x7a\xe3\x49\x9e\xf8\xb5\x78\x8c\x8a\x14\xc8\x38\xb1\xf3\x67\xc9\x48\x19\xab\x09\x61\x0d\xc9\xf2\xa3\x0a\xa7\x0b\x9e\x89\x55\x8e\x3a\x23\xa5\xad\x94\xc9\xce\x32\xe4\x82\xa8\x70\xb9\x5d\x64\x30\x84\xbb\xa7\x6a\xee\x1f\x33\xb1\x3c\x57\x36\x82\x2e\xc5\x65\x8e\x65\x35\x6f\xdb\x82\x15\x1c\xbb\xd4\xca\xeb\xb5\x96\xc9\x2a\x17\x59\xe1\xd5\x4a\xe4\xb9\x06\x32\xee\xb5\x3b\x37\x97\x18\xca\x77\xaf\xa2\xbe\xa5\x5e\x08\x1e\x1d\x46\x3b\x47\x83\xea\x26\xa5\xca\xe4\x96\x25\xc2\x16\x8b\x21\x13\x4b\xda\xa8\x97\x09\xb4\x9a\x50\xeb\x4c\x59\x98\x4e\x29\xed\x48\x0d\x91\xfa\x51\xd6\xff\xcf\x16\x34\x28\x23\x20\x43\xa4\xfa\x99\x56\xba\x5d\x4b\xd8\x8a\x4c\x32\xc2\xd2\x5c\x38\x71\x06\xd0\x95\x56\x4f\xe7\x49\x69\xb1\xd8\xd3\xf4\x00\xd6\x23\xed\xfa\x5f\xcc\xf3\xde\x4d\xc3\x9d\xbb\x0d\x2d\x67\x3e\x2d\x8a\x62\x49\xad\x35\x21\x7e\x1d\x10\xb8\x53\xd6\x20\x56\x16\x77\xc9\x77\x45\x4e\x7f\x55\x28\x91\x17\x79\x59\x14\x3b\x69\x15\x18\x53\x4d\x1c\xb7\x0c\xb6\xe2\x46\xc5\x2d\x21\xcd\x13\xce\x53\xa0\x96\xa4\x61\x35\x00\xe1\x06\x71\x01\xc3\x0e\x31\xba\xc9\x6b\x24\x2b\x91\x57\x20\xf0\x63\xf6\x0a\xca\xe9\x8d\xcf\x40\xe8\x04\xf7\x0d\x31\x79\xab\xd0\xa7\x16\x00\xbb\x61\xfa\xbe\x2b\x21\xbc\xa6\xaf\x90\xb2\xdf\x9f\x65\xaf\xa0\x62\x01\x99\x29\x45\xde\x2a\x96\x87\xcf\xac\x04\x20\x87\xcc\x0b\x12\xb9\x1f\x78\x34\x98\x7d\xcd\x15\x54\xae\x34\x2f\x5a\x67\x4a\x40\xae\x61\xbb\x79\x74\x75\x00\x51\xee\xde\x34\x42\x32\xef\x65\x25\xf2\x05\x63\x82\x82\x24\xf3\x70\x07\xd2\xc1\x3a\xca\xab\x72\x89\xb1\x0c\xd4\xfa\x00\x52\xfc\xc0\x55\xd1\x7d\xb0\xbd\x3f\x5e\xb8\x57\xab\xeb\xf2\xcc\xf3\x1b\x03\x10\xf1\x23\xbe\xef\x9a\x10\x87\x83\x0a\x51\xbb\xe8\xfe\x78\x4d\xfb\x37\x90\x42\x79\x16\x04\xa9\x22\x37\x97\xa6\x80\x25\x9b\xb2\x75\x0d\xce\xbe\xbf\xf1\x08\xc4\x45\xd0\x28\xdb\xe6\xdc\xd7\xca\x6d\xac\x9b\xeb\x45\xc0\xb7\x07\x20\x9c\xe0\xb6\xfd\xe7\x36\xff\x02\x41\xa8\x8e\x6d\xdd\x91\x3a\xa5\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xaa\x6f\xa0\xf0\x9d\x06\x00\x00")

func faviconPngBytes() ([]byte, error) {
	return bindataRead(
		_faviconPng,
		"favicon.png",
	)
}

func faviconPng() (*asset, error) {
	bytes, err := faviconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.png", size: 1693, mode: os.FileMode(0644), modTime: time.Unix(1658231127, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x4a, 0x3c, 0xe2, 0x15, 0xfa, 0xea, 0x42, 0x57, 0xdc, 0xbf, 0xf6, 0x1a, 0x1f, 0x6c, 0x67, 0xef, 0xf9, 0x35, 0xb9, 0xfc, 0x1b, 0xaf, 0xe6, 0x30, 0xc, 0x86, 0x72, 0x45, 0xf2, 0x6c, 0x4e}}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x51\x6f\xda\x3e\x14\xc5\xdf\xfb\x29\xfc\xf7\x6b\x45\xdc\x14\x4a\xe1\xaf\x04\xb5\xd0\xa4\x4d\x61\xa5\xac\x30\xa0\x6f\x26\x71\x62\xd3\xd8\x0e\xf6\x25\x2d\x7c\xfa\x29\x01\xb4\x69\x9a\xaa\x69\x7b\xf2\xd5\x3d\xf7\x5e\xe9\x77\x74\xec\xfd\x77\x37\x1e\x4c\x97\xcf\x01\xe2\x20\xf3\xde\x99\x77\x7a\x18\x4d\x7a\x67\x08\x79\x92\x01\x45\x31\xa7\xc6\x32\xf0\xf1\x6c\x1a\x36\x3a\x18\x91\x5a\x02\x01\x39\xeb\x0d\x46\x51\xc9\x50\xa3\x81\x6e\xb7\xc0\x2f\xd0\x48\x67\x42\xa1\x54\x1b\x34\x18\x45\xe8\xd9\x68\x59\x80\xf5\xc8\x61\xb6\xda\xca\x85\x7a\x43\x86\xe5\x3e\xb6\xb0\xcb\x99\xe5\x8c\x01\x46\xdc\xb0\xd4\xc7\x1c\xa0\xb0\xff\x13\x12\x27\xca\x59\xdb\x84\xe5\xa2\x34\x8e\x62\x40\x54\x21\xc9\x4a\x6b\xb0\x60\x68\x71\x73\xe5\xb8\x4e\x93\x24\xc2\x02\x89\xad\xfd\x21\x38\x52\x28\x27\xb6\x16\x23\xa1\x80\x65\x46\xc0\xce\xc7\x96\xd3\x66\xa7\xd5\x70\xfb\x32\x68\xbd\xcd\xfb\x9b\xeb\x8e\x58\xf2\x30\x4f\xca\xe1\x96\xa7\xd3\xdb\x59\x9b\x6e\x67\x1d\x98\x76\x5b\x73\xf3\x90\xc2\xfa\x6e\x65\x06\xc1\xe2\x65\xe6\xea\xbe\xde\xec\xf2\xcb\x49\xf9\xda\x5e\x47\xf3\x26\x46\xb1\xd1\xd6\x6a\x23\x32\xa1\x7c\x4c\x95\x56\x3b\xa9\xb7\x16\xff\x1b\xd4\x4d\xaa\x0d\xd0\x77\x66\xb5\x64\x24\xd5\xea\x54\x37\x52\xc3\xd8\x4d\xdb\x71\x1d\xb7\x66\xfc\x49\xfa\x8c\x72\x1f\xd1\xb9\x48\x47\x97\xcb\x30\x74\x37\xf4\x4e\xdc\xea\x8b\xc7\x30\xb3\x92\x5a\x1d\x3f\x12\xb3\xd9\x5e\x8f\x86\xcb\x87\xce\x40\xf7\x83\xc5\xe6\x7e\xb5\xea\xb2\xf1\xf9\x42\x34\x6d\x3b\x9d\xf0\x2c\x9c\x7f\xf9\x53\x4a\x11\x6b\x85\x11\xec\x0a\xe6\x63\x21\x69\xc6\x48\xa1\xb2\x13\x30\x49\x69\x59\x0d\x38\x55\xaf\x77\xe6\x91\x43\x98\xbc\x95\x4e\x76\x28\xce\xa9\xb5\x3e\x06\xf6\x01\x8d\x98\x29\x60\xe6\x70\x5b\x52\xa1\x4e\x62\x5c\xc1\x0a\x75\x94\x10\xf2\x12\x51\x9e\x34\xa3\xdf\x8f\x5d\x84\x3c\xee\x1e\xe3\x57\xa7\xce\x23\xdc\x3d\x2e\x90\x44\x94\xf5\x59\x52\xdd\xad\x2b\x1b\x1b\x51\x00\xb2\x26\xfe\x9b\x9c\xad\x7f\x8d\xd9\xfa\xb7\xfe\x4f\x1e\x1f\xa0\xbc\xe7\xd2\x74\x17\xe3\xa8\x88\xda\xcb\x6f\x5b\xb8\x3f\xbf\x9c\x8c\x87\xdd\xe9\xf9\xab\x7a\x6a\xbd\xed\xc3\x27\xf7\x2b\x0c\x9b\xfb\x20\x0c\x22\xfb\xc1\x73\x39\xcf\xaf\xc8\x32\x78\x29\x8b\x57\xf7\x93\x94\x79\xe4\x00\x50\xf9\x59\x19\x59\xfb\x5a\xfd\xd5\xef\x01\x00\x00\xff\xff\xd6\x1c\xa9\x00\xc2\x03\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 962, mode: os.FileMode(0644), modTime: time.Unix(1658231254, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x5, 0xc4, 0xdb, 0xfa, 0x42, 0xea, 0x65, 0xb5, 0x87, 0xac, 0xff, 0xae, 0x67, 0x93, 0x98, 0x7b, 0x89, 0x30, 0x83, 0x73, 0x41, 0x8c, 0x36, 0x99, 0x2d, 0x5, 0x71, 0x5b, 0x80, 0x40, 0xf1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.png": faviconPng,
	"index.html":  indexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.png": {faviconPng, map[string]*bintree{}},
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
