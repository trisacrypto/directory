// Code generated by go-bindata. DO NOT EDIT.
// sources:
// favicon.png (1.693kB)
// index.html (7.101kB)

package clive

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x9d\x06\x62\xf9\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x30\x00\x00\x00\x30\x08\x06\x00\x00\x00\x57\x02\xf9\x87\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x06\x57\x49\x44\x41\x54\x68\x43\xd5\x5a\x4b\x6e\xdb\x48\x10\x7d\xc5\x66\xb6\x63\xcf\x09\xa2\x39\x81\x6d\xc0\x32\x30\xab\x38\x27\x88\x02\xcc\xde\xf2\x05\x26\xd2\x5e\x8a\xe9\x48\x7b\xcb\x27\x88\xb3\x1f\x60\x92\x13\xc4\x59\x19\xb0\x0c\xc8\x39\x41\xec\x13\x44\xc2\x2c\x2d\x76\x0d\xaa\xc9\xe6\x4f\xa4\x48\xea\x63\xcc\xf4\x26\x81\x4d\x36\xeb\x55\xd5\xeb\xaa\x7a\x6d\xc2\x16\x97\xea\xdf\xb6\x89\xe9\x61\x3e\x6c\x5e\x6f\xeb\x33\xb4\xad\x8d\xe1\xdd\xee\x3b\x3e\x7d\x95\xfd\xb5\x72\x7f\x83\x77\x30\xdd\xc6\xb7\xb6\x03\xc0\x9b\xec\x3a\xbe\x3f\x01\xb8\x21\x46\x33\xf0\x99\x07\xcd\xb7\xff\x0b\x00\x4e\xef\xf6\x1d\x88\x3c\x80\x1e\x41\xfc\xd9\x18\xcd\x68\x03\xc4\x0e\xf3\xe9\xa6\xd3\x69\x63\x11\x70\x7b\xe3\x63\x4d\xf4\x11\x60\x22\xa6\x8e\x3f\x3c\x0c\x8c\x0f\x97\xd3\x1f\x77\x00\x78\x0c\x4c\x58\xcd\x4f\xe1\xfd\xfe\xb0\x89\x88\xac\x0f\xc0\xbb\x69\x90\xef\x7e\x24\xe0\x00\x84\x91\xfe\xd0\xf4\x0a\x0d\x93\xd4\x9a\x3f\x8d\x40\x74\x02\x60\xa4\x95\x7b\xbe\x2e\x37\x56\x07\x60\x8c\x99\xbf\x03\xc1\x03\xf3\x27\xed\xbe\xe8\x44\xc6\x78\xb7\xfb\xe4\xd3\x99\xe4\x7d\xe0\x79\xda\xd3\x4a\x75\x93\xbf\x57\x3e\x8d\x18\xd8\x23\xa2\x8e\xff\xe1\xf0\xd3\xaa\xd1\x58\x09\x80\x7a\x7f\x77\xc2\xcc\x23\x02\xbe\xfb\x8a\x3b\xf0\x8e\xee\x8d\x01\x01\x79\x2f\x00\x6e\x03\x98\xe9\x41\x73\x37\x4c\x9d\x0b\x00\x53\x30\x46\x7a\xd8\x3c\xb7\xc6\xaa\xde\x5d\x8b\x89\x47\x60\xfc\x74\x80\xee\x2a\xfc\xa8\x05\xc0\xe4\x39\x70\x01\xc2\xaf\x04\xf6\xfc\xc1\xd1\x55\x26\xc7\xcf\x00\xec\x1a\xe3\x15\x1f\x5b\x60\xce\xfb\xbb\x11\x98\xdf\x05\xcf\xd2\x43\x96\xcc\xce\xfb\xb1\x07\x46\x87\x81\xaf\xac\xe6\xdd\x3a\xfc\xa8\x06\xc0\xbb\x69\x38\xfe\x8b\x33\x80\xdf\x9a\x3c\x77\xdc\x91\x4d\x87\x04\x79\xcd\x91\x99\x35\x3e\xf2\x76\xff\xb6\xcd\x10\x92\x07\x8b\x81\xeb\x14\x99\xe5\x1b\x73\xe5\x19\x7e\x30\x3c\xed\xba\x97\x55\xf8\xb1\x1c\x40\x9c\xe7\x1d\x30\x7f\xd1\xae\xef\x45\xde\x89\xc9\x7b\x9c\xc8\xdf\x94\xe7\xb3\x79\x2d\x95\x39\x09\x22\xfc\x7d\x8a\xcc\xe2\x10\x26\x39\xad\xe8\x25\x11\xbc\x32\x7e\x14\x02\x08\xf2\x13\x92\xbb\x33\x87\xb9\x13\xe5\x67\x92\xbc\x69\x0b\x97\x1a\x5f\x14\x89\xf0\xe7\x53\x30\x7b\x7a\x78\x74\x99\x79\x4e\x88\x3e\x61\xc5\xdd\x88\x67\x19\xaf\xe4\x02\x08\x3d\x35\x12\x5a\xea\x41\x53\xfe\x35\x2b\xfc\xb9\x80\x92\x3c\x4f\x2f\xc6\x3d\x1c\xfa\xa6\x3f\x1c\xca\x79\x0f\xf4\xc7\x07\xd1\x03\x83\xe6\xc4\xfc\x3f\x38\x9d\x2e\x08\xd8\x2f\xda\x23\x45\x66\x71\x96\xf6\xe5\x94\x3b\xd1\x8a\x5f\xe7\x81\x58\x04\x60\x4e\x92\xf9\x0f\x87\xf1\xd6\x7a\x3d\x41\x5e\xf9\x70\xe1\x22\xe0\x9b\x3f\x68\x9a\x94\x72\xfa\x77\x97\x00\xff\x09\xe0\x1f\x3d\x68\xfe\x22\x3f\x0b\xf8\x02\xd3\x1f\x2d\x5b\xa6\xf5\x48\x90\xd9\x90\x5c\xe3\x8d\x1e\x36\x63\xa7\x84\x1b\x2c\x00\x08\xbc\xec\x74\xf4\xe0\xd0\x18\x5b\x90\xb7\xb9\xdf\xdf\x14\x00\x9b\x56\x91\xd7\x03\xa7\xfe\xd4\x8a\x0f\xb2\x51\x58\x00\x20\x68\x89\x71\x1c\x7b\x72\x2c\x5d\xe4\x4e\x89\xd3\xa6\xd9\x10\xab\xde\xf8\x0f\xfb\x8e\x3f\x6c\xfe\x95\x7c\xdf\xe9\xdd\x5e\x85\xd5\xb8\x2c\x12\x5f\x78\xd0\x6c\x85\x11\xbd\x4f\x71\xb1\x28\x02\x29\x00\x41\x4b\x1c\xe4\x6f\xf9\x9a\x12\xb8\x9b\xac\x0d\x79\xaf\x54\x35\xde\xbe\xab\x07\x4d\xe3\x64\xd5\x1f\x5f\x13\xc3\xcb\x16\xbb\xa5\x11\xa8\x9a\xb3\xf6\x63\xc9\x14\xca\x33\x3e\xac\xbc\x7f\x97\xfb\x22\x7e\xe2\x59\x01\x98\x9e\x68\x78\x24\x6d\x44\xee\xaa\xeb\x10\xd9\xe4\x79\x01\x00\xdd\xe4\xb1\xbb\x80\x22\x24\xe3\x7f\x36\x02\x0e\xe3\x75\x59\x43\xe6\xf4\xc7\x32\x07\xbc\xac\x0a\xe2\x59\x23\x60\x3f\xb6\xcc\x38\xea\x8f\x3f\x13\xf0\x66\x3b\x00\xe4\xd4\x99\xd3\x47\x22\xcc\xe4\x18\xad\x97\xb3\xf4\xdd\xd6\x8e\x65\xc6\x85\x9d\xa7\x74\xad\x95\x56\x32\x02\xcc\xd8\xd1\x2e\x9f\x26\x6b\x41\x74\x0a\x85\xb3\xac\x69\x1b\xec\x69\x52\x0b\x40\x09\x81\xad\xb5\xb5\xf6\xcc\x90\x98\x81\x57\x66\x1f\xe6\x8e\xed\x9b\x22\x00\xe1\xc6\x32\xc7\xee\xac\x02\x80\xc0\xa7\x65\x35\xc0\x7c\xbc\x26\x91\x53\x11\x08\x00\xcc\x1c\x46\xcb\x72\x2d\x5d\x07\x4c\xe1\x72\xae\x08\x3c\xad\x9b\x42\x79\x65\xbe\x28\x47\xea\x10\x39\x0d\x80\x76\xb5\x7a\x6a\x25\x07\x9e\x8d\x15\xb2\x2a\x04\x8e\x0a\x5e\x0d\x22\x3f\xcb\x29\x54\x56\x81\xb3\x91\x48\x10\xf9\x91\x80\x07\x26\xc4\xd2\xa3\xe6\x06\xc8\xd9\x07\x78\x6f\xed\x42\x16\xe6\x6b\x1b\xcc\xfb\x20\x92\xa6\x2a\xbf\xa9\x23\xba\x8c\xe6\x80\x2a\x67\x8b\x77\xd3\x00\xd4\x6e\x2c\x06\xdc\x34\xe0\xab\xa0\x36\xa8\x17\xdf\xcd\x28\xe9\x4d\x76\x95\xff\xd4\xb2\xbc\x5a\xa9\x17\x82\x7c\x48\x36\x1e\x1c\x7d\x33\x7b\x87\xad\xb6\xf5\x4e\x94\x12\x55\x09\x6c\x5f\x08\x8e\x6b\xa9\x05\x2d\x90\x19\x6e\x32\x8b\xa4\xd8\x5d\x6b\xa5\x2f\x2d\xc8\x95\x00\xa4\x8f\x3c\xba\x72\x98\x3f\x09\xfb\xc3\x41\x7e\x14\x85\x39\xa7\x4f\xcf\x0b\x84\xbc\xe7\x13\xce\x08\x48\xce\xd1\x4b\x63\xb6\x16\x07\x42\x85\x39\xd5\x4e\x8b\x9a\xa0\x18\xe7\x02\x44\x22\xa2\x41\x2d\xdb\xb3\x17\x5a\x12\xab\x1a\x85\x8d\x5e\xd1\xbb\xeb\x01\x30\xa3\x61\xfe\x40\xb3\x20\x8b\x64\x2c\x08\xc6\x50\xde\x63\xa2\x56\x1d\x8f\x27\xb7\x61\x20\x1e\x68\x7a\xe3\x49\x9e\xf8\xb5\x78\x8c\x8a\x14\xc8\x38\xb1\xf3\x67\xc9\x48\x19\xab\x09\x61\x0d\xc9\xf2\xa3\x0a\xa7\x0b\x9e\x89\x55\x8e\x3a\x23\xa5\xad\x94\xc9\xce\x32\xe4\x82\xa8\x70\xb9\x5d\x64\x30\x84\xbb\xa7\x6a\xee\x1f\x33\xb1\x3c\x57\x36\x82\x2e\xc5\x65\x8e\x65\x35\x6f\xdb\x82\x15\x1c\xbb\xd4\xca\xeb\xb5\x96\xc9\x2a\x17\x59\xe1\xd5\x4a\xe4\xb9\x06\x32\xee\xb5\x3b\x37\x97\x18\xca\x77\xaf\xa2\xbe\xa5\x5e\x08\x1e\x1d\x46\x3b\x47\x83\xea\x26\xa5\xca\xe4\x96\x25\xc2\x16\x8b\x21\x13\x4b\xda\xa8\x97\x09\xb4\x9a\x50\xeb\x4c\x59\x98\x4e\x29\xed\x48\x0d\x91\xfa\x51\xd6\xff\xcf\x16\x34\x28\x23\x20\x43\xa4\xfa\x99\x56\xba\x5d\x4b\xd8\x8a\x4c\x32\xc2\xd2\x5c\x38\x71\x06\xd0\x95\x56\x4f\xe7\x49\x69\xb1\xd8\xd3\xf4\x00\xd6\x23\xed\xfa\x5f\xcc\xf3\xde\x4d\xc3\x9d\xbb\x0d\x2d\x67\x3e\x2d\x8a\x62\x49\xad\x35\x21\x7e\x1d\x10\xb8\x53\xd6\x20\x56\x16\x77\xc9\x77\x45\x4e\x7f\x55\x28\x91\x17\x79\x59\x14\x3b\x69\x15\x18\x53\x4d\x1c\xb7\x0c\xb6\xe2\x46\xc5\x2d\x21\xcd\x13\xce\x53\xa0\x96\xa4\x61\x35\x00\xe1\x06\x71\x01\xc3\x0e\x31\xba\xc9\x6b\x24\x2b\x91\x57\x20\xf0\x63\xf6\x0a\xca\xe9\x8d\xcf\x40\xe8\x04\xf7\x0d\x31\x79\xab\xd0\xa7\x16\x00\xbb\x61\xfa\xbe\x2b\x21\xbc\xa6\xaf\x90\xb2\xdf\x9f\x65\xaf\xa0\x62\x01\x99\x29\x45\xde\x2a\x96\x87\xcf\xac\x04\x20\x87\xcc\x0b\x12\xb9\x1f\x78\x34\x98\x7d\xcd\x15\x54\xae\x34\x2f\x5a\x67\x4a\x40\xae\x61\xbb\x79\x74\x75\x00\x51\xee\xde\x34\x42\x32\xef\x65\x25\xf2\x05\x63\x82\x82\x24\xf3\x70\x07\xd2\xc1\x3a\xca\xab\x72\x89\xb1\x0c\xd4\xfa\x00\x52\xfc\xc0\x55\xd1\x7d\xb0\xbd\x3f\x5e\xb8\x57\xab\xeb\xf2\xcc\xf3\x1b\x03\x10\xf1\x23\xbe\xef\x9a\x10\x87\x83\x0a\x51\xbb\xe8\xfe\x78\x4d\xfb\x37\x90\x42\x79\x16\x04\xa9\x22\x37\x97\xa6\x80\x25\x9b\xb2\x75\x0d\xce\xbe\xbf\xf1\x08\xc4\x45\xd0\x28\xdb\xe6\xdc\xd7\xca\x6d\xac\x9b\xeb\x45\xc0\xb7\x07\x20\x9c\xe0\xb6\xfd\xe7\x36\xff\x02\x41\xa8\x8e\x6d\xdd\x91\x3a\xa5\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xaa\x6f\xa0\xf0\x9d\x06\x00\x00")

func faviconPngBytes() ([]byte, error) {
	return bindataRead(
		_faviconPng,
		"favicon.png",
	)
}

func faviconPng() (*asset, error) {
	bytes, err := faviconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.png", size: 1693, mode: os.FileMode(0644), modTime: time.Unix(1659970605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x4a, 0x3c, 0xe2, 0x15, 0xfa, 0xea, 0x42, 0x57, 0xdc, 0xbf, 0xf6, 0x1a, 0x1f, 0x6c, 0x67, 0xef, 0xf9, 0x35, 0xb9, 0xfc, 0x1b, 0xaf, 0xe6, 0x30, 0xc, 0x86, 0x72, 0x45, 0xf2, 0x6c, 0x4e}}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x79\x5d\x93\xdb\x36\xb2\xf6\xbd\x7f\x45\x2f\xb7\xea\xad\xdd\x5a\x12\x44\xe3\x1b\x13\x69\xea\x5d\x7f\x65\x7d\xe2\xb3\x49\xd6\x4e\xbc\xce\x1d\x47\x84\x24\xda\x14\xa9\x90\x94\x66\xc6\xa9\xfc\xf7\x53\x0d\x48\x1a\x8d\xc7\x9b\x9a\x3a\x55\xae\xe3\x0b\x0f\x1b\x1f\x8d\x46\xf7\xd3\x4f\x43\xc0\xec\x4f\xcf\xbf\x7f\xf6\xf6\xfd\x0f\x2f\x60\x3d\x6d\xda\xcb\x27\xb3\xe3\x9f\x50\xd5\x97\x4f\x00\x66\x9b\x30\x55\xb0\x58\x57\xc3\x18\xa6\x79\xf6\xd3\xdb\x97\x85\xcb\xa0\x8c\x5d\x53\x33\xb5\xe1\xf2\xd9\xeb\x57\x3f\xbf\xb8\x80\xbf\xef\xa6\x35\x87\xd7\xfd\xaa\xe9\x60\xd9\x0f\xf0\xec\xf5\x2b\xf8\x61\xe8\x37\xdb\x69\x9c\x95\x69\x24\xcd\x69\x9b\xee\x23\x0c\xa1\x9d\x67\xe3\x74\xdb\x86\x71\x1d\xc2\x94\xc1\x7a\x08\xcb\x79\xb6\x9e\xa6\xed\x78\x51\x96\x8b\xba\x63\x1f\xc6\x3a\xb4\xcd\x7e\x60\x5d\x98\xca\x6e\xbb\x29\xaf\xfa\x7e\x1a\xa7\xa1\xda\xfe\x7f\xcd\x90\xc9\xb2\x6e\xc6\xa9\x5c\x8c\xe3\x5d\x07\xdb\x34\x1d\x5b\x8c\x63\x06\x4d\x37\x85\xd5\xd0\x4c\xb7\xf3\x6c\x5c\x57\xd2\xa9\x02\x9f\x6e\x5e\xa8\x8f\xef\x9e\xfe\x6a\x5d\xf3\x7e\xfd\xb2\xad\xf7\xdf\xed\xd6\xcb\xb7\x7f\xff\xc9\x54\xbb\x9f\xdc\xf4\xd6\xab\x77\xc3\x3f\x96\xd3\x87\xe7\x57\xc3\xb3\x17\xff\x7e\xf3\x13\xf6\x4f\xfb\x5f\x6f\x5b\xf1\xe3\xfe\x17\xf3\xe1\xd5\x3b\x99\xc1\x62\xe8\xc7\xb1\x1f\x9a\x55\xd3\xcd\xb3\xaa\xeb\xbb\xdb\x4d\xbf\x1b\xb3\xcf\x36\xd5\x2c\xfa\x2e\x83\xe9\x76\x1b\xe6\x59\xb3\xa9\x56\xa1\xdc\x76\xab\xe3\xfe\xca\x65\xb5\xa7\x01\x8c\xda\x2e\x9f\xcc\xca\xe4\xe4\xd9\x55\x5f\xdf\x46\x3d\x75\xb3\x87\x45\x5b\x8d\xe3\x3c\x5b\xf4\xdd\x54\x35\x5d\x18\x60\x7b\x5b\xa8\xb8\x0c\x40\x8c\x4a\x18\x8e\x63\xb6\x57\x85\x84\xcd\x55\xa1\xe0\xaa\x1f\xea\x30\x14\x57\xfd\x34\xf5\x9b\xc3\x60\x80\x59\xf5\x99\x63\x87\x7e\xaa\xa6\xa6\xef\xaa\x96\x35\x7d\x76\x54\x53\x17\xcb\x36\xdc\x40\xd5\x36\xab\xae\x68\xa6\xb0\x19\x8b\x45\xe8\xa6\x30\xc0\x14\x6e\xa6\xa2\xae\x86\x8f\x87\xaf\xb0\xe8\x87\xa8\xa0\xe8\xfa\x2e\x9c\xd6\x01\x98\x8d\xfb\x15\xdc\x6c\xda\x6e\x4c\x8b\x5d\x94\xe5\xf5\xf5\x35\xbb\x96\xac\x1f\x56\xa5\xe0\x9c\x97\xe3\x7e\x75\x5a\x71\x13\x0a\x91\xc1\xd0\xb7\xd1\x4b\xab\x0c\xf6\x61\x18\x9b\xbe\x9b\x67\xc8\x30\x4b\x8a\x2e\x6e\xc8\xab\x5f\x52\x87\xde\xfb\x32\xf6\x1e\x87\x8e\xfb\xd5\x87\xbb\x95\xa3\xc4\x16\xfd\x26\x7d\x65\x70\xdd\xd4\xd3\x7a\x9e\x49\x91\xc1\x3a\x34\xab\xf5\x14\xbf\x2f\xa3\xd1\x5f\xee\x83\x7d\x13\xae\x9f\xf6\x37\xf3\x8c\x03\x07\x94\x9a\x29\x63\x8c\x39\x7d\xd9\xcf\x4d\x6e\xea\x79\xf6\x86\x56\x7b\xb3\x5f\x21\x47\x4e\x18\xfc\x38\x2e\xaa\x6d\xb8\x08\x37\xdb\x7e\x98\x8a\x65\xd3\x86\xae\xda\x84\x79\x56\xfe\xdc\xb7\xbb\x4d\x18\xcb\x6f\xfb\x7e\xd5\x86\xe7\x43\xb3\x0f\xe5\x9b\x75\x35\x84\x1a\x6a\x12\xc6\xf2\x59\xbf\xd9\xec\xba\x66\x11\x9d\x3d\x96\x4f\x87\xaa\xab\x9b\x6e\x55\x7a\xff\x3c\x8c\xcd\xaa\x1b\x29\xd1\x7a\x78\xd6\x77\x53\x18\xa7\xf2\x35\x19\xbe\xee\x77\x63\x48\xed\x05\xbc\x6b\xba\xae\xe9\x56\x90\x86\x97\xff\x3a\x05\x1e\xde\xfc\xba\xab\x86\x10\x21\xf8\xc0\xc6\x9b\x7a\xdb\xcc\x33\x6f\x1e\xf6\xdc\x3e\xec\x39\x77\x00\xfc\x65\xa1\x82\x5b\xfa\x90\x83\xe0\x02\x0b\xae\x0b\xa1\xfe\x9a\xc1\xd8\xd7\xcd\xb6\xaf\x9b\x8b\xba\x5f\xa4\xcd\x3f\xb0\x04\xee\x8c\x67\x11\x23\x29\xa4\xc7\x65\xee\x01\xe0\xd8\x18\x61\x40\xfa\xc6\x6d\xb5\x08\x63\x79\x6c\x3f\xe1\xe1\xb0\xec\x1d\x24\x0e\x0d\x6c\xec\x77\xc3\x22\x2c\xfb\x61\x15\x22\xb3\x3c\x7f\xfb\xfc\xd4\x59\x70\x56\x4f\x75\xf6\x18\x1c\x9f\x60\xf7\x87\xc3\xee\xf2\x83\x32\xe4\xe8\x0a\xb2\xbb\x26\x7c\x9d\x81\xe6\x41\x1f\x72\xee\x33\xd8\x56\xab\xb0\xe8\xdb\x7e\x98\x67\x7f\x5e\xc6\x7f\xd9\x21\xd5\x8f\xad\x26\xfe\x3b\xb6\xf6\xdb\x6a\x11\x59\x0f\xd9\x39\x02\x49\xcd\xb8\xae\xea\xfe\x7a\x9e\x89\xcf\xda\x4f\x53\xf8\x83\x29\x8b\x75\x58\x7c\x0c\xc3\x55\x5f\x0d\xf5\x3c\x3b\xef\xad\xfb\xc5\x6e\x13\xba\xa9\xd8\x75\xcd\x44\xf9\xbc\xc9\x60\x5c\xf7\xd7\xab\x81\xb6\xb4\xac\xda\x31\x64\x70\xe8\xdb\xde\x9c\x4d\xfc\xd4\xf7\x1b\x5a\xca\x6a\xa5\xb5\x50\xf6\xac\x6b\x71\x33\xcf\xa4\xd7\x4c\x7b\x67\xe5\x79\xfb\xed\x3c\x13\x68\x98\x71\xea\x5e\xfb\x75\xd3\xd5\xfd\x75\x71\xc8\x5f\x94\x28\x1e\x76\x1e\x33\x1a\xb9\xb0\x0f\x7b\x6f\xe6\x99\x92\xfc\x61\x3b\x2d\xa8\x1f\x36\x6f\xaa\x9b\x66\xd3\x7c\x0a\x9f\xf9\x62\xb1\x1b\x06\x72\x45\x5b\xdd\x86\x61\x9e\xc5\x3f\x98\x5d\xce\xca\x87\x01\xbf\x87\x87\x3a\x2c\xc7\x3b\x04\x3c\x0f\xcb\x11\x39\x77\x34\x91\x7a\xee\x0d\x4d\xd5\xf3\x2c\x73\x5e\x57\x57\xe7\x45\xf5\x34\x70\x75\x67\x56\x5b\x5d\x51\x3d\x7a\x4d\xe6\x00\x9e\xd9\xbb\x1a\xfa\xdd\x76\xd3\xd7\xe1\x60\xeb\x19\x77\x7d\x8b\x9c\xdb\x7b\xa8\x4d\x3a\xcf\xfb\x4d\x06\xb1\x70\xcf\xb3\xba\x19\xb7\x6d\x75\x7b\xd1\x74\x6d\xd3\x85\x0c\xa6\xa1\xea\xc6\x65\x3f\x6c\xe6\xd9\xa6\x9a\x86\xe6\xe6\x2f\xc8\x9c\x77\xdc\x3b\xcc\x79\xce\xf3\xe2\x4e\x2c\x50\x21\x73\x52\x72\x91\x6b\x21\x99\xb0\xc6\xba\xbf\x7e\xb6\x30\xc0\x6c\x5b\x4d\x6b\xa8\xe7\xd9\x06\xbc\x67\x4e\x3a\x97\x0b\xe1\x98\xd2\x56\x01\x67\x5c\x28\x9f\x17\x9c\x71\x2e\x81\x33\xc3\xb5\xcb\x25\xe3\xc2\x81\x64\x56\xa2\xce\xd1\x32\x6f\x34\xc2\x1a\x68\x90\xe0\x0a\xf6\xc0\x99\x57\xdc\x41\x0b\x85\x64\xdc\x6a\x93\x0b\xe6\xb9\xa1\x31\x49\x86\x3d\x28\x26\x50\x48\x9a\x25\x98\x70\x5c\x40\x0b\x96\x71\xa5\x30\x37\xcc\x39\x27\x60\x0f\x82\x09\x61\x24\x2c\x48\xb1\x92\x12\xc9\x0a\x44\x8d\x24\x3b\x2d\x2c\xc9\xc2\x29\x09\x05\x32\xa1\x5c\x94\x35\x2a\x0d\xaf\xc1\x39\xe6\x9c\xf2\xb9\xd0\x9a\x09\x25\x91\x94\x20\xd3\x56\x4a\x1a\xe4\xb9\x71\xb4\xae\x56\x4a\xe5\xf4\xd7\x29\x7f\x27\x2b\xa6\x38\x7a\xd8\x43\x81\x96\xa1\x33\x16\x16\x20\xc8\x2d\x34\x55\x79\x09\x86\x29\xad\x2c\xf9\xd9\x38\xed\x00\x39\xb3\xc6\x38\x9a\x28\xa4\x12\xc0\x99\x93\xde\xa4\xc1\x06\x90\x59\x23\x15\x49\x4e\xa1\x03\x91\x9c\x46\x46\x18\xe1\x4f\x31\x5e\x36\x6d\x7b\xf1\x67\x2e\x6c\xbd\xb8\xfa\x86\x84\xe2\xc0\x17\x17\x98\xc4\x61\xd7\x86\x8b\xae\xef\x3e\x85\xa1\xff\x66\x9c\x86\xfe\x63\x14\xc3\x19\xaa\x7e\xa8\xa6\x35\x72\xae\x09\xda\x14\xd1\x3f\x08\x33\x4a\x64\xda\x6b\x79\xf0\x8f\x70\x50\xa0\x63\x0e\x95\xcd\x91\x33\x67\x14\x26\xaf\x6b\x69\x6d\xce\x99\xe4\xd6\x90\xff\x10\x4d\x1e\x5d\x2c\x48\xb2\x9c\x00\xc7\x0c\x77\xd1\x59\x82\xa1\x42\x1f\xc3\x28\x84\x31\x79\x61\x19\x37\xd6\xa4\x08\x4b\xaf\x35\x0d\x8a\x51\x8f\x30\x40\x21\x7c\x02\x08\x7d\xe5\x85\x64\xc2\xa3\xa7\x45\xd1\xe8\xe8\x3d\xad\x35\x8d\x43\x0a\x34\x6a\x02\x99\x89\x91\x50\x3e\xe7\xcc\x39\xef\x40\x31\x6f\xbd\xcf\x91\x49\x05\x96\x29\x21\x4c\xfa\x26\x9d\xde\xe6\x1c\x34\xb3\x36\x29\xb3\x92\x3b\xb0\xcc\x19\x19\xe3\xa6\x14\xc1\x14\x2d\x33\x46\x3a\x58\x00\xcf\x91\x39\xb4\x10\xe3\x62\x09\xe1\xca\x13\xd0\x08\x13\x98\x47\x44\x98\xaf\x11\x2c\xf5\x98\x60\xa1\x67\x02\xb5\xcb\x45\x8c\x9a\x3a\x26\x84\x89\x30\x42\xed\x53\x42\x38\x11\xd3\x54\x4a\x17\xa3\x23\xa5\x88\x80\xd5\x52\x59\x92\xb9\x4b\xb2\xb2\x52\xc6\x60\x61\xe4\x07\xc6\x95\x73\x29\x0a\x26\xca\xc6\x28\x1d\x43\xcf\x79\x1c\x2f\xb9\x52\x31\xc1\x9c\x17\xd1\x91\x8a\xc7\x5c\x91\x4a\x39\x1a\x8f\x9e\xbb\x43\xee\x73\xca\x14\xea\x8a\xd9\xc1\x99\xf7\x0e\xa1\x30\x8c\x4b\x11\xd3\x8c\x2b\xa9\xa1\xa0\x74\x71\x3a\xce\x75\xdc\x68\x4a\x17\x13\x43\x64\xb4\xd1\x94\x2e\x96\x92\x07\x99\xe2\x4a\x52\xba\x78\x52\x46\x1c\x61\x25\x20\x53\x5e\x44\x33\x85\xf7\x08\x9a\x79\xa7\x62\xe2\x49\x34\x1e\x50\x33\x65\xf1\x4c\x66\xdc\x7b\x9d\x73\x22\x12\x69\x44\xce\x19\x57\xdc\x80\x64\x8a\x4b\x92\x50\x28\x0b\x2d\x70\x66\xb9\x95\x39\x67\x8a\x7b\x0b\x71\x1f\x79\xa2\x3b\x22\x52\x94\x39\xe9\x11\x16\x14\x93\x56\xa9\x5c\x30\x2d\x14\xac\xe3\x40\x05\x2d\x20\x93\x04\x3c\x22\x01\xa5\x61\x01\x44\x33\x42\xe5\xc4\x32\x1e\x21\x01\x88\x28\xc6\x0a\xb8\x43\x93\x24\x0a\x44\xe6\x13\xfa\x08\xfc\x4e\xe4\xc8\x8c\x50\x50\x38\xa6\x84\x8a\x94\x89\x9e\x42\xa7\x98\x17\x5c\xa7\xc4\x93\x5f\x03\x84\xf2\x51\x20\xa4\x04\xc9\x05\x3a\x66\x45\xa2\x07\x45\x19\x63\xc9\x3b\x96\x20\x68\x99\x72\x96\xdc\xe3\xb5\x8c\xbb\x30\x4a\xe9\x5c\x32\xaf\x55\x4a\x6b\xaf\x29\x71\xd1\x0a\x49\xa2\xf4\x9e\xd8\x43\x1e\xd0\xe6\x9d\x3d\x51\x4b\x74\xfe\x21\x04\x0f\x05\xfb\x28\x01\xa3\xc7\x08\x92\x84\x71\xa2\x5c\x4a\x91\x03\xf4\x39\x57\x39\x32\x2b\xc9\x12\xc9\x04\x4a\x4f\x11\x42\xae\x92\x29\x3a\x82\x01\xbd\x8e\x9c\x67\x2d\x61\xc5\x71\x17\x55\x59\xa5\x89\x64\xd0\x2a\x04\x7e\xcf\x46\xf5\x9f\x24\xe7\xa3\xa4\x2d\x26\x0d\x3a\xd2\x14\x77\x42\x47\x7e\x71\x54\x43\x99\x96\x06\xc9\x18\x45\x15\x10\x99\xe7\x28\x28\x75\xa4\xe6\x84\x1e\xa7\xb5\x8c\x2e\x35\xca\xe4\xc4\x94\x5a\x24\xca\x35\x5c\x47\xf6\xa2\x64\x42\x43\xe8\xf5\x16\x91\xd8\x54\x79\xe5\xe0\xbc\xa4\x69\x49\x60\x25\x96\xe7\x3e\x2f\x22\xcd\x73\x3c\xe0\xf5\x50\x16\x91\x0b\x90\x4c\x23\xfa\x93\xa8\x19\x77\x1a\x73\x0e\x2d\xd5\x40\x2f\x1c\xa1\xd4\xa2\x8c\x39\xa5\x89\x7b\x89\x18\x28\x53\xac\x4b\xbb\x92\x09\xd0\x28\x8d\x3c\x46\x40\x33\x6b\x1c\x45\x40\x12\x01\xd0\x79\x81\x3b\xf2\xa9\xd0\xea\x14\xb9\x43\xd4\x62\x96\xa6\x40\x70\x34\x2e\x49\x5f\x03\xf4\xe2\x31\xa0\xe7\x8e\x71\x8b\x2a\x17\x9a\x36\x8f\x3a\x56\x2e\xab\x62\xc1\x8b\x1f\x91\xfa\x0e\x4d\x9f\xbe\x86\x99\xf8\xa8\x6a\x6e\x99\x74\xd2\xe6\x42\x58\x26\xb4\x15\x77\x90\xf0\x31\xbb\xbc\x75\x8e\x30\xa1\xd1\xc4\x04\xd0\x5a\xea\x08\x0a\x61\x89\xc1\x0a\x21\x18\x97\x56\xe5\x05\x0a\x66\x45\x84\x54\x3c\x2d\x69\x97\x70\x20\x04\x6d\x52\xcb\x74\x8e\xf1\x88\x86\x62\x8a\xdc\xab\x5c\x86\xe2\x4e\x85\x90\x79\xd2\x20\x8e\x1a\x2c\x45\xdd\xa3\x48\xc7\x2d\xaa\x61\xcc\x70\x2f\x8f\xd2\xc1\x84\x3d\x08\xcd\x94\xd2\xe2\x54\x89\xbd\x8c\x50\xf6\x36\x27\xab\xa5\x27\x24\x6b\xab\xe2\x04\x61\x08\x8c\x71\xbd\xb4\x5c\xa4\x5d\xaa\x2a\x2e\x26\xae\x56\x0a\x08\xa4\x82\xd6\x36\x0e\x23\x09\x6b\x73\x14\x12\x0f\xe4\x3c\x9e\xcc\x4c\x44\xba\x10\xc6\xc6\x41\x3a\x96\x38\xe3\xe2\xd9\xf5\xbe\x57\x8e\xd4\xae\x4c\x3a\x41\xda\xa4\x56\x98\x3c\xa6\x21\xda\x93\x18\x6d\x54\xf0\x09\x36\x64\x86\x47\x9b\xa3\x66\xd6\x21\x51\xbe\xa7\x03\x87\x89\xdb\x14\x4c\x09\x19\x8f\x55\x92\x0b\x72\x85\x89\x75\x58\x7a\x2f\x73\xcd\x9c\xb3\xfe\x3c\x34\x27\x1b\x88\x49\x79\x74\x2b\x37\xe8\x48\x14\x68\x89\x5f\x10\x5d\x0c\xb6\x14\xf1\xcc\x86\x56\xc9\xa8\x80\x79\xb2\x4a\x31\xae\x75\x5c\x40\x78\x2b\xc8\x48\xa4\x30\x46\x7d\xfc\xb0\x29\x2e\x7d\x64\xdf\x74\x3e\xe5\xd6\x98\xa8\x5e\x48\x9b\x4e\xde\x1e\xe9\x64\xad\x98\xe3\x5a\xe4\x42\x3b\xa6\x3d\x37\xa9\xe4\x73\x9f\x8a\xb6\xe0\xde\x47\x1a\xe3\x32\x22\x4e\x19\x23\xef\x64\x7d\x3c\xd9\x17\x9e\x50\x94\x8e\x7f\x46\x61\x3c\x1d\x18\x8d\x12\xee\x44\x2f\xb8\x3b\x8c\x34\x02\x13\xa2\x05\xb1\x32\xd5\x75\xc9\x65\x74\xb4\xb1\xd6\xa6\x7a\x2e\xa3\x76\x2f\xf0\x0e\x1b\xc5\x1d\x16\x39\x55\xf0\x08\x5e\xae\x25\x9d\xd0\xd1\x99\x88\x6d\x24\x9e\xa5\x5f\x11\x18\x23\x8f\xca\x93\xd7\x25\x13\x8a\xc7\x0c\xe1\x8a\x6b\xa0\x1f\x2f\x0a\xa9\x94\x39\x17\x63\xc7\xe8\x4c\x4a\x01\x10\x9e\x26\xeb\xc3\x69\xc2\x3b\xe0\x2c\x9d\x98\x05\x47\x73\x06\xa1\x64\x49\xfa\x21\xc1\xbd\xa1\x52\x2f\x50\x90\xe9\xd2\x3b\x2a\x92\xca\x72\x7d\x94\x68\x1f\xe8\x12\x58\x9c\xb7\xd1\x1e\xef\x90\x0e\xa5\xe8\xa5\xf8\x3a\x3c\xc3\xbf\xcc\x33\xb3\x72\x75\xef\x87\xef\xb9\x38\x2b\xc7\xfd\xea\x32\xfd\x7f\x76\x41\xb9\xad\xba\xe3\xf5\xe3\x72\x2c\x54\x96\xee\xad\xe3\xb5\x75\xe8\xa6\xc3\x55\xdb\xac\xa4\x71\xa7\xfb\xd3\xb2\x3a\xdc\xbb\x96\xe9\xe2\xf5\xf2\x49\x14\x7f\xfb\x0d\x9a\x25\xb0\x17\xc3\xd0\x0f\xf0\xfb\xef\x69\xc8\xa6\x6a\x4e\x0b\x6c\x0b\x7d\xb8\x97\x5d\x15\x6d\xb3\x5a\x4f\x30\xf4\xbb\xae\x0e\x75\x21\xef\x2e\x67\xbf\x74\xd9\x5b\x2c\xdb\x5d\x53\xc3\xf6\xb6\xd0\xe7\xb7\xab\x6b\x3c\xdd\xd5\xa6\x1f\xdd\x85\x86\xe5\x75\x71\xd5\xb7\xf5\xf1\x8e\xb6\x5b\x85\x21\xbb\x4c\x97\xf0\xf7\xf7\x04\x2f\xab\xa6\x0d\xf5\xac\x5c\xe3\x99\xca\xed\xdd\xda\x6d\xb1\xa9\x0b\x07\xc9\x2b\xbf\xfd\x06\xec\x79\x18\x17\x43\xb3\x8d\x93\x7f\xff\x7d\x56\x6e\x1f\x39\xef\xe8\x90\xb3\x19\xb3\xb2\x6e\xf6\x47\x27\x92\x8b\x2e\x8f\x1e\x0c\xed\x18\xfe\xaf\x9d\xf7\x1f\x1c\xf6\xac\xdf\x6c\xdb\x30\x85\x47\xba\xec\x7d\xbf\x83\x75\xb5\x0f\x30\xee\x16\x8b\x30\x8e\xcb\x5d\xdb\xde\x42\xdb\xaf\x56\xa1\x86\xa6\x83\xeb\x66\x5a\xa7\xe7\x91\x3f\xc1\xfb\x7e\x37\x40\x15\x87\xc1\xd4\x7f\x0c\x1d\xac\xab\x11\xae\x42\xe8\x60\x9c\xfa\x21\xd4\xf1\xed\x64\x37\x06\x9a\x38\xee\xae\xc6\xf0\xeb\x2e\x74\x53\x7c\x4d\x59\x54\x6d\x3b\x42\xd5\xd5\x70\xdd\xb4\x2d\x5c\x05\xa8\xf6\x55\xd3\x56\x57\x6d\x88\xb3\xa6\x75\x80\x2e\xdc\x4c\x40\xbf\x03\xfa\xdd\x30\xb2\xc7\x85\x8e\xec\xdf\x54\xb7\xd0\xf5\xd7\xb0\x68\xfb\x31\xc0\xb4\x6e\x46\x48\xd7\x5e\x71\xbd\x21\x4c\xbb\xa1\x83\xa9\x8f\x6b\x4c\x61\xd8\x34\x5d\xd5\xb2\xc7\xc5\xb9\xab\x29\xcc\xa9\x6b\xd9\xf7\xd3\xd9\xfb\xc5\x54\x48\xd8\x4c\x85\x4a\x20\xde\xec\xa6\x50\x1f\x9f\x32\xa6\x7e\x7b\x0a\xe2\x7f\x57\x75\x48\x5e\xfc\x7f\xe3\xb6\xaa\xc3\xf8\x0d\x5c\xdd\xc2\x67\xf7\x61\x87\xb5\xd3\x0a\xf1\x35\x25\x99\x44\x5f\x09\xce\x30\x0e\x8b\xff\xcd\x23\xd3\x87\xcf\xdf\x98\x3e\x7c\xf1\x89\xe9\xc7\xff\xfa\xc7\xb4\xff\x76\xbd\x19\xfc\xbf\xbf\x7f\xb5\x7d\x65\xde\xff\xbc\x9b\xbe\xfd\x9b\xf8\xf1\xfb\xef\xfc\xdb\xbf\xfd\xd2\xfd\x53\x7d\xfc\xf4\xf2\x9f\xf8\xaf\xe9\x3b\xf9\xe9\xc5\xcb\x17\xaf\xc6\x9b\x75\xbb\x79\xd7\xea\xf2\xfd\x8b\x37\xfb\xed\x2f\xf8\x07\x4f\x4c\xb3\x32\x6d\xe0\xf2\xc9\xac\x4c\x6f\x45\xb3\x32\x3e\xd3\xfd\x4f\x00\x00\x00\xff\xff\x96\x45\x30\x19\xbd\x1b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7101, mode: os.FileMode(0644), modTime: time.Unix(1659970605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x44, 0x7d, 0xa7, 0x8a, 0xb5, 0xae, 0x30, 0x54, 0x50, 0x75, 0x4a, 0x62, 0xe0, 0xce, 0xad, 0xc5, 0xb8, 0x34, 0xf5, 0x5a, 0xe5, 0x2e, 0x68, 0x15, 0x44, 0xec, 0xb0, 0x5e, 0x5c, 0x39, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.png": faviconPng,
	"index.html":  indexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.png": {faviconPng, map[string]*bintree{}},
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
