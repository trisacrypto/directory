// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: trtl/v1/trtl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trtl_Get_FullMethodName    = "/trtl.v1.Trtl/Get"
	Trtl_Put_FullMethodName    = "/trtl.v1.Trtl/Put"
	Trtl_Delete_FullMethodName = "/trtl.v1.Trtl/Delete"
	Trtl_Iter_FullMethodName   = "/trtl.v1.Trtl/Iter"
	Trtl_Batch_FullMethodName  = "/trtl.v1.Trtl/Batch"
	Trtl_Cursor_FullMethodName = "/trtl.v1.Trtl/Cursor"
	Trtl_Sync_FullMethodName   = "/trtl.v1.Trtl/Sync"
	Trtl_Count_FullMethodName  = "/trtl.v1.Trtl/Count"
	Trtl_Status_FullMethodName = "/trtl.v1.Trtl/Status"
)

// TrtlClient is the client API for Trtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrtlClient interface {
	// Get is a unary request to retrieve a value for a key.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	// Put is a unary request to store a value for a key.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	// Delete is a unary request to remove a value and key.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	// Iter is a unary request that returns a completely materialized list of key value pairs.
	Iter(ctx context.Context, in *IterRequest, opts ...grpc.CallOption) (*IterReply, error)
	// Batch is a client-side streaming request to issue multiple commands, usually Put and Delete.
	Batch(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BatchRequest, BatchReply], error)
	// Cursor is a server-side streaming request to iterate in a memory safe fashion.
	Cursor(ctx context.Context, in *CursorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KVPair], error)
	// Sync is a bi-directional streaming mechanism to issue access requests synchronously.
	Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncRequest, SyncReply], error)
	// Count the number of objects currently stored in the database
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error)
	// This RPC servers as a health check for clients to make sure the server is online.
	Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServerStatus, error)
}

type trtlClient struct {
	cc grpc.ClientConnInterface
}

func NewTrtlClient(cc grpc.ClientConnInterface) TrtlClient {
	return &trtlClient{cc}
}

func (c *trtlClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReply)
	err := c.cc.Invoke(ctx, Trtl_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trtlClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutReply)
	err := c.cc.Invoke(ctx, Trtl_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trtlClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, Trtl_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trtlClient) Iter(ctx context.Context, in *IterRequest, opts ...grpc.CallOption) (*IterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IterReply)
	err := c.cc.Invoke(ctx, Trtl_Iter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trtlClient) Batch(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BatchRequest, BatchReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trtl_ServiceDesc.Streams[0], Trtl_Batch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchRequest, BatchReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trtl_BatchClient = grpc.ClientStreamingClient[BatchRequest, BatchReply]

func (c *trtlClient) Cursor(ctx context.Context, in *CursorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KVPair], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trtl_ServiceDesc.Streams[1], Trtl_Cursor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CursorRequest, KVPair]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trtl_CursorClient = grpc.ServerStreamingClient[KVPair]

func (c *trtlClient) Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncRequest, SyncReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trtl_ServiceDesc.Streams[2], Trtl_Sync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncRequest, SyncReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trtl_SyncClient = grpc.BidiStreamingClient[SyncRequest, SyncReply]

func (c *trtlClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountReply)
	err := c.cc.Invoke(ctx, Trtl_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trtlClient) Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*ServerStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStatus)
	err := c.cc.Invoke(ctx, Trtl_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrtlServer is the server API for Trtl service.
// All implementations must embed UnimplementedTrtlServer
// for forward compatibility.
type TrtlServer interface {
	// Get is a unary request to retrieve a value for a key.
	Get(context.Context, *GetRequest) (*GetReply, error)
	// Put is a unary request to store a value for a key.
	Put(context.Context, *PutRequest) (*PutReply, error)
	// Delete is a unary request to remove a value and key.
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	// Iter is a unary request that returns a completely materialized list of key value pairs.
	Iter(context.Context, *IterRequest) (*IterReply, error)
	// Batch is a client-side streaming request to issue multiple commands, usually Put and Delete.
	Batch(grpc.ClientStreamingServer[BatchRequest, BatchReply]) error
	// Cursor is a server-side streaming request to iterate in a memory safe fashion.
	Cursor(*CursorRequest, grpc.ServerStreamingServer[KVPair]) error
	// Sync is a bi-directional streaming mechanism to issue access requests synchronously.
	Sync(grpc.BidiStreamingServer[SyncRequest, SyncReply]) error
	// Count the number of objects currently stored in the database
	Count(context.Context, *CountRequest) (*CountReply, error)
	// This RPC servers as a health check for clients to make sure the server is online.
	Status(context.Context, *HealthCheck) (*ServerStatus, error)
	mustEmbedUnimplementedTrtlServer()
}

// UnimplementedTrtlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrtlServer struct{}

func (UnimplementedTrtlServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTrtlServer) Put(context.Context, *PutRequest) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedTrtlServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTrtlServer) Iter(context.Context, *IterRequest) (*IterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Iter not implemented")
}
func (UnimplementedTrtlServer) Batch(grpc.ClientStreamingServer[BatchRequest, BatchReply]) error {
	return status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedTrtlServer) Cursor(*CursorRequest, grpc.ServerStreamingServer[KVPair]) error {
	return status.Errorf(codes.Unimplemented, "method Cursor not implemented")
}
func (UnimplementedTrtlServer) Sync(grpc.BidiStreamingServer[SyncRequest, SyncReply]) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedTrtlServer) Count(context.Context, *CountRequest) (*CountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedTrtlServer) Status(context.Context, *HealthCheck) (*ServerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTrtlServer) mustEmbedUnimplementedTrtlServer() {}
func (UnimplementedTrtlServer) testEmbeddedByValue()              {}

// UnsafeTrtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrtlServer will
// result in compilation errors.
type UnsafeTrtlServer interface {
	mustEmbedUnimplementedTrtlServer()
}

func RegisterTrtlServer(s grpc.ServiceRegistrar, srv TrtlServer) {
	// If the following call pancis, it indicates UnimplementedTrtlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trtl_ServiceDesc, srv)
}

func _Trtl_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrtlServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trtl_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrtlServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trtl_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrtlServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trtl_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrtlServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trtl_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrtlServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trtl_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrtlServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trtl_Iter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrtlServer).Iter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trtl_Iter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrtlServer).Iter(ctx, req.(*IterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trtl_Batch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrtlServer).Batch(&grpc.GenericServerStream[BatchRequest, BatchReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trtl_BatchServer = grpc.ClientStreamingServer[BatchRequest, BatchReply]

func _Trtl_Cursor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CursorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrtlServer).Cursor(m, &grpc.GenericServerStream[CursorRequest, KVPair]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trtl_CursorServer = grpc.ServerStreamingServer[KVPair]

func _Trtl_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrtlServer).Sync(&grpc.GenericServerStream[SyncRequest, SyncReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trtl_SyncServer = grpc.BidiStreamingServer[SyncRequest, SyncReply]

func _Trtl_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrtlServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trtl_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrtlServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trtl_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrtlServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trtl_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrtlServer).Status(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Trtl_ServiceDesc is the grpc.ServiceDesc for Trtl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trtl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trtl.v1.Trtl",
	HandlerType: (*TrtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Trtl_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Trtl_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Trtl_Delete_Handler,
		},
		{
			MethodName: "Iter",
			Handler:    _Trtl_Iter_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Trtl_Count_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Trtl_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Batch",
			Handler:       _Trtl_Batch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Cursor",
			Handler:       _Trtl_Cursor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _Trtl_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "trtl/v1/trtl.proto",
}
