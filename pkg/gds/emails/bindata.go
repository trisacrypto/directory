// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/deliver_certs.html (1.508kB)
// templates/deliver_certs.txt (1.222kB)
// templates/reject_registration.html (587B)
// templates/reject_registration.txt (469B)
// templates/review_request.html (1.194kB)
// templates/review_request.txt (970B)
// templates/verify_contact.html (652B)
// templates/verify_contact.txt (528B)

package emails

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deliver_certsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\x51\x6f\xe3\x36\x0c\x7e\x9e\x7f\x05\x57\xec\x61\x03\x52\x1b\x77\x8f\x85\x67\xec\x76\xbd\xdb\x82\x1d\xba\x43\x93\x0d\xd8\x23\x23\x31\xb1\x56\x49\xd4\x28\x3a\x99\xef\xd0\xff\x7e\x90\x9d\xb4\x4d\xd0\x37\x4b\xf4\x47\x7e\xfc\xf8\x51\x6d\xea\x7e\x27\xef\x19\xbe\x7e\x85\xfa\x0e\x03\xc1\xe3\xe3\xa2\x6d\x52\x57\x55\x6d\xea\xfe\xe1\x41\x60\x7d\xbf\x5c\xbd\x83\x48\x7a\x60\x79\x00\xa1\x9d\xcb\x2a\xa8\x8e\x23\xf4\x98\x61\x43\x14\x01\x53\x12\xde\x93\xfd\x1e\x26\x08\xcb\x0e\xa3\xfb\x72\xf1\xd3\x4e\x30\x2a\xd9\xca\x59\x8a\xea\x74\x04\x43\xa2\x6e\xeb\x0c\x2a\x65\xd8\xa3\x77\x16\xd5\xc5\x1d\x8c\x25\x47\xa0\xb0\x21\xc9\xbd\x4b\xa0\x0c\xac\x3d\x9d\xa8\x1c\x23\xb0\x77\x08\xda\xd3\x7c\x5b\xfd\xe6\x79\x83\x1e\x6e\x9d\x90\x51\x96\xb1\x86\x77\xaa\x68\x7a\xb2\x05\xaf\xbd\xcb\x40\x01\x9d\x07\x14\x82\xcf\x7f\xbc\x5f\xbd\x79\x0b\x14\x8d\x8c\x49\xc9\x9e\x53\xc9\xe5\x7f\xd4\xc2\xa3\x32\x18\xc1\x85\xe4\x29\x50\xd4\xe7\x72\x90\x84\x95\x0d\x7b\x18\x72\xa1\x1c\xd6\x9f\x56\x70\x70\xda\x1f\x99\x9e\xe4\x3a\x71\x55\x06\xfa\xdf\xf4\x18\x77\x54\xad\x05\xf7\xe4\xe1\x7e\xf0\x04\x86\x43\xf2\x0e\xa3\x21\x70\x71\xcb\x12\x26\xcd\xea\xa7\x09\xac\x7b\x82\x24\x2e\xa0\x8c\x60\x49\xd1\xf9\x0c\xbc\x9d\x15\xb2\xa7\x56\x81\xa2\xca\x38\x35\x86\x19\xb6\xec\x3d\x1f\xf2\xcd\x31\xc7\xe0\xbb\xea\xbb\xd6\xbb\xae\xcd\x2a\x1c\x77\xdd\xf2\xf6\xa6\x6d\x8e\xdf\xd3\xd8\xff\x5e\xde\xc2\xe3\x63\xdb\x78\x77\xf1\xe7\x7b\x0e\x81\x23\x14\x5b\x5c\x40\xe6\xc8\xd1\x2f\xaf\x20\x57\x24\x0e\x3d\xdc\x0d\xa5\xfb\x0b\xec\x1c\x9b\x43\xaf\xa3\x3f\x44\x9b\xd8\x45\xbd\x00\x9e\xae\x9f\x40\x6d\x53\x9a\x9b\x64\x62\xb0\x34\xcd\x72\x96\xe6\xe5\x38\x17\xd0\x52\xe8\x46\x1e\xe0\xe0\xbc\x87\x48\xc5\x11\xfd\x93\x07\x12\xe6\x7c\x60\xb1\x6d\x43\xa1\x7b\x9e\xbb\x90\x21\xb7\x27\x0b\x87\x9e\x62\xb9\x81\xad\x93\xac\x90\x87\x4d\x70\x5a\x2c\x33\x15\x7a\xb9\x0e\x35\xbc\xa0\x51\x2a\x0c\xf1\x8b\x4b\xe9\xd2\x5d\x1c\x4b\xb0\x32\x1c\x02\x46\x0b\xde\x45\x5a\x4c\x05\x8a\xd5\x86\x4c\xd0\x1a\xb6\xd4\x71\xa2\x98\xb3\x6f\x9b\xe9\xf4\x62\xb0\xf0\xe3\x53\x2f\x9b\x62\x0e\x0e\x93\x83\x8b\xc3\xa2\x92\xcc\xbc\x4e\x5d\xfd\x74\xb2\x41\x12\xea\x7e\x80\x63\x52\x48\x0f\x26\xbf\x79\x0b\xd7\x2e\xc2\xf2\xee\xe3\xf2\xd3\x87\x3a\x95\x23\x0f\x0a\x7f\xfe\xb5\x9e\x2e\x8c\x28\x5c\x47\xb6\x94\xdb\xa6\x80\x27\x9d\x3f\xb2\x40\x60\x39\x33\x6b\x69\xc8\x45\xa5\x9d\xcc\xdb\x3b\x6d\xc1\xf3\xa2\x1c\x37\x61\x01\xc9\x13\x66\x82\x4c\x04\x3c\x48\x65\xd9\x0c\x65\xa7\xe6\x1c\xa8\xd0\x22\xf4\x42\xdb\x9f\xaf\x7a\xd5\x94\x6f\x9a\x46\xc5\xe5\xa2\x98\xd6\x91\xb4\xb9\xea\xce\xce\x6d\x83\x5d\x0d\xcb\x69\x15\xa0\xc7\x3d\x01\xc6\xb1\xfa\x6f\xa0\x5c\xf2\xe5\x59\xd1\x80\x23\x18\x8e\x8a\x46\x61\xc8\x67\x45\xca\x53\xa0\x7c\x83\x36\xb8\xf8\xcb\x94\xb9\x76\x7c\xd5\x9d\x9f\x4b\x11\x60\xa9\xfe\x65\x57\x46\x53\x3a\x2d\xe2\xbe\xce\xf4\xba\xb4\x99\x13\x1a\xaa\xb3\x47\xf3\x50\x1b\x0e\x57\xdd\xaa\x7c\x42\xd9\xfc\x48\x7e\x26\xfd\x79\x16\xc2\x32\x44\x56\x10\x4a\x7e\x3c\xee\xb2\x1f\xcf\xdf\xaa\xe7\x77\xe0\x57\xca\x0a\xf7\xb4\x43\xb1\x79\xd1\x6e\x04\x9a\xae\x9a\xf5\xbd\x7c\xf7\x60\x45\xb2\x77\x86\x60\x4d\x18\x26\xfc\xb7\x00\x00\x00\xff\xff\x6b\xf2\x41\x51\xe4\x05\x00\x00")

func deliver_certsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_deliver_certsHtml,
		"deliver_certs.html",
	)
}

func deliver_certsHtml() (*asset, error) {
	bytes, err := deliver_certsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deliver_certs.html", size: 1508, mode: os.FileMode(0644), modTime: time.Unix(1622582528, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x97, 0xc0, 0x9d, 0xa9, 0x43, 0xfc, 0x4b, 0xa4, 0x9a, 0xd9, 0xe1, 0x56, 0xe8, 0x2f, 0x15, 0x6b, 0x20, 0x10, 0x98, 0xd2, 0xb8, 0x53, 0xdd, 0x3d, 0x3e, 0xf5, 0x6e, 0x9a, 0xe8, 0xb3, 0x70}}
	return a, nil
}

var _deliver_certsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\x41\x6f\x1b\xb7\x13\xc5\xef\xfc\x14\xef\x7f\xfb\x17\x90\xd7\x48\x8e\x3e\x35\x8d\x93\x56\x68\xe0\x06\x96\x5a\xa0\xc7\x11\x77\xa4\x9d\x9a\xe4\xb0\xe4\xac\xd4\x4d\xe0\xef\x5e\x70\x57\x72\xe4\xa0\xc7\x9d\x99\x1d\xfe\xf8\xde\xe3\x2f\x1c\x82\xe2\xeb\x57\x74\x0f\x14\x19\xcf\xcf\x2b\xe7\xfe\xd4\xb1\x60\xfb\xb8\xde\xbc\x43\x62\x3b\x69\x79\x42\xe1\x83\x54\x2b\x64\xa2\x09\x03\x55\xec\x98\x13\x28\xe7\xa2\x47\xee\xff\x87\xf9\x17\x2d\x07\x4a\xf2\xe5\xbb\xa1\x43\xa1\x64\xdc\x43\x7a\x4e\x26\x36\xc1\x73\x31\xd9\x8b\x27\xe3\x8a\x23\x05\xe9\xc9\x24\x1d\x30\xb5\x1d\x91\xe3\x8e\x4b\x1d\x24\xc3\x14\x6a\x03\x5f\x50\xce\x1d\x1c\x85\x60\x03\x9f\xab\x3f\x07\xdd\x51\xc0\xbd\x14\xf6\xa6\x65\xea\xf0\xce\x8c\xfc\xc0\x7d\xfb\xdf\x06\xa9\xe0\x48\x12\x40\x85\xf1\xf9\xd7\xf7\x9b\x37\x6f\xc1\xc9\x97\x29\x37\xa6\x57\x28\xb5\xcd\x93\x35\x0e\x78\x4a\x90\x98\x03\x47\x4e\x76\x75\x5c\x2e\x6a\xea\x35\x60\xac\x0d\x39\x6e\x3f\x6d\x70\x12\x1b\xce\xa4\x17\xb9\x2e\xac\xa6\xe0\x7f\xfc\x40\xe9\xc0\xd8\x16\x3a\x72\xc0\xe3\x18\x18\x5e\x63\x0e\x42\xc9\x33\x24\xed\xb5\xc4\x59\xb3\xce\xb9\xed\xc0\xc8\x45\x22\x95\x09\x3d\x1b\x49\xa8\xd0\xfd\x22\x4d\x7f\xb9\x23\x38\x59\x99\xe6\x1b\x51\xc5\x5e\x43\xd0\x53\xbd\x73\x6e\x7d\x7f\x37\x3b\xf9\xc7\xfa\x1e\xcf\xcf\xee\xbd\xc6\xa8\x09\xcd\xd7\xa5\xbe\x14\xce\x3e\xbb\x0d\x17\xa1\x80\x87\xb1\xa1\x2e\x03\x4b\x69\xa9\xb4\x91\x0f\xa9\xcf\x2a\xc9\x96\xee\xe5\xab\x75\xdc\x56\xd1\xf3\x2c\xe3\x02\x77\xad\xe4\x6a\x96\xf0\x24\x21\x20\x71\x33\x62\x78\x91\x3e\x53\xad\x27\x2d\xfd\x37\xa5\x0b\x7b\x96\x23\xf7\x38\x0d\x9c\xe6\xca\x5e\x4a\x35\xd4\x71\x17\xc5\x9a\x49\xf3\xfe\xeb\x00\x76\xb8\x3a\xbd\x2d\x1f\xd3\x17\xc9\xf9\x7b\x3f\x35\xcd\x4d\xaf\x31\x52\xea\x11\x24\xf1\xea\xc5\xdc\xb1\x32\x34\x73\xaa\x35\x5c\x89\x88\xff\xbf\x90\xef\x9a\x11\x1a\xe7\x98\x34\x1b\x93\x71\x59\x50\x2e\x77\xf8\xe1\xce\xb9\xcb\x8a\xfc\xe4\xeb\x9b\xb7\xb8\x91\x84\xf5\xc3\xc7\xf5\xa7\x0f\x5d\x6e\x9f\x3a\x1a\x7e\xfb\x7d\x3b\x17\x7c\x31\xdc\x24\xed\xb9\x3a\xf7\x51\x0b\xa2\x96\x57\xee\x37\x5e\x49\xc6\x87\xb2\x3c\x87\x39\x56\xdf\x92\x77\x8e\xd6\x0a\x39\x30\x55\xc6\x51\xaa\x18\xe6\x5c\xa8\x1f\x5b\x4c\x97\x2d\x64\x18\xcc\x72\xbd\xbb\xbd\xb5\x22\xb5\x29\x61\x5d\x62\xbb\xed\xb0\x9e\x83\x84\x81\x8e\x0c\x4a\x13\xfe\x1e\xb9\xb6\x7f\xce\x86\x45\x9a\xe0\x35\x19\x79\xc3\x58\xdb\x22\xea\xa3\xa4\x1f\xe7\x35\x9d\x28\xb4\xe0\x2f\x95\xa6\x5d\x63\x6d\x47\x6f\x02\xf9\x27\xb4\x80\x27\x0e\x98\x07\x6f\x1a\x65\xcd\xe4\xb9\xab\xad\xdb\x79\x8d\x1d\x3e\x2f\xd0\xbd\x22\xa9\xa1\x70\x0e\xd3\x39\xcf\x61\x7a\xfd\x50\x3b\xe7\x7e\xe2\x6a\x78\xe4\x03\x95\xbe\xae\xdc\x7f\xbf\x73\x6c\xb8\x1c\xc5\x33\xb6\x4c\xd1\xfd\x1b\x00\x00\xff\xff\x57\xcd\x6a\xb1\xc6\x04\x00\x00")

func deliver_certsTxtBytes() ([]byte, error) {
	return bindataRead(
		_deliver_certsTxt,
		"deliver_certs.txt",
	)
}

func deliver_certsTxt() (*asset, error) {
	bytes, err := deliver_certsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deliver_certs.txt", size: 1222, mode: os.FileMode(0644), modTime: time.Unix(1622582528, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0xf4, 0x5f, 0xdd, 0x56, 0x9e, 0x1b, 0x25, 0xec, 0x73, 0x8c, 0xaf, 0x0, 0xe0, 0xa7, 0xfb, 0xe8, 0x35, 0x7c, 0xf3, 0x74, 0xe3, 0x8b, 0xde, 0x73, 0x62, 0x5e, 0xa3, 0x98, 0x3f, 0x90, 0xca}}
	return a, nil
}

var _reject_registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x8f\xd3\x40\x0c\x85\xef\xf9\x15\x4f\x7b\xe1\x52\x25\xf7\x6a\x88\x60\x55\x09\x7a\x41\xa8\x5b\xb8\x3b\x1d\xb7\x19\x34\x19\x07\x8f\xd3\x12\xad\xfa\xdf\xd1\x84\x76\x45\x2f\x7b\x4b\x3c\xf6\xf3\xfb\xfc\xdc\xd8\x7e\xe5\x18\x05\xaf\xaf\xa8\xbf\xd1\xc0\xb8\x5e\x57\xae\x19\xdb\xaa\x72\x63\xfb\x23\x1d\x45\x6d\x4a\x64\x1c\xe7\x15\xac\x67\xec\x77\xdb\x97\xcf\xd8\xf1\x39\xf0\x05\xcf\x42\xea\xd1\x53\x86\xf2\x2f\x3e\x18\x7b\xcc\x32\xe9\xad\xe9\x4b\x94\x8e\x22\x36\x41\xf9\x60\xa2\x33\x5e\x58\xcf\xe1\xc0\x95\xf2\x29\x64\x53\xb2\x20\x09\xca\xbf\x27\xce\x56\x63\xdf\x33\x94\x29\x4b\x5a\x16\xdd\xea\xb8\xfc\xaf\x1e\x32\x28\xe3\x28\x31\xca\x25\xaf\xdd\x62\x73\x8a\x6d\x05\xb8\x18\x5a\x97\x4d\x25\x9d\xda\xed\x66\xed\x9a\xdb\xf7\x02\xf6\x73\xbb\xc1\xf5\xea\x9a\x18\xee\xad\xa5\xba\xfb\xb7\xec\xfe\xe0\x9a\xa2\x54\xb0\xbf\x47\xa6\xcc\x48\x62\x0c\xeb\xc9\x10\x12\x44\x3d\x2b\x4c\x70\x0c\x7f\x16\x7f\xa3\x4a\x17\x79\xc8\x18\x38\x15\x10\xf6\xa0\x4e\xce\xbc\x2a\x27\xf8\x10\x23\x7a\x3a\x73\x19\xc8\x53\x37\x04\xab\x08\x0f\xd8\x34\x8e\x4c\xb1\xc6\x6d\x57\xe6\xe4\x41\xf7\x32\x44\xb1\xd0\x07\x49\x19\x26\x95\x23\xf4\xca\xc7\x8f\x4f\x03\x85\x68\xb2\x26\x3f\x84\xf4\xc9\x34\x64\xaa\x83\x3c\xb5\x8f\xff\xae\xa1\xf6\x4d\xd9\x4b\x01\x81\xf2\x18\x67\xf8\x25\x8b\x38\x17\x5f\xd6\x87\x0c\x2e\x82\xf5\x5b\xe0\xcf\xe5\xe2\x3b\x3e\x91\xfa\xbc\x72\x9d\xa2\x69\xab\xf7\xc3\xc4\x9e\x69\x58\xe6\xff\x06\x00\x00\xff\xff\x78\xd8\xb7\xea\x4b\x02\x00\x00")

func reject_registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_reject_registrationHtml,
		"reject_registration.html",
	)
}

func reject_registrationHtml() (*asset, error) {
	bytes, err := reject_registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reject_registration.html", size: 587, mode: os.FileMode(0644), modTime: time.Unix(1622582528, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0xdb, 0xf6, 0x6, 0xa7, 0xb8, 0x68, 0x11, 0x89, 0xea, 0x97, 0x3a, 0xf1, 0x23, 0xe7, 0xc2, 0xb7, 0x2b, 0x89, 0x53, 0xbe, 0xcf, 0xe3, 0x46, 0xe1, 0x35, 0xed, 0xec, 0x37, 0xd2, 0x40, 0x7d}}
	return a, nil
}

var _reject_registrationTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4e\xf3\x30\x10\xc4\xef\x7e\x8a\xb9\x7d\x97\x28\x0f\xd0\xd3\x47\x55\x09\x7a\x41\xa8\x2d\xdc\x37\xf5\xb6\x31\x72\xbc\x61\xbd\x49\x89\xaa\xbc\x3b\x72\x28\x08\x4e\xdc\xec\xfd\x33\xf3\xdb\x79\xe0\x18\x05\xd7\x2b\xea\x47\xea\x18\xf3\x5c\x39\xf7\x9c\x4e\xa2\x36\x24\x32\x8e\x53\x05\x6b\x19\x87\xdd\x76\x7f\x87\x1d\x8f\x81\x2f\x58\x0b\xa9\x47\x4b\x19\xca\xaf\x7c\x34\xf6\x98\x64\xd0\xdb\xd0\x7d\x94\x86\x22\x36\x41\xf9\x68\xa2\x13\xf6\xac\x63\x38\x32\x94\xcf\x21\x9b\x92\x05\x49\x50\x7e\x1b\x38\x5b\x8d\x43\x5b\x3a\x94\x25\x2d\x46\xb7\x3a\x2e\x3f\xd5\x43\x06\x65\x9c\x24\x46\xb9\xe4\x95\x73\xdb\xcd\x6a\x41\x7e\xd9\x6e\x30\xcf\xce\x95\xf7\xee\x53\xa3\x7c\x9f\x22\x53\x66\x24\x31\x86\xb5\x64\x08\x09\xa2\x9e\x15\x26\x38\x85\xf7\xc5\xa8\x57\x69\x22\x77\x19\x1d\xa7\x42\xc4\x1e\xd4\xc8\xc8\x55\xb9\xe5\x5f\x8c\x68\x69\xe4\xb2\x90\x87\xa6\x0b\x06\xfa\xcd\x4f\x7d\xcf\x14\x6b\xdc\xbc\x32\x27\x0f\xfa\x2a\x43\x14\xcb\x19\x41\x52\x2e\x1a\xe4\xbb\x90\xfe\x9b\x86\x4c\x75\x90\xef\x2d\x2f\x05\x12\xca\x7d\x9c\xe0\x97\xc0\xe2\x54\xe6\xad\x0d\x19\xdc\x51\x88\xb5\x73\xeb\x92\x87\xf2\x99\xd4\xe7\xca\xfd\x11\xf2\x81\xa9\x73\x1f\x01\x00\x00\xff\xff\x2a\x11\x51\x8f\xd5\x01\x00\x00")

func reject_registrationTxtBytes() ([]byte, error) {
	return bindataRead(
		_reject_registrationTxt,
		"reject_registration.txt",
	)
}

func reject_registrationTxt() (*asset, error) {
	bytes, err := reject_registrationTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reject_registration.txt", size: 469, mode: os.FileMode(0644), modTime: time.Unix(1622582528, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0xbf, 0x13, 0xc7, 0xbb, 0x61, 0x9f, 0xfc, 0x2e, 0x8, 0x33, 0x69, 0x65, 0xbd, 0xfe, 0x42, 0x2, 0xec, 0x9e, 0x97, 0xc9, 0x3, 0x2c, 0x84, 0x78, 0xc, 0x88, 0xb2, 0x88, 0xfb, 0xf2, 0x74}}
	return a, nil
}

var _review_requestHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xd1\x8f\xe3\x34\x10\xc6\x9f\xc9\x5f\xf1\xa9\x42\x02\xa4\xb6\x11\x3c\xae\x42\xa4\x85\x95\x60\x01\x1d\xa7\xb6\xdc\x3d\x4f\xed\x49\x62\xce\xf1\x84\xb1\x9b\xa8\x3a\xdd\xff\x8e\x9c\xa6\xd7\x5d\x96\x7d\xba\xd7\xf1\x67\xfb\xf7\x7d\x9e\x71\x35\xd4\xbf\xb2\xf7\x82\xc3\xee\x71\x7f\x8f\x7b\xdb\xbb\x10\xd7\x55\x39\xd4\x45\x51\x0d\xf5\x7b\x46\x47\x23\x43\xd9\xb0\x1b\xd9\x82\x10\x78\x5a\xc4\xbf\x78\x39\x92\xc7\x83\x53\x36\x49\xf4\x0c\xe5\xd6\xc5\xa4\x94\x9c\x04\x28\xff\x73\xe2\x98\xd0\xa8\xf4\x20\xbc\xbb\xdf\xbf\x45\xea\x28\x15\x81\xd9\x46\x24\xc1\x31\x9f\x3b\x3a\x9e\xd8\x6e\x71\xe8\xf8\xba\x45\x14\x1d\x45\x8c\xac\xae\x71\x6c\x91\x3a\x76\x0a\xee\xc9\x79\x90\xb5\xca\x31\x7e\xcb\xf1\x3b\x50\xb0\x4f\xc0\x8a\xb7\xbf\xff\xbc\xff\xfe\x07\x0c\x14\xe3\x24\x6a\xf3\x0d\x96\x8d\x9e\x87\x04\x82\x61\x4d\xae\x71\x86\x12\x63\xea\x9c\xe9\x30\x39\xef\x33\x42\xcb\x81\x95\x12\x5b\x48\xf0\x67\xb8\x06\x67\x39\x81\x86\x41\x65\x64\xa4\xce\xc5\x62\xe1\x7a\x06\x89\xdf\xf6\x7f\xbe\x81\x8b\x77\xd7\xac\x94\xeb\x8f\x1f\xb1\xdd\x2d\xcb\x9f\x3e\x55\x65\xae\xcd\x31\x1e\xe4\xe2\xe6\x0c\x51\x28\xff\xcd\x26\x65\x57\xff\x1b\xd8\x1a\xa7\xc8\xf3\x6a\x23\xde\xcb\xe4\x42\x8b\x9e\x13\x59\x4a\x84\xc9\xa5\x2e\xaf\x15\x95\x11\xcb\x75\x6b\xe3\x12\x61\x55\xce\x05\x18\xe9\x7b\x0a\xf6\x4a\x75\xf2\x75\xf1\x55\xe5\x5d\xfd\xf8\x70\x87\x2a\x26\x95\xd0\xce\x98\xef\x1e\x1f\x66\xc4\xa5\x54\x95\xde\x2d\xca\x83\x7c\xe0\xf0\x5c\x3c\x97\x5e\xca\xab\x32\x1f\xbf\xf8\x23\x63\x78\x78\xe9\xea\xe6\x66\x21\x83\x77\x81\x91\x44\x3c\x28\x2e\x16\x6f\x21\xd6\x17\x5f\x5f\xe3\xe6\x0c\x1b\x87\x1b\x31\x36\x09\x4f\x91\xb0\xa1\xc5\xfa\xe7\x23\x0e\xf2\x5a\xc4\x6b\xe4\x47\x75\x96\x41\x8b\x24\xe7\xde\x73\x8c\xd4\x72\xc6\xc9\x1b\x3c\xc5\x04\xd2\xf6\xd4\x73\x48\x5f\x02\xb6\xc3\xa6\xc7\x6a\xf5\x5f\xbc\x37\x92\x78\x1e\x04\x4c\xfc\x8d\x32\x26\xd1\x0f\xf9\x8d\x93\xc0\x28\xe7\xfe\x24\xfc\xb5\xfb\x03\x1c\xec\x20\x2e\x24\x34\xa2\x97\x27\x27\x74\xca\xcd\x8f\xab\x2e\xa5\x21\xde\x95\xe5\x48\x71\xb0\xd7\xe1\xdb\x06\x4e\xe5\xaa\x7e\x51\xab\x4a\xaa\x11\x5d\xbe\x53\x10\x5d\x3f\xf8\xdc\x86\x97\x64\xb2\x8b\x62\x50\x31\x1c\xe3\x16\xef\x67\x9c\x28\xaa\x67\xd0\x51\x4e\x97\xfc\x5c\x30\x12\x46\x0e\x8e\x83\x61\x48\x33\x4f\x44\x6e\xc8\x4e\x2c\xe8\xa2\x61\x52\x7f\x46\x4c\x39\xc5\x59\xc1\xc5\xe5\x87\x08\x9c\xb2\xbd\xed\x67\xf3\x3f\xe5\xd1\xd8\x71\x4b\x6a\xe3\xba\x3a\x2a\xca\xba\x78\xe5\x33\xd9\xb3\x8e\xce\x30\x0e\x4c\x7d\xde\xff\x6f\x00\x00\x00\xff\xff\xdc\x31\xb3\xd2\xaa\x04\x00\x00")

func review_requestHtmlBytes() ([]byte, error) {
	return bindataRead(
		_review_requestHtml,
		"review_request.html",
	)
}

func review_requestHtml() (*asset, error) {
	bytes, err := review_requestHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "review_request.html", size: 1194, mode: os.FileMode(0644), modTime: time.Unix(1622583659, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0xe4, 0xee, 0x77, 0xc3, 0x91, 0xf, 0x1e, 0x7e, 0x72, 0x18, 0xe3, 0xac, 0x21, 0x97, 0x2f, 0xf4, 0x2e, 0x10, 0x6a, 0xaf, 0xf0, 0x2f, 0xe6, 0xab, 0x1d, 0xa5, 0x4, 0x9a, 0x51, 0xb4, 0x78}}
	return a, nil
}

var _review_requestTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6f\x13\x31\x10\x85\xef\xfe\x15\x4f\x15\x12\x20\x25\x91\xe0\xd8\x5b\xa1\x12\x14\x50\xa9\x92\xd0\x9e\xa7\xf6\x4b\xd6\xd4\xeb\x59\x6c\x67\x57\xab\xaa\xff\x1d\x79\xb3\x15\xad\xa0\x07\x6e\x96\x3d\x9e\xef\xcd\xf3\xf3\x67\x86\xa0\xd8\xae\x2f\x36\x67\x38\x73\xad\x8f\x79\x61\xcc\x0d\xd1\x48\x4f\x24\x5a\xfa\x9e\x0e\x82\xc8\x61\xae\xfa\x14\xf4\x56\x02\xce\x7d\xa2\x2d\x9a\x46\x24\xee\x7d\x2e\x49\x8a\xd7\x88\xc4\x5f\x07\xe6\x82\x5d\xd2\x16\x82\xeb\xb3\xcd\x15\x4a\x23\xc5\x44\xd2\x65\x14\xc5\x6d\xed\xdb\x7b\x0e\x74\x2b\x6c\x1b\x3e\x5e\xd1\x84\x46\x32\x7a\x26\xbf\xf3\x74\x28\x0d\x7d\x02\x5b\xf1\x01\xe2\x5c\x62\xce\x6f\x98\xdf\x42\xa2\x7b\x22\xcc\x5c\x7d\xfd\xb8\x79\xf7\x1e\x9d\xe4\x3c\x68\x72\x95\xe0\x68\xd3\xd8\x15\x08\x2c\x53\xf1\x3b\x6f\xa5\x10\x43\xe3\x6d\x83\xc1\x87\x50\x25\xec\x19\x99\xa4\xd0\x41\x63\x18\xe1\x77\x18\xf5\x00\xe9\xba\xa4\x3d\x51\x1a\x9f\xcd\xac\xeb\x99\x48\x7c\xd9\x7c\xbf\x84\xcf\xa7\xc6\xdc\xdf\x63\xb5\x9e\x77\x1f\x1e\x8c\xd9\xea\x51\xfb\x08\x4d\x48\xfc\x49\x5b\xea\x0c\xff\xb4\x67\x81\x43\xe6\x74\xba\xd3\x10\x74\xf0\x71\x8f\x96\x45\x9c\x14\xc1\xe0\x4b\x33\x9d\xed\x5d\x9e\xad\x82\xd5\xb6\x95\xe8\x4e\x8d\xb9\x38\x3f\x45\x45\x5f\x5f\x9c\x57\xec\x56\xef\x18\x8f\x3b\xd3\xf2\x51\x8a\x58\xcb\xee\x6f\x01\x7f\xc0\x73\x47\x04\x1f\x89\xa2\x1a\x20\x79\x56\x53\xa7\x7b\xf5\x94\xbe\xf4\x4f\x90\x58\x96\x67\x38\x2c\x65\x22\xbe\x30\xf2\x02\xd5\x52\xef\x08\x99\x4b\xaa\x0f\x2d\x73\x96\x3d\x2b\xb3\x5e\x08\x92\x0b\x24\xed\x0f\x2d\x63\xf9\x4f\xfa\x1a\xcb\x16\x27\x27\xc6\x5c\x6a\xe1\x94\x35\x0c\x7c\x9d\x88\x41\xd3\x5d\x35\xb6\x28\x6c\x62\x8d\x80\xe0\xc7\xfa\x1b\x18\x5d\xa7\x3e\x16\xec\x34\x4d\xf4\x5e\x72\xe7\x1e\xe3\xbc\x8a\x2c\xc8\xbe\xb6\x52\x64\xdf\x76\xa1\x3e\xe9\x71\xaa\x49\x4e\x97\xd4\x32\xe7\x15\x6e\x26\x4a\xd6\x94\x46\xc8\xad\x1e\x8e\xb3\xfb\x68\x35\xf6\x8c\x9e\xd1\x12\xba\x9b\xb2\x54\x1f\xb7\x51\x07\x39\xd6\x50\x52\x18\x91\x4b\x75\x60\xaa\xe0\xfc\xb7\x22\x4b\x55\xbd\x32\xe6\x43\x8d\xd5\x9a\x7b\x49\x2e\x2f\xcc\x0b\x3f\x6f\xc3\xd4\x7b\x4b\x6c\x29\xad\xf9\x1d\x00\x00\xff\xff\x26\xe5\xfc\xc4\xca\x03\x00\x00")

func review_requestTxtBytes() ([]byte, error) {
	return bindataRead(
		_review_requestTxt,
		"review_request.txt",
	)
}

func review_requestTxt() (*asset, error) {
	bytes, err := review_requestTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "review_request.txt", size: 970, mode: os.FileMode(0644), modTime: time.Unix(1622583624, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0xe2, 0x94, 0x11, 0xc4, 0x33, 0x4a, 0x59, 0x1, 0x9b, 0xb3, 0x66, 0x31, 0x7a, 0x50, 0x2a, 0xab, 0xa5, 0xde, 0xbf, 0xef, 0x59, 0xe3, 0x91, 0x59, 0xd9, 0x33, 0xa2, 0xa8, 0x9c, 0x62, 0x70}}
	return a, nil
}

var _verify_contactHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcd\x8e\x9b\x40\x0c\x80\xef\x3c\x85\x95\x4b\x2f\x29\xdc\x23\x8a\xfa\x27\xb5\x2b\x55\x3d\x6c\xd2\xde\xcd\xe0\x84\x11\xc3\x98\xda\x26\x11\x5a\xe5\xdd\xab\x99\x91\xd2\xed\x61\x6f\xe0\xdf\xcf\x1f\xb4\x4b\xf7\x9d\x42\x60\x78\x79\x81\xfa\x27\xce\x04\xf7\xfb\xbe\x6d\x96\xae\xaa\xda\xa5\x3b\x8d\x18\x27\xd8\x78\x85\x33\x0b\xe8\xda\xcf\xde\xcc\xc7\x0b\x20\x9c\x9e\x9f\x8e\x9f\x20\x92\xdd\x58\x26\x10\xba\x78\x35\x41\xf3\x1c\x41\xe8\xcf\x4a\x6a\x35\x9c\x18\x7a\xba\xf8\x08\x36\x12\x08\x5d\x3d\xdd\xaa\x45\xd8\x91\xea\x1e\x96\x40\xa8\x04\x2d\xc2\x28\x74\xfe\xb0\x4b\x00\xbf\x49\xfc\x79\xfb\xc2\xd1\xd0\xd9\xaf\xe7\x1f\x70\xbf\xef\xba\x6b\x0e\x26\x0a\x01\x9a\xd1\x07\xe8\x37\x70\xc1\xbb\x29\x91\xd8\xe8\xb5\x0a\x3e\x4e\x75\xdb\x60\x57\xc8\x9f\xce\x99\xd9\x61\x8c\x6c\xa5\x14\xb8\x50\xa4\xca\xc7\x6e\xc7\xcb\x06\x18\x07\x58\x50\x8d\x1e\x79\xe8\x29\xf0\x0d\x7c\x34\xce\x5b\xab\x5e\xf8\xa6\x24\x80\xc3\x20\xa4\x0a\x3d\xca\xe1\xe1\xa8\x75\x3c\x50\xf7\x06\x7d\xdb\xe4\xec\x6b\xac\x77\x42\x30\xe2\x35\xb3\x0b\xaf\x7d\x20\x28\x17\xa6\x48\x3e\xd2\x95\x09\xe5\xd8\x57\xb0\x25\x9a\x28\x8b\x7c\x1c\x66\x1f\xb5\x42\xfb\x27\x31\x75\x18\x1f\x72\xe6\xa3\x89\x57\xac\x3d\xef\xba\xff\xdf\x93\x28\x60\x49\x4a\xca\xba\x79\x5e\xa3\xb7\xad\x7a\x8c\x19\xcd\x16\x3d\x34\x4d\xee\x78\x9f\xbe\xb0\x2e\xe8\xa8\xd6\x80\x6e\xaa\x1d\xcf\xbb\xee\x98\x1e\xc1\x8d\x18\x23\x85\x34\xb1\xce\x36\x3e\x93\x5a\xfa\x1b\x50\x06\xdd\xb7\xbd\x40\xd3\x55\x85\xf6\x5b\xe0\x1e\x03\x7c\xf5\x42\xce\x58\x36\x38\x92\x5c\xbd\x23\x38\x11\xce\x59\xd0\xdf\x00\x00\x00\xff\xff\x76\x5a\xcf\xdb\x8c\x02\x00\x00")

func verify_contactHtmlBytes() ([]byte, error) {
	return bindataRead(
		_verify_contactHtml,
		"verify_contact.html",
	)
}

func verify_contactHtml() (*asset, error) {
	bytes, err := verify_contactHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "verify_contact.html", size: 652, mode: os.FileMode(0644), modTime: time.Unix(1622582599, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xbc, 0x1a, 0xa9, 0x34, 0x54, 0x24, 0x29, 0xe9, 0x94, 0x3c, 0xc1, 0xaf, 0xcd, 0xbe, 0x61, 0xa2, 0xcc, 0x6a, 0xbb, 0xa9, 0xe4, 0xda, 0x44, 0x6e, 0x20, 0x3f, 0xe1, 0x28, 0xe6, 0xba, 0xed}}
	return a, nil
}

var _verify_contactTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xbd\x8e\xdc\x30\x0c\x84\x7b\x3d\xc5\x74\x69\x36\x7e\x80\x54\xf9\x03\x92\x03\x82\x14\xb7\x9b\xf4\xb4\xcc\x5d\x13\x96\x45\x87\xa2\x77\x61\x1c\xfc\xee\x81\x2c\xe4\x90\xe6\x3a\x63\x38\xe6\x37\x23\x7e\xe7\x94\x14\x2f\x2f\xe8\x7e\xd2\xcc\xd8\xf7\x53\x08\x97\x91\xf2\x84\x4d\x57\x5c\xd5\x50\xd6\x7e\x16\x77\xc9\x37\x10\x2e\xcf\x4f\xe7\x4f\xc8\xec\x0f\xb5\x09\xc6\x37\x29\x6e\xe4\xa2\x19\xc6\x7f\x56\x2e\xde\xe1\xa2\xe8\xf9\x26\x19\x3e\x32\x8c\xef\xc2\x0f\x2c\xa6\x91\x4b\x39\x61\x49\x4c\x85\x0f\xe0\x6f\x36\xb9\x6e\x5f\x34\x3b\x45\xff\xf5\xfc\x03\xfb\x7e\x3f\xa4\x8a\x36\xf0\x4c\x92\xd0\x6f\x88\x49\xe2\x54\xf1\x3e\x4a\x41\x92\x3c\x75\x21\x3c\x5d\x8f\x80\x91\x72\x56\x6f\x16\x68\x43\x56\xc7\x2b\x28\xea\xb2\x81\xf2\x80\x85\x8a\xf3\xeb\x1c\x3d\x27\x7d\x40\xb2\x6b\xa3\xf5\xa6\x8f\xc2\x06\x1a\x06\xe3\x52\xd0\x93\x7d\x08\xe1\x8d\x98\xff\xf0\xef\x8c\x31\xd2\xfd\xc8\x66\xba\xf6\x89\xd1\x1a\x54\xe5\x58\x1b\xdb\x6f\xad\xcc\x7f\xa1\x9a\x5a\xd3\xb4\x17\xa5\x61\x96\x5c\x40\xde\xbe\x3e\xba\x49\xa1\x4e\x14\x6a\xb5\x56\x5b\x35\xcf\x6b\x16\xdf\x70\x4e\x14\x27\xc4\x91\x72\xe6\x84\xc3\xfa\xbe\xde\xa3\x2c\x14\xb9\x2b\x75\xda\x45\x9d\xbb\x10\x3e\x73\xf1\x7a\x25\xb2\xa1\x9c\x42\x43\x7d\x4b\xda\x53\xc2\x57\x31\x8e\xae\xb6\xe1\xcc\x76\x97\xc8\xb8\x30\xcd\xe1\x6f\x00\x00\x00\xff\xff\xb4\xa7\x17\x83\x10\x02\x00\x00")

func verify_contactTxtBytes() ([]byte, error) {
	return bindataRead(
		_verify_contactTxt,
		"verify_contact.txt",
	)
}

func verify_contactTxt() (*asset, error) {
	bytes, err := verify_contactTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "verify_contact.txt", size: 528, mode: os.FileMode(0644), modTime: time.Unix(1622582599, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xe1, 0x94, 0x81, 0xf5, 0x2a, 0x4c, 0x11, 0x5d, 0xdb, 0xfb, 0xfa, 0x72, 0xc, 0x8b, 0x3f, 0xf, 0x52, 0x18, 0x43, 0x74, 0x20, 0x38, 0x6d, 0xc8, 0x3e, 0x62, 0xf, 0x6f, 0x7f, 0xd8, 0xc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deliver_certs.html":       deliver_certsHtml,
	"deliver_certs.txt":        deliver_certsTxt,
	"reject_registration.html": reject_registrationHtml,
	"reject_registration.txt":  reject_registrationTxt,
	"review_request.html":      review_requestHtml,
	"review_request.txt":       review_requestTxt,
	"verify_contact.html":      verify_contactHtml,
	"verify_contact.txt":       verify_contactTxt,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deliver_certs.html": {deliver_certsHtml, map[string]*bintree{}},
	"deliver_certs.txt": {deliver_certsTxt, map[string]*bintree{}},
	"reject_registration.html": {reject_registrationHtml, map[string]*bintree{}},
	"reject_registration.txt": {reject_registrationTxt, map[string]*bintree{}},
	"review_request.html": {review_requestHtml, map[string]*bintree{}},
	"review_request.txt": {review_requestTxt, map[string]*bintree{}},
	"verify_contact.html": {verify_contactHtml, map[string]*bintree{}},
	"verify_contact.txt": {verify_contactTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
