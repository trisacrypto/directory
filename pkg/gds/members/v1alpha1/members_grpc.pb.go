// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gds/members/v1alpha1/members.proto

package members

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TRISAMembers_List_FullMethodName    = "/gds.members.v1alpha1.TRISAMembers/List"
	TRISAMembers_Summary_FullMethodName = "/gds.members.v1alpha1.TRISAMembers/Summary"
	TRISAMembers_Details_FullMethodName = "/gds.members.v1alpha1.TRISAMembers/Details"
)

// TRISAMembersClient is the client API for TRISAMembers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The TRISAMembers service is an experimental service that provides extra access to the
// directory service for verified TRISA members. Access to this service requires mTLS
// authentication via the TRISA issued identity certificates similar to the peer to peer
// TRISANetwork service. Once validated, this service will be moved into the official
// TRISA specification. It is added here to facilitate the development of TRISA nodes
// against the directory service and promote the expansion of the TRISA network.
type TRISAMembersClient interface {
	// List all verified VASP members in the Directory Service.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	// Get a short summary of the verified VASP members in the Directory Service.
	Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryReply, error)
	// Get details for a VASP member in the Directory Service.
	Details(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*MemberDetails, error)
}

type tRISAMembersClient struct {
	cc grpc.ClientConnInterface
}

func NewTRISAMembersClient(cc grpc.ClientConnInterface) TRISAMembersClient {
	return &tRISAMembersClient{cc}
}

func (c *tRISAMembersClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReply)
	err := c.cc.Invoke(ctx, TRISAMembers_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISAMembersClient) Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryReply)
	err := c.cc.Invoke(ctx, TRISAMembers_Summary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISAMembersClient) Details(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*MemberDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberDetails)
	err := c.cc.Invoke(ctx, TRISAMembers_Details_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRISAMembersServer is the server API for TRISAMembers service.
// All implementations must embed UnimplementedTRISAMembersServer
// for forward compatibility.
//
// The TRISAMembers service is an experimental service that provides extra access to the
// directory service for verified TRISA members. Access to this service requires mTLS
// authentication via the TRISA issued identity certificates similar to the peer to peer
// TRISANetwork service. Once validated, this service will be moved into the official
// TRISA specification. It is added here to facilitate the development of TRISA nodes
// against the directory service and promote the expansion of the TRISA network.
type TRISAMembersServer interface {
	// List all verified VASP members in the Directory Service.
	List(context.Context, *ListRequest) (*ListReply, error)
	// Get a short summary of the verified VASP members in the Directory Service.
	Summary(context.Context, *SummaryRequest) (*SummaryReply, error)
	// Get details for a VASP member in the Directory Service.
	Details(context.Context, *DetailsRequest) (*MemberDetails, error)
	mustEmbedUnimplementedTRISAMembersServer()
}

// UnimplementedTRISAMembersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTRISAMembersServer struct{}

func (UnimplementedTRISAMembersServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTRISAMembersServer) Summary(context.Context, *SummaryRequest) (*SummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedTRISAMembersServer) Details(context.Context, *DetailsRequest) (*MemberDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Details not implemented")
}
func (UnimplementedTRISAMembersServer) mustEmbedUnimplementedTRISAMembersServer() {}
func (UnimplementedTRISAMembersServer) testEmbeddedByValue()                      {}

// UnsafeTRISAMembersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TRISAMembersServer will
// result in compilation errors.
type UnsafeTRISAMembersServer interface {
	mustEmbedUnimplementedTRISAMembersServer()
}

func RegisterTRISAMembersServer(s grpc.ServiceRegistrar, srv TRISAMembersServer) {
	// If the following call pancis, it indicates UnimplementedTRISAMembersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TRISAMembers_ServiceDesc, srv)
}

func _TRISAMembers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISAMembersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISAMembers_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISAMembersServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISAMembers_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISAMembersServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISAMembers_Summary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISAMembersServer).Summary(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISAMembers_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISAMembersServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRISAMembers_Details_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISAMembersServer).Details(ctx, req.(*DetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TRISAMembers_ServiceDesc is the grpc.ServiceDesc for TRISAMembers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TRISAMembers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gds.members.v1alpha1.TRISAMembers",
	HandlerType: (*TRISAMembersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TRISAMembers_List_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _TRISAMembers_Summary_Handler,
		},
		{
			MethodName: "Details",
			Handler:    _TRISAMembers_Details_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gds/members/v1alpha1/members.proto",
}
