syntax = "proto3";

package gds.peers.v1;
option go_package = "github.com/trisacrypto/directory/pkg/gds/peers/v1;peers";

// Peer contains metadata about how to connect to remote peers in the directory service
// network. This message services as a data-transfer and exchange mechanism for dynamic
// networks with changing membership.
message Peer {
    uint64 id = 1;                   // the process id of the peer must be unique in the network; used for distributed versions
    string addr = 2;                 // the network address to connect to the peer on (don't forget the port!)
    string name = 3;                 // optional - a unique, human readable name for the peer
    string region = 4;               // optional - the region the peer is running in

    // extra information that might be relevant to process-specific functions; e.g. for
    // specific clouds or data that's been parsed (optional).
    map<string, string> extra = 15;
}

// PeerManagement provides a simple interface for administrators to debug the
// anti-entropy network and to manage services. Note that administrators can also use
// Gossip to perform the same requests, but this service simplifies things.
service PeerManagement {
    rpc GetPeers(GetPeersRequest) returns (GetPeersReply) {};
    rpc AddPeers(AddPeersRequest) returns (AddPeersReply) {};
    rpc RmPeers(RmPeersRequest) returns (RmPeersReply) {};
}

message GetPeersRequest {}
message GetPeersReply {}
message AddPeersRequest {}
message AddPeersReply {}
message RmPeersRequest {}
message RmPeersReply {}