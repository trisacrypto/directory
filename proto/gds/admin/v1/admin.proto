syntax = "proto3";

package gds.admin.v1;
option go_package = "github.com/trisacrypto/directory/pkg/gds/admin/v1;admin";

import "trisa/gds/api/v1beta1/api.proto";
import "trisa/gds/models/v1beta1/models.proto";

// An administrative service that is implemented side-by-side with most directory
// services to review registration requests and perform remote certificate management.
// Because this endpoint necessarily must be authenticated, it is deliberately
// lightweight for the MVP implementation.
service DirectoryAdministration {
    rpc Review(ReviewRequest) returns (ReviewReply) {}
    rpc Resend(ResendRequest) returns (ResendReply) {}
    rpc Status(StatusRequest) returns (StatusReply) {}
}

// Registration review requests are sent via email to the TRISA admin email address with
// a lightweight token for review. This endpoint allows administrators to submit a review
// determination back to the directory server.
message ReviewRequest {
    // The ID of the VASP to perform the review for.
    string id = 1;

    // The verification token sent in the review email.
    // This token provides lightweight authentication but should be replaced with a more
    // robust authentication and authorization scheme.
    string admin_verification_token = 2;

    // If accept is false then the request will be rejected and a reject reason must be
    // specified. If it is true, then the certificate issuance process will begin.
    bool accept = 3;
    string reject_reason = 4;
}

message ReviewReply {
    // If no error is specified, the verify email request was successful
    trisa.gds.api.v1beta1.Error error = 1;

    // The verification status of the VASP entity.
    trisa.gds.models.v1beta1.VerificationState status = 2;
    string message = 3;
}

// Resend requests allow extra attempts to resend emails to be made if they were not
// delivered or recieved the first time. This is a routine action that may need to be
// carried out from time to time.
message ResendRequest {
    enum ResendType {
        UNKNOWN = 0;
        VERIFY_CONTACT = 1;
        REVIEW = 2;
        DELIVER_CERTS = 3;
        REJECTION = 4;
    }

    string id = 1;                   // The ID of the VASP to resend emails for
    ResendType type = 2;             // The type of message to attempt to resend
    string reason = 3;               // If a rejection email, supply the reason for the rejection.
}

message ResendReply {
    int64 sent = 1;                  // The number of emails sent
    string message = 2;              // Any message from the server about status
}

message StatusRequest {
    bool no_registrations = 1;         // Ignore counting the registration statuses
    bool no_certificate_requests = 2;  // Ignore counting certificate request statuses
}

message StatusReply {
    map<string, int64> registrations = 1;
    map<string, int64> certificate_requests = 2;
}