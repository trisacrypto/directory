syntax="proto3";

package bff.models.v1;
option go_package = "github.com/trisacrypto/directory/pkg/bff/models/v1;models";

import "ivms101/ivms101.proto";
import "trisa/gds/models/v1beta1/models.proto";

// The Organization document contains VASP-specific information for a single VASP record
// in the directory service. This document differs in that it stores information
// relevant to the BFF and should not be used to duplicate storage in the directory.
message Organization {
    // BFF Unique Identifier and Record Information
    string id = 1;
    string name = 2;
    string logo_url = 3;
    string domain = 4;
    string created_by = 5;

    // Directory Registrations for Lookups
    // TODO: populate these details in the Registration Endpoint
    DirectoryRecord testnet = 10;
    DirectoryRecord mainnet = 11;

    // Collaborators
    map<string, Collaborator> collaborators = 12;

    // Registration Form
    RegistrationForm registration = 13;

    // Metadata as RFC3339Nano Timestamps
    string created = 14;
    string modified = 15;
}

// A Collaborator is a user that is associated with an organization. Collaborators are
// uniquely identified by their email address and the Organization document they exist
// on. Therefore, it is possible for a user to exist as a collaborator on multiple
// organizations. The information in the Collaborator document is meant to be used by
// frontend applications to manage and display collaborators and their roles to the
// user, so the BFF should periodically keep this information up to date by syncing
// with the authentication service (e.g. Auth0).
message Collaborator {
    // Identifiers used by the BFF
    string id = 1;
    string email = 2;

    // User data cached from the authentication service
    string user_id = 3;
    string name = 4;
    repeated string roles = 5;
    bool verified = 6;

    // Metadata as RFC3339Nano Timestamps
    string created_at = 10;
    string modified_at = 11;
    string joined_at = 12;
    string last_login = 13;
    string expires_at = 14;
}

// FormState contains the current state of an organization's registration form to
// enable a consistent user experience across multiple contexts.
message FormState {
    // The current 1-indexed step of the form
    int32 current = 1;

    // If set, the form is completely filled out and ready to be submitted
    bool ready_to_submit = 2;

    // The state of each step in the form
    repeated FormStep steps = 3;

    // RFC 3339 timestamp -- if set, the user has started filling out the form
    string started = 4;
}

// FormStep contains the state of a single step in an organization's registration form.
message FormStep {
    int32 key = 1;
    string status = 2;
    string name = 3;
}

// DirectoryRecord contains the information needed to lookup a VASP in a directory service.
message DirectoryRecord {
    string id = 1;
    string registered_directory = 2;
    string common_name = 3;

    // RFC 3339 timestamp -- if set, the form has been submitted without error
    string submitted = 15;
}

// RegistrationForm is an extension of the TRISA GDS RegistrationRequest with BFF fields.
message RegistrationForm {
    // Business information: Basic Details Step
    string website = 1;
    trisa.gds.models.v1beta1.BusinessCategory business_category = 2;
    repeated string vasp_categories = 3;
    string established_on = 4;
    string organization_name = 5;

    // IVMS 101 Legal Person record: Legal Person Step
    ivms101.LegalPerson entity = 11;

    // Directory Record contacts: Contacts Step
    trisa.gds.models.v1beta1.Contacts contacts = 12;

    // TRIXO Form: TRIXO Step
    trisa.gds.models.v1beta1.TRIXOQuestionnaire trixo = 13;

    // Network-specific information and submission details: TRISA Step
    NetworkDetails testnet = 14;
    NetworkDetails mainnet = 15;

    // Current progress of the form for the frontend
    FormState state = 20;
}

// NetworkDetails contains directory-service specific submission information such as the
// certificate request and information about when the registration form was submitted.
message NetworkDetails {
    // Certificate request information
    string common_name = 1;
    string endpoint = 2;
    repeated string dns_names = 3;
}

// Announcements are made by network administrators to inform all TRISA members of
// important events, maintenance, or milestones. These are broadcast from the BFF so
// that all members receive the same announcement.
message Announcement {
    string id = 1;
    string title = 2;
    string body = 3;
    string post_date = 4;
    string author = 5;

    // Metadata as RFC3339Nano Timestamps
    string created = 14;
    string modified = 15;
}

// Announcements are stored in months to enable fast retrieval of the latest
// announcements in a specific time range without a reversal traversal of time-ordered
// anncouncement objects. Note that the annoucements are stored in a slice instead of
// a map to reduce data storage overhead. Accessing a specific announcement requires
// iterating over the annoucements, but the number of annoucements in a month should not
// be unbounded, so this cost is acceptable for data storage performance.
message AnnouncementMonth {
    string date = 1;
    repeated Announcement announcements = 2;

    // Metadata as RFC3339Nano Timestamps
    string created = 14;
    string modified = 15;
}

// ActivityDay represents activity across multiple networks aggregated over a single
// day.
message ActivityDay {
    // The date which the activities occurred on
    string date = 1;

    // Activity counts broken down by network and activity type
    ActivityCount activity = 3;

    // Activity counts broken down by VASP
    map<string, ActivityCount> vasp_activity = 4;
}

// Activity counts are aggregated by day and stored in months to enable
// efficient lookups of multiple days of counts for time series representations.
message ActivityMonth {
    string date = 1;
    repeated ActivityDay days = 2;

    // Metadata as RFC3339Nano Timestamps
    string created = 14;
    string modified = 15;
}

// ActivityCount represents counts broken down by activity type and network.
message ActivityCount {
    map<string, uint64> testnet = 1;
    map<string, uint64> mainnet = 2;
    map<string, uint64> RVASP = 3;
}

// AttentionSeverity is used to indicate the importance of an attention message
enum AttentionSeverity {
    SUCCESS = 0;
    INFO = 1;
    WARNING = 2;
    ALERT = 3;
}

// AttentionAction is used to indicate the action that should be taken by the user in
// response to an attention message.
enum AttentionAction {
    NO_ACTION = 0;
    START_REGISTRATION = 1;
    COMPLETE_REGISTRATION = 2;
    SUBMIT_TESTNET = 3;
    SUBMIT_MAINNET = 4;
    VERIFY_EMAILS = 5;
    RENEW_CERTIFICATE = 6;
    CONTACT_SUPPORT = 7;
}